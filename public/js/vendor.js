/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkcrm"] = self["webpackChunkcrm"] || []).push([["/js/vendor"],{

/***/ "./node_modules/uikit/dist/js/uikit-icons.js":
/*!***************************************************!*\
  !*** ./node_modules/uikit/dist/js/uikit-icons.js ***!
  \***************************************************/
/***/ (function(module) {

eval("/*! UIkit 3.15.23 | https://www.getuikit.com | (c) 2014 - 2023 YOOtheme | MIT License */\n\n(function (global, factory) {\n     true ? module.exports = factory() :\n    0;\n})(this, (function () { 'use strict';\n\n    function plugin(UIkit) {\n      if (plugin.installed) {\n        return;\n      }\n\n      UIkit.icon.add({\n        \"500px\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M9.624,11.866c-0.141,0.132,0.479,0.658,0.662,0.418c0.051-0.046,0.607-0.61,0.662-0.664c0,0,0.738,0.719,0.814,0.719 c0.1,0,0.207-0.055,0.322-0.17c0.27-0.269,0.135-0.416,0.066-0.495l-0.631-0.616l0.658-0.668c0.146-0.156,0.021-0.314-0.1-0.449 c-0.182-0.18-0.359-0.226-0.471-0.125l-0.656,0.654l-0.654-0.654c-0.033-0.034-0.08-0.045-0.124-0.045 c-0.079,0-0.191,0.068-0.307,0.181c-0.202,0.202-0.247,0.351-0.133,0.462l0.665,0.665L9.624,11.866z\\\"/><path d=\\\"M11.066,2.884c-1.061,0-2.185,0.248-3.011,0.604c-0.087,0.034-0.141,0.106-0.15,0.205C7.893,3.784,7.919,3.909,7.982,4.066 c0.05,0.136,0.187,0.474,0.452,0.372c0.844-0.326,1.779-0.507,2.633-0.507c0.963,0,1.9,0.191,2.781,0.564 c0.695,0.292,1.357,0.719,2.078,1.34c0.051,0.044,0.105,0.068,0.164,0.068c0.143,0,0.273-0.137,0.389-0.271 c0.191-0.214,0.324-0.395,0.135-0.575c-0.686-0.654-1.436-1.138-2.363-1.533C13.24,3.097,12.168,2.884,11.066,2.884z\\\"/><path d=\\\"M16.43,15.747c-0.092-0.028-0.242,0.05-0.309,0.119l0,0c-0.652,0.652-1.42,1.169-2.268,1.521 c-0.877,0.371-1.814,0.551-2.779,0.551c-0.961,0-1.896-0.189-2.775-0.564c-0.848-0.36-1.612-0.879-2.268-1.53 c-0.682-0.688-1.196-1.455-1.529-2.268c-0.325-0.799-0.471-1.643-0.471-1.643c-0.045-0.24-0.258-0.249-0.567-0.203 c-0.128,0.021-0.519,0.079-0.483,0.36v0.01c0.105,0.644,0.289,1.284,0.545,1.895c0.417,0.969,1.002,1.849,1.756,2.604 c0.757,0.754,1.636,1.34,2.604,1.757C8.901,18.785,9.97,19,11.088,19c1.104,0,2.186-0.215,3.188-0.645 c1.838-0.896,2.604-1.757,2.604-1.757c0.182-0.204,0.227-0.317-0.1-0.643C16.779,15.956,16.525,15.774,16.43,15.747z\\\"/><path d=\\\"M5.633,13.287c0.293,0.71,0.723,1.341,1.262,1.882c0.54,0.54,1.172,0.971,1.882,1.264c0.731,0.303,1.509,0.461,2.298,0.461 c0.801,0,1.578-0.158,2.297-0.461c0.711-0.293,1.344-0.724,1.883-1.264c0.543-0.541,0.971-1.172,1.264-1.882 c0.314-0.721,0.463-1.5,0.463-2.298c0-0.79-0.148-1.569-0.463-2.289c-0.293-0.699-0.721-1.329-1.264-1.881 c-0.539-0.541-1.172-0.959-1.867-1.263c-0.721-0.303-1.5-0.461-2.299-0.461c-0.802,0-1.613,0.159-2.322,0.461 c-0.577,0.25-1.544,0.867-2.119,1.454v0.012V2.108h8.16C15.1,2.104,15.1,1.69,15.1,1.552C15.1,1.417,15.1,1,14.809,1H5.915 C5.676,1,5.527,1.192,5.527,1.384v6.84c0,0.214,0.273,0.372,0.529,0.428c0.5,0.105,0.614-0.056,0.737-0.224l0,0 c0.18-0.273,0.776-0.884,0.787-0.894c0.901-0.905,2.117-1.408,3.416-1.408c1.285,0,2.5,0.501,3.412,1.408 c0.914,0.914,1.408,2.122,1.408,3.405c0,1.288-0.508,2.496-1.408,3.405c-0.9,0.896-2.152,1.406-3.438,1.406 c-0.877,0-1.711-0.229-2.433-0.671v-4.158c0-0.553,0.237-1.151,0.643-1.614c0.462-0.519,1.094-0.799,1.782-0.799 c0.664,0,1.293,0.253,1.758,0.715c0.459,0.459,0.709,1.071,0.709,1.723c0,1.385-1.094,2.468-2.488,2.468 c-0.273,0-0.769-0.121-0.781-0.125c-0.281-0.087-0.405,0.306-0.438,0.436c-0.159,0.496,0.079,0.585,0.123,0.607 c0.452,0.137,0.743,0.157,1.129,0.157c1.973,0,3.572-1.6,3.572-3.57c0-1.964-1.6-3.552-3.572-3.552c-0.97,0-1.872,0.36-2.546,1.038 c-0.656,0.631-1.027,1.487-1.027,2.322v3.438v-0.011c-0.372-0.42-0.732-1.041-0.981-1.682c-0.102-0.248-0.315-0.202-0.607-0.113 c-0.135,0.035-0.519,0.157-0.44,0.439C5.372,12.799,5.577,13.164,5.633,13.287z\\\"/></svg>\",\n        \"album\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect x=\\\"5\\\" y=\\\"2\\\" width=\\\"10\\\" height=\\\"1\\\"/><rect x=\\\"3\\\" y=\\\"4\\\" width=\\\"14\\\" height=\\\"1\\\"/><rect fill=\\\"none\\\" stroke=\\\"#000\\\" x=\\\"1.5\\\" y=\\\"6.5\\\" width=\\\"17\\\" height=\\\"11\\\"/></svg>\",\n        \"arrow-down\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polygon points=\\\"10.5,16.08 5.63,10.66 6.37,10 10.5,14.58 14.63,10 15.37,10.66\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" x1=\\\"10.5\\\" y1=\\\"4\\\" x2=\\\"10.5\\\" y2=\\\"15\\\"/></svg>\",\n        \"arrow-left\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" points=\\\"10 14 5 9.5 10 5\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" x1=\\\"16\\\" y1=\\\"9.5\\\" x2=\\\"5\\\" y2=\\\"9.52\\\"/></svg>\",\n        \"arrow-right\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" points=\\\"10 5 15 9.5 10 14\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" x1=\\\"4\\\" y1=\\\"9.5\\\" x2=\\\"15\\\" y2=\\\"9.5\\\"/></svg>\",\n        \"arrow-up\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polygon points=\\\"10.5,4 15.37,9.4 14.63,10.08 10.5,5.49 6.37,10.08 5.63,9.4\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" x1=\\\"10.5\\\" y1=\\\"16\\\" x2=\\\"10.5\\\" y2=\\\"5\\\"/></svg>\",\n        \"bag\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path fill=\\\"none\\\" stroke=\\\"#000\\\" d=\\\"M7.5,7.5V4A2.48,2.48,0,0,1,10,1.5,2.54,2.54,0,0,1,12.5,4V7.5\\\"/><polygon fill=\\\"none\\\" stroke=\\\"#000\\\" points=\\\"16.5 7.5 3.5 7.5 2.5 18.5 17.5 18.5 16.5 7.5\\\"/></svg>\",\n        \"ban\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" cx=\\\"10\\\" cy=\\\"10\\\" r=\\\"9\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" x1=\\\"4\\\" y1=\\\"3.5\\\" x2=\\\"16\\\" y2=\\\"16.5\\\"/></svg>\",\n        \"behance\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M9.5,10.6c-0.4-0.5-0.9-0.9-1.6-1.1c1.7-1,2.2-3.2,0.7-4.7C7.8,4,6.3,4,5.2,4C3.5,4,1.7,4,0,4v12c1.7,0,3.4,0,5.2,0 c1,0,2.1,0,3.1-0.5C10.2,14.6,10.5,12.3,9.5,10.6L9.5,10.6z M5.6,6.1c1.8,0,1.8,2.7-0.1,2.7c-1,0-2,0-2.9,0V6.1H5.6z M2.6,13.8v-3.1 c1.1,0,2.1,0,3.2,0c2.1,0,2.1,3.2,0.1,3.2L2.6,13.8z\\\"/><path d=\\\"M19.9,10.9C19.7,9.2,18.7,7.6,17,7c-4.2-1.3-7.3,3.4-5.3,7.1c0.9,1.7,2.8,2.3,4.7,2.1c1.7-0.2,2.9-1.3,3.4-2.9h-2.2 c-0.4,1.3-2.4,1.5-3.5,0.6c-0.4-0.4-0.6-1.1-0.6-1.7H20C20,11.7,19.9,10.9,19.9,10.9z M13.5,10.6c0-1.6,2.3-2.7,3.5-1.4 c0.4,0.4,0.5,0.9,0.6,1.4H13.5L13.5,10.6z\\\"/><rect x=\\\"13\\\" y=\\\"4\\\" width=\\\"5\\\" height=\\\"1.4\\\"/></svg>\",\n        \"bell\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" d=\\\"M17,15.5 L3,15.5 C2.99,14.61 3.79,13.34 4.1,12.51 C4.58,11.3 4.72,10.35 5.19,7.01 C5.54,4.53 5.89,3.2 7.28,2.16 C8.13,1.56 9.37,1.5 9.81,1.5 L9.96,1.5 C9.96,1.5 11.62,1.41 12.67,2.17 C14.08,3.2 14.42,4.54 14.77,7.02 C15.26,10.35 15.4,11.31 15.87,12.52 C16.2,13.34 17.01,14.61 17,15.5 L17,15.5 Z\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" d=\\\"M12.39,16 C12.39,17.37 11.35,18.43 9.91,18.43 C8.48,18.43 7.42,17.37 7.42,16\\\"/></svg>\",\n        \"bold\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M5,15.3 C5.66,15.3 5.9,15 5.9,14.53 L5.9,5.5 C5.9,4.92 5.56,4.7 5,4.7 L5,4 L8.95,4 C12.6,4 13.7,5.37 13.7,6.9 C13.7,7.87 13.14,9.17 10.86,9.59 L10.86,9.7 C13.25,9.86 14.29,11.28 14.3,12.54 C14.3,14.47 12.94,16 9,16 L5,16 L5,15.3 Z M9,9.3 C11.19,9.3 11.8,8.5 11.85,7 C11.85,5.65 11.3,4.8 9,4.8 L7.67,4.8 L7.67,9.3 L9,9.3 Z M9.185,15.22 C11.97,15 12.39,14 12.4,12.58 C12.4,11.15 11.39,10 9,10 L7.67,10 L7.67,15 L9.18,15 Z\\\"/></svg>\",\n        \"bolt\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M4.74,20 L7.73,12 L3,12 L15.43,1 L12.32,9 L17.02,9 L4.74,20 L4.74,20 L4.74,20 Z M9.18,11 L7.1,16.39 L14.47,10 L10.86,10 L12.99,4.67 L5.61,11 L9.18,11 L9.18,11 L9.18,11 Z\\\"/></svg>\",\n        \"bookmark\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polygon fill=\\\"none\\\" stroke=\\\"#000\\\" points=\\\"5.5 1.5 15.5 1.5 15.5 17.5 10.5 12.5 5.5 17.5\\\"/></svg>\",\n        \"calendar\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M 2,3 2,17 18,17 18,3 2,3 Z M 17,16 3,16 3,8 17,8 17,16 Z M 17,7 3,7 3,4 17,4 17,7 Z\\\"/><rect width=\\\"1\\\" height=\\\"3\\\" x=\\\"6\\\" y=\\\"2\\\"/><rect width=\\\"1\\\" height=\\\"3\\\" x=\\\"13\\\" y=\\\"2\\\"/></svg>\",\n        \"camera\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" cx=\\\"10\\\" cy=\\\"10.8\\\" r=\\\"3.8\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" d=\\\"M1,4.5 C0.7,4.5 0.5,4.7 0.5,5 L0.5,17 C0.5,17.3 0.7,17.5 1,17.5 L19,17.5 C19.3,17.5 19.5,17.3 19.5,17 L19.5,5 C19.5,4.7 19.3,4.5 19,4.5 L13.5,4.5 L13.5,2.9 C13.5,2.6 13.3,2.5 13,2.5 L7,2.5 C6.7,2.5 6.5,2.6 6.5,2.9 L6.5,4.5 L1,4.5 L1,4.5 Z\\\"/></svg>\",\n        \"cart\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle cx=\\\"7.3\\\" cy=\\\"17.3\\\" r=\\\"1.4\\\"/><circle cx=\\\"13.3\\\" cy=\\\"17.3\\\" r=\\\"1.4\\\"/><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" points=\\\"0 2 3.2 4 5.3 12.5 16 12.5 18 6.5 8 6.5\\\"/></svg>\",\n        \"check\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" points=\\\"4,10 8,15 17,4\\\"/></svg>\",\n        \"chevron-double-left\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.03\\\" points=\\\"10 14 6 10 10 6\\\"/><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.03\\\" points=\\\"14 14 10 10 14 6\\\"/></svg>\",\n        \"chevron-double-right\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.03\\\" points=\\\"10 6 14 10 10 14\\\"/><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.03\\\" points=\\\"6 6 10 10 6 14\\\"/></svg>\",\n        \"chevron-down\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.03\\\" points=\\\"16 7 10 13 4 7\\\"/></svg>\",\n        \"chevron-left\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.03\\\" points=\\\"13 16 7 10 13 4\\\"/></svg>\",\n        \"chevron-right\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.03\\\" points=\\\"7 4 13 10 7 16\\\"/></svg>\",\n        \"chevron-up\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.03\\\" points=\\\"4 13 10 7 16 13\\\"/></svg>\",\n        \"clock\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" cx=\\\"10\\\" cy=\\\"10\\\" r=\\\"9\\\"/><rect x=\\\"9\\\" y=\\\"4\\\" width=\\\"1\\\" height=\\\"7\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" d=\\\"M13.018,14.197 L9.445,10.625\\\"/></svg>\",\n        \"close\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.06\\\" d=\\\"M16,16 L4,4\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.06\\\" d=\\\"M16,4 L4,16\\\"/></svg>\",\n        \"cloud-download\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" d=\\\"M6.5,14.61 L3.75,14.61 C1.96,14.61 0.5,13.17 0.5,11.39 C0.5,9.76 1.72,8.41 3.3,8.2 C3.38,5.31 5.75,3 8.68,3 C11.19,3 13.31,4.71 13.89,7.02 C14.39,6.8 14.93,6.68 15.5,6.68 C17.71,6.68 19.5,8.45 19.5,10.64 C19.5,12.83 17.71,14.6 15.5,14.6 L12.5,14.6\\\"/><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" points=\\\"11.75 16 9.5 18.25 7.25 16\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" d=\\\"M9.5,18 L9.5,9.5\\\"/></svg>\",\n        \"cloud-upload\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" d=\\\"M6.5,14.61 L3.75,14.61 C1.96,14.61 0.5,13.17 0.5,11.39 C0.5,9.76 1.72,8.41 3.31,8.2 C3.38,5.31 5.75,3 8.68,3 C11.19,3 13.31,4.71 13.89,7.02 C14.39,6.8 14.93,6.68 15.5,6.68 C17.71,6.68 19.5,8.45 19.5,10.64 C19.5,12.83 17.71,14.6 15.5,14.6 L12.5,14.6\\\"/><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" points=\\\"7.25 11.75 9.5 9.5 11.75 11.75\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" d=\\\"M9.5,18 L9.5,9.5\\\"/></svg>\",\n        \"code\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.01\\\" points=\\\"13,4 19,10 13,16\\\"/><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.01\\\" points=\\\"7,4 1,10 7,16\\\"/></svg>\",\n        \"cog\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle fill=\\\"none\\\" stroke=\\\"#000\\\" cx=\\\"9.997\\\" cy=\\\"10\\\" r=\\\"3.31\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" d=\\\"M18.488,12.285 L16.205,16.237 C15.322,15.496 14.185,15.281 13.303,15.791 C12.428,16.289 12.047,17.373 12.246,18.5 L7.735,18.5 C7.938,17.374 7.553,16.299 6.684,15.791 C5.801,15.27 4.655,15.492 3.773,16.237 L1.5,12.285 C2.573,11.871 3.317,10.999 3.317,9.991 C3.305,8.98 2.573,8.121 1.5,7.716 L3.765,3.784 C4.645,4.516 5.794,4.738 6.687,4.232 C7.555,3.722 7.939,2.637 7.735,1.5 L12.263,1.5 C12.072,2.637 12.441,3.71 13.314,4.22 C14.206,4.73 15.343,4.516 16.225,3.794 L18.487,7.714 C17.404,8.117 16.661,8.988 16.67,10.009 C16.672,11.018 17.415,11.88 18.488,12.285 L18.488,12.285 Z\\\"/></svg>\",\n        \"comment\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M6,18.71 L6,14 L1,14 L1,1 L19,1 L19,14 L10.71,14 L6,18.71 L6,18.71 Z M2,13 L7,13 L7,16.29 L10.29,13 L18,13 L18,2 L2,2 L2,13 L2,13 Z\\\"/></svg>\",\n        \"commenting\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polygon fill=\\\"none\\\" stroke=\\\"#000\\\" points=\\\"1.5,1.5 18.5,1.5 18.5,13.5 10.5,13.5 6.5,17.5 6.5,13.5 1.5,13.5\\\"/><circle cx=\\\"10\\\" cy=\\\"8\\\" r=\\\"1\\\"/><circle cx=\\\"6\\\" cy=\\\"8\\\" r=\\\"1\\\"/><circle cx=\\\"14\\\" cy=\\\"8\\\" r=\\\"1\\\"/></svg>\",\n        \"comments\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" points=\\\"2 0.5 19.5 0.5 19.5 13\\\"/><path d=\\\"M5,19.71 L5,15 L0,15 L0,2 L18,2 L18,15 L9.71,15 L5,19.71 L5,19.71 L5,19.71 Z M1,14 L6,14 L6,17.29 L9.29,14 L17,14 L17,3 L1,3 L1,14 L1,14 L1,14 Z\\\"/></svg>\",\n        \"copy\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect fill=\\\"none\\\" stroke=\\\"#000\\\" x=\\\"3.5\\\" y=\\\"2.5\\\" width=\\\"12\\\" height=\\\"16\\\"/><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" points=\\\"5 0.5 17.5 0.5 17.5 17\\\"/></svg>\",\n        \"credit-card\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect fill=\\\"none\\\" stroke=\\\"#000\\\" x=\\\"1.5\\\" y=\\\"4.5\\\" width=\\\"17\\\" height=\\\"12\\\"/><rect x=\\\"1\\\" y=\\\"7\\\" width=\\\"18\\\" height=\\\"3\\\"/></svg>\",\n        \"crosshairs\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle fill=\\\"none\\\" stroke=\\\"#000\\\" cx=\\\"10\\\" cy=\\\"10\\\" r=\\\"7.5\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" x1=\\\"10\\\" x2=\\\"10\\\" y2=\\\"8\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" x1=\\\"10\\\" y1=\\\"12\\\" x2=\\\"10\\\" y2=\\\"20\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" y1=\\\"10\\\" x2=\\\"8\\\" y2=\\\"10\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" x1=\\\"12\\\" y1=\\\"10\\\" x2=\\\"20\\\" y2=\\\"10\\\"/></svg>\",\n        \"database\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><ellipse fill=\\\"none\\\" stroke=\\\"#000\\\" cx=\\\"10\\\" cy=\\\"4.64\\\" rx=\\\"7.5\\\" ry=\\\"3.14\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" d=\\\"M17.5,8.11 C17.5,9.85 14.14,11.25 10,11.25 C5.86,11.25 2.5,9.84 2.5,8.11\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" d=\\\"M17.5,11.25 C17.5,12.99 14.14,14.39 10,14.39 C5.86,14.39 2.5,12.98 2.5,11.25\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" d=\\\"M17.49,4.64 L17.5,14.36 C17.5,16.1 14.14,17.5 10,17.5 C5.86,17.5 2.5,16.09 2.5,14.36 L2.5,4.64\\\"/></svg>\",\n        \"desktop\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect x=\\\"8\\\" y=\\\"15\\\" width=\\\"1\\\" height=\\\"2\\\"/><rect x=\\\"11\\\" y=\\\"15\\\" width=\\\"1\\\" height=\\\"2\\\"/><rect x=\\\"5\\\" y=\\\"16\\\" width=\\\"10\\\" height=\\\"1\\\"/><rect fill=\\\"none\\\" stroke=\\\"#000\\\" x=\\\"1.5\\\" y=\\\"3.5\\\" width=\\\"17\\\" height=\\\"11\\\"/></svg>\",\n        \"discord\": \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\"><path d=\\\"M16.074,4.361a14.243,14.243,0,0,0-3.61-1.134,10.61,10.61,0,0,0-.463.96,13.219,13.219,0,0,0-4,0,10.138,10.138,0,0,0-.468-.96A14.206,14.206,0,0,0,3.919,4.364,15.146,15.146,0,0,0,1.324,14.5a14.435,14.435,0,0,0,4.428,2.269A10.982,10.982,0,0,0,6.7,15.21a9.294,9.294,0,0,1-1.494-.727c.125-.093.248-.19.366-.289a10.212,10.212,0,0,0,8.854,0c.119.1.242.2.366.289a9.274,9.274,0,0,1-1.5.728,10.8,10.8,0,0,0,.948,1.562,14.419,14.419,0,0,0,4.431-2.27A15.128,15.128,0,0,0,16.074,4.361Zm-8.981,8.1a1.7,1.7,0,0,1-1.573-1.79A1.689,1.689,0,0,1,7.093,8.881a1.679,1.679,0,0,1,1.573,1.791A1.687,1.687,0,0,1,7.093,12.462Zm5.814,0a1.7,1.7,0,0,1-1.573-1.79,1.689,1.689,0,0,1,1.573-1.791,1.679,1.679,0,0,1,1.573,1.791A1.688,1.688,0,0,1,12.907,12.462Z\\\"/></svg>\",\n        \"download\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" points=\\\"14,10 9.5,14.5 5,10\\\"/><rect x=\\\"3\\\" y=\\\"17\\\" width=\\\"13\\\" height=\\\"1\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" x1=\\\"9.5\\\" y1=\\\"13.91\\\" x2=\\\"9.5\\\" y2=\\\"3\\\"/></svg>\",\n        \"dribbble\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.4\\\" d=\\\"M1.3,8.9c0,0,5,0.1,8.6-1c1.4-0.4,2.6-0.9,4-1.9 c1.4-1.1,2.5-2.5,2.5-2.5\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.4\\\" d=\\\"M3.9,16.6c0,0,1.7-2.8,3.5-4.2 c1.8-1.3,4-2,5.7-2.2C16,10,19,10.6,19,10.6\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.4\\\" d=\\\"M6.9,1.6c0,0,3.3,4.6,4.2,6.8 c0.4,0.9,1.3,3.1,1.9,5.2c0.6,2,0.9,4.4,0.9,4.4\\\"/><circle fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.4\\\" cx=\\\"10\\\" cy=\\\"10\\\" r=\\\"9\\\"/></svg>\",\n        \"etsy\": \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\"><path d=\\\"M8,4.26C8,4.07,8,4,8.31,4h4.46c.79,0,1.22.67,1.53,1.91l.25,1h.76c.14-2.82.26-4,.26-4S13.65,3,12.52,3H6.81L3.75,2.92v.84l1,.2c.73.11.9.27,1,1,0,0,.06,2,.06,5.17s-.06,5.14-.06,5.14c0,.59-.23.81-1,.94l-1,.2v.84l3.06-.1h5.11c1.15,0,3.82.1,3.82.1,0-.7.45-3.88.51-4.22h-.73l-.76,1.69a2.25,2.25,0,0,1-2.45,1.47H9.4c-1,0-1.44-.4-1.44-1.24V10.44s2.16,0,2.86.06c.55,0,.85.19,1.06,1l.23,1H13L12.9,9.94,13,7.41h-.85l-.28,1.13c-.16.74-.28.84-1,1-1,.1-2.89.09-2.89.09Z\\\"/></svg>\",\n        \"expand\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polygon points=\\\"13 2 18 2 18 7 17 7 17 3 13 3\\\"/><polygon points=\\\"2 13 3 13 3 17 7 17 7 18 2 18\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" d=\\\"M11,9 L17,3\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" d=\\\"M3,17 L9,11\\\"/></svg>\",\n        \"eye-slash\": \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\"><path fill=\\\"none\\\" stroke=\\\"#000\\\" d=\\\"m7.56,7.56c.62-.62,1.49-1.01,2.44-1.01,1.91,0,3.45,1.54,3.45,3.45,0,.95-.39,1.82-1.01,2.44\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" d=\\\"m19.5,10c-2.4,3.66-5.26,7-9.5,7h0,0,0c-4.24,0-7.1-3.34-9.49-7C2.89,6.34,5.75,3,9.99,3h0,0,0c4.25,0,7.11,3.34,9.5,7Z\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" x1=\\\"2.5\\\" y1=\\\"2.5\\\" x2=\\\"17.5\\\" y2=\\\"17.5\\\"/></svg>\",\n        \"eye\": \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\"><circle fill=\\\"none\\\" stroke=\\\"#000\\\" cx=\\\"10\\\" cy=\\\"10\\\" r=\\\"3.45\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" d=\\\"m19.5,10c-2.4,3.66-5.26,7-9.5,7h0,0,0c-4.24,0-7.1-3.34-9.49-7C2.89,6.34,5.75,3,9.99,3h0,0,0c4.25,0,7.11,3.34,9.5,7Z\\\"/></svg>\",\n        \"facebook\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M11,10h2.6l0.4-3H11V5.3c0-0.9,0.2-1.5,1.5-1.5H14V1.1c-0.3,0-1-0.1-2.1-0.1C9.6,1,8,2.4,8,5v2H5.5v3H8v8h3V10z\\\"/></svg>\",\n        \"file-edit\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path fill=\\\"none\\\" stroke=\\\"#000\\\" d=\\\"M18.65,1.68 C18.41,1.45 18.109,1.33 17.81,1.33 C17.499,1.33 17.209,1.45 16.98,1.68 L8.92,9.76 L8,12.33 L10.55,11.41 L18.651,3.34 C19.12,2.87 19.12,2.15 18.65,1.68 L18.65,1.68 L18.65,1.68 Z\\\"/><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" points=\\\"16.5 8.482 16.5 18.5 3.5 18.5 3.5 1.5 14.211 1.5\\\"/></svg>\",\n        \"file-pdf\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect fill=\\\"none\\\" stroke=\\\"#000\\\" width=\\\"13\\\" height=\\\"17\\\" x=\\\"3.5\\\" y=\\\"1.5\\\"/><path d=\\\"M14.65 11.67c-.48.3-1.37-.19-1.79-.37a4.65 4.65 0 0 1 1.49.06c.35.1.36.28.3.31zm-6.3.06l.43-.79a14.7 14.7 0 0 0 .75-1.64 5.48 5.48 0 0 0 1.25 1.55l.2.15a16.36 16.36 0 0 0-2.63.73zM9.5 5.32c.2 0 .32.5.32.97a1.99 1.99 0 0 1-.23 1.04 5.05 5.05 0 0 1-.17-1.3s0-.71.08-.71zm-3.9 9a4.35 4.35 0 0 1 1.21-1.46l.24-.22a4.35 4.35 0 0 1-1.46 1.68zm9.23-3.3a2.05 2.05 0 0 0-1.32-.3 11.07 11.07 0 0 0-1.58.11 4.09 4.09 0 0 1-.74-.5 5.39 5.39 0 0 1-1.32-2.06 10.37 10.37 0 0 0 .28-2.62 1.83 1.83 0 0 0-.07-.25.57.57 0 0 0-.52-.4H9.4a.59.59 0 0 0-.6.38 6.95 6.95 0 0 0 .37 3.14c-.26.63-1 2.12-1 2.12-.3.58-.57 1.08-.82 1.5l-.8.44A3.11 3.11 0 0 0 5 14.16a.39.39 0 0 0 .15.42l.24.13c1.15.56 2.28-1.74 2.66-2.42a23.1 23.1 0 0 1 3.59-.85 4.56 4.56 0 0 0 2.91.8.5.5 0 0 0 .3-.21 1.1 1.1 0 0 0 .12-.75.84.84 0 0 0-.14-.25z\\\"/></svg>\",\n        \"file-text\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect fill=\\\"none\\\" stroke=\\\"#000\\\" width=\\\"13\\\" height=\\\"17\\\" x=\\\"3.5\\\" y=\\\"1.5\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" x1=\\\"6\\\" x2=\\\"12\\\" y1=\\\"12.5\\\" y2=\\\"12.5\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" x1=\\\"6\\\" x2=\\\"14\\\" y1=\\\"8.5\\\" y2=\\\"8.5\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" x1=\\\"6\\\" x2=\\\"14\\\" y1=\\\"6.5\\\" y2=\\\"6.5\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" x1=\\\"6\\\" x2=\\\"14\\\" y1=\\\"10.5\\\" y2=\\\"10.5\\\"/></svg>\",\n        \"file\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect fill=\\\"none\\\" stroke=\\\"#000\\\" x=\\\"3.5\\\" y=\\\"1.5\\\" width=\\\"13\\\" height=\\\"17\\\"/></svg>\",\n        \"flickr\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle cx=\\\"5.5\\\" cy=\\\"9.5\\\" r=\\\"3.5\\\"/><circle cx=\\\"14.5\\\" cy=\\\"9.5\\\" r=\\\"3.5\\\"/></svg>\",\n        \"folder\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polygon fill=\\\"none\\\" stroke=\\\"#000\\\" points=\\\"9.5 5.5 8.5 3.5 1.5 3.5 1.5 16.5 18.5 16.5 18.5 5.5\\\"/></svg>\",\n        \"forward\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2.47,13.11 C4.02,10.02 6.27,7.85 9.04,6.61 C9.48,6.41 10.27,6.13 11,5.91 L11,2 L18.89,9 L11,16 L11,12.13 C9.25,12.47 7.58,13.19 6.02,14.25 C3.03,16.28 1.63,18.54 1.63,18.54 C1.63,18.54 1.38,15.28 2.47,13.11 L2.47,13.11 Z M5.3,13.53 C6.92,12.4 9.04,11.4 12,10.92 L12,13.63 L17.36,9 L12,4.25 L12,6.8 C11.71,6.86 10.86,7.02 9.67,7.49 C6.79,8.65 4.58,10.96 3.49,13.08 C3.18,13.7 2.68,14.87 2.49,16 C3.28,15.05 4.4,14.15 5.3,13.53 L5.3,13.53 Z\\\"/></svg>\",\n        \"foursquare\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M15.23,2 C15.96,2 16.4,2.41 16.5,2.86 C16.57,3.15 16.56,3.44 16.51,3.73 C16.46,4.04 14.86,11.72 14.75,12.03 C14.56,12.56 14.16,12.82 13.61,12.83 C13.03,12.84 11.09,12.51 10.69,13 C10.38,13.38 7.79,16.39 6.81,17.53 C6.61,17.76 6.4,17.96 6.08,17.99 C5.68,18.04 5.29,17.87 5.17,17.45 C5.12,17.28 5.1,17.09 5.1,16.91 C5.1,12.4 4.86,7.81 5.11,3.31 C5.17,2.5 5.81,2.12 6.53,2 L15.23,2 L15.23,2 Z M9.76,11.42 C9.94,11.19 10.17,11.1 10.45,11.1 L12.86,11.1 C13.12,11.1 13.31,10.94 13.36,10.69 C13.37,10.64 13.62,9.41 13.74,8.83 C13.81,8.52 13.53,8.28 13.27,8.28 C12.35,8.29 11.42,8.28 10.5,8.28 C9.84,8.28 9.83,7.69 9.82,7.21 C9.8,6.85 10.13,6.55 10.5,6.55 C11.59,6.56 12.67,6.55 13.76,6.55 C14.03,6.55 14.23,6.4 14.28,6.14 C14.34,5.87 14.67,4.29 14.67,4.29 C14.67,4.29 14.82,3.74 14.19,3.74 L7.34,3.74 C7,3.75 6.84,4.02 6.84,4.33 C6.84,7.58 6.85,14.95 6.85,14.99 C6.87,15 8.89,12.51 9.76,11.42 L9.76,11.42 Z\\\"/></svg>\",\n        \"future\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline points=\\\"19 2 18 2 18 6 14 6 14 7 19 7 19 2\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" d=\\\"M18,6.548 C16.709,3.29 13.354,1 9.6,1 C4.6,1 0.6,5 0.6,10 C0.6,15 4.6,19 9.6,19 C14.6,19 18.6,15 18.6,10\\\"/><rect x=\\\"9\\\" y=\\\"4\\\" width=\\\"1\\\" height=\\\"7\\\"/><path d=\\\"M13.018,14.197 L9.445,10.625\\\" fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\"/></svg>\",\n        \"git-branch\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.2\\\" cx=\\\"7\\\" cy=\\\"3\\\" r=\\\"2\\\"/><circle fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.2\\\" cx=\\\"14\\\" cy=\\\"6\\\" r=\\\"2\\\"/><circle fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.2\\\" cx=\\\"7\\\" cy=\\\"17\\\" r=\\\"2\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"2\\\" d=\\\"M14,8 C14,10.41 12.43,10.87 10.56,11.25 C9.09,11.54 7,12.06 7,15 L7,5\\\"/></svg>\",\n        \"git-fork\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.2\\\" cx=\\\"5.79\\\" cy=\\\"2.79\\\" r=\\\"1.79\\\"/><circle fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.2\\\" cx=\\\"14.19\\\" cy=\\\"2.79\\\" r=\\\"1.79\\\"/><circle fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.2\\\" cx=\\\"10.03\\\" cy=\\\"16.79\\\" r=\\\"1.79\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"2\\\" d=\\\"M5.79,4.57 L5.79,6.56 C5.79,9.19 10.03,10.22 10.03,13.31 C10.03,14.86 10.04,14.55 10.04,14.55 C10.04,14.37 10.04,14.86 10.04,13.31 C10.04,10.22 14.2,9.19 14.2,6.56 L14.2,4.57\\\"/></svg>\",\n        \"github-alt\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M10,0.5 C4.75,0.5 0.5,4.76 0.5,10.01 C0.5,15.26 4.75,19.51 10,19.51 C15.24,19.51 19.5,15.26 19.5,10.01 C19.5,4.76 15.25,0.5 10,0.5 L10,0.5 Z M12.81,17.69 C12.81,17.69 12.81,17.7 12.79,17.69 C12.47,17.75 12.35,17.59 12.35,17.36 L12.35,16.17 C12.35,15.45 12.09,14.92 11.58,14.56 C12.2,14.51 12.77,14.39 13.26,14.21 C13.87,13.98 14.36,13.69 14.74,13.29 C15.42,12.59 15.76,11.55 15.76,10.17 C15.76,9.25 15.45,8.46 14.83,7.8 C15.1,7.08 15.07,6.29 14.75,5.44 L14.51,5.42 C14.34,5.4 14.06,5.46 13.67,5.61 C13.25,5.78 12.79,6.03 12.31,6.35 C11.55,6.16 10.81,6.05 10.09,6.05 C9.36,6.05 8.61,6.15 7.88,6.35 C7.28,5.96 6.75,5.68 6.26,5.54 C6.07,5.47 5.9,5.44 5.78,5.44 L5.42,5.44 C5.06,6.29 5.04,7.08 5.32,7.8 C4.7,8.46 4.4,9.25 4.4,10.17 C4.4,11.94 4.96,13.16 6.08,13.84 C6.53,14.13 7.05,14.32 7.69,14.43 C8.03,14.5 8.32,14.54 8.55,14.55 C8.07,14.89 7.82,15.42 7.82,16.16 L7.82,17.51 C7.8,17.69 7.7,17.8 7.51,17.8 C4.21,16.74 1.82,13.65 1.82,10.01 C1.82,5.5 5.49,1.83 10,1.83 C14.5,1.83 18.17,5.5 18.17,10.01 C18.18,13.53 15.94,16.54 12.81,17.69 L12.81,17.69 Z\\\"/></svg>\",\n        \"github\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M10,1 C5.03,1 1,5.03 1,10 C1,13.98 3.58,17.35 7.16,18.54 C7.61,18.62 7.77,18.34 7.77,18.11 C7.77,17.9 7.76,17.33 7.76,16.58 C5.26,17.12 4.73,15.37 4.73,15.37 C4.32,14.33 3.73,14.05 3.73,14.05 C2.91,13.5 3.79,13.5 3.79,13.5 C4.69,13.56 5.17,14.43 5.17,14.43 C5.97,15.8 7.28,15.41 7.79,15.18 C7.87,14.6 8.1,14.2 8.36,13.98 C6.36,13.75 4.26,12.98 4.26,9.53 C4.26,8.55 4.61,7.74 5.19,7.11 C5.1,6.88 4.79,5.97 5.28,4.73 C5.28,4.73 6.04,4.49 7.75,5.65 C8.47,5.45 9.24,5.35 10,5.35 C10.76,5.35 11.53,5.45 12.25,5.65 C13.97,4.48 14.72,4.73 14.72,4.73 C15.21,5.97 14.9,6.88 14.81,7.11 C15.39,7.74 15.73,8.54 15.73,9.53 C15.73,12.99 13.63,13.75 11.62,13.97 C11.94,14.25 12.23,14.8 12.23,15.64 C12.23,16.84 12.22,17.81 12.22,18.11 C12.22,18.35 12.38,18.63 12.84,18.54 C16.42,17.35 19,13.98 19,10 C19,5.03 14.97,1 10,1 L10,1 Z\\\"/></svg>\",\n        \"gitter\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect x=\\\"3.5\\\" y=\\\"1\\\" width=\\\"1.531\\\" height=\\\"11.471\\\"/><rect x=\\\"7.324\\\" y=\\\"4.059\\\" width=\\\"1.529\\\" height=\\\"15.294\\\"/><rect x=\\\"11.148\\\" y=\\\"4.059\\\" width=\\\"1.527\\\" height=\\\"15.294\\\"/><rect x=\\\"14.971\\\" y=\\\"4.059\\\" width=\\\"1.529\\\" height=\\\"8.412\\\"/></svg>\",\n        \"google\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M17.86,9.09 C18.46,12.12 17.14,16.05 13.81,17.56 C9.45,19.53 4.13,17.68 2.47,12.87 C0.68,7.68 4.22,2.42 9.5,2.03 C11.57,1.88 13.42,2.37 15.05,3.65 C15.22,3.78 15.37,3.93 15.61,4.14 C14.9,4.81 14.23,5.45 13.5,6.14 C12.27,5.08 10.84,4.72 9.28,4.98 C8.12,5.17 7.16,5.76 6.37,6.63 C4.88,8.27 4.62,10.86 5.76,12.82 C6.95,14.87 9.17,15.8 11.57,15.25 C13.27,14.87 14.76,13.33 14.89,11.75 L10.51,11.75 L10.51,9.09 L17.86,9.09 L17.86,9.09 Z\\\"/></svg>\",\n        \"grid\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect x=\\\"2\\\" y=\\\"2\\\" width=\\\"3\\\" height=\\\"3\\\"/><rect x=\\\"8\\\" y=\\\"2\\\" width=\\\"3\\\" height=\\\"3\\\"/><rect x=\\\"14\\\" y=\\\"2\\\" width=\\\"3\\\" height=\\\"3\\\"/><rect x=\\\"2\\\" y=\\\"8\\\" width=\\\"3\\\" height=\\\"3\\\"/><rect x=\\\"8\\\" y=\\\"8\\\" width=\\\"3\\\" height=\\\"3\\\"/><rect x=\\\"14\\\" y=\\\"8\\\" width=\\\"3\\\" height=\\\"3\\\"/><rect x=\\\"2\\\" y=\\\"14\\\" width=\\\"3\\\" height=\\\"3\\\"/><rect x=\\\"8\\\" y=\\\"14\\\" width=\\\"3\\\" height=\\\"3\\\"/><rect x=\\\"14\\\" y=\\\"14\\\" width=\\\"3\\\" height=\\\"3\\\"/></svg>\",\n        \"happy\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle cx=\\\"13\\\" cy=\\\"7\\\" r=\\\"1\\\"/><circle cx=\\\"7\\\" cy=\\\"7\\\" r=\\\"1\\\"/><circle fill=\\\"none\\\" stroke=\\\"#000\\\" cx=\\\"10\\\" cy=\\\"10\\\" r=\\\"8.5\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" d=\\\"M14.6,11.4 C13.9,13.3 12.1,14.5 10,14.5 C7.9,14.5 6.1,13.3 5.4,11.4\\\"/></svg>\",\n        \"hashtag\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M15.431,8 L15.661,7 L12.911,7 L13.831,3 L12.901,3 L11.98,7 L9.29,7 L10.21,3 L9.281,3 L8.361,7 L5.23,7 L5,8 L8.13,8 L7.21,12 L4.23,12 L4,13 L6.98,13 L6.061,17 L6.991,17 L7.911,13 L10.601,13 L9.681,17 L10.611,17 L11.531,13 L14.431,13 L14.661,12 L11.76,12 L12.681,8 L15.431,8 Z M10.831,12 L8.141,12 L9.061,8 L11.75,8 L10.831,12 Z\\\"/></svg>\",\n        \"heart\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.03\\\" d=\\\"M10,4 C10,4 8.1,2 5.74,2 C3.38,2 1,3.55 1,6.73 C1,8.84 2.67,10.44 2.67,10.44 L10,18 L17.33,10.44 C17.33,10.44 19,8.84 19,6.73 C19,3.55 16.62,2 14.26,2 C11.9,2 10,4 10,4 L10,4 Z\\\"/></svg>\",\n        \"history\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"#000\\\" points=\\\"1 2 2 2 2 6 6 6 6 7 1 7 1 2\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" d=\\\"M2.1,6.548 C3.391,3.29 6.746,1 10.5,1 C15.5,1 19.5,5 19.5,10 C19.5,15 15.5,19 10.5,19 C5.5,19 1.5,15 1.5,10\\\"/><rect x=\\\"9\\\" y=\\\"4\\\" width=\\\"1\\\" height=\\\"7\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" d=\\\"M13.018,14.197 L9.445,10.625\\\"/></svg>\",\n        \"home\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polygon points=\\\"18.65 11.35 10 2.71 1.35 11.35 0.65 10.65 10 1.29 19.35 10.65\\\"/><polygon points=\\\"15 4 18 4 18 7 17 7 17 5 15 5\\\"/><polygon points=\\\"3 11 4 11 4 18 7 18 7 12 12 12 12 18 16 18 16 11 17 11 17 19 11 19 11 13 8 13 8 19 3 19\\\"/></svg>\",\n        \"image\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle cx=\\\"16.1\\\" cy=\\\"6.1\\\" r=\\\"1.1\\\"/><rect fill=\\\"none\\\" stroke=\\\"#000\\\" x=\\\".5\\\" y=\\\"2.5\\\" width=\\\"19\\\" height=\\\"15\\\"/><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.01\\\" points=\\\"4,13 8,9 13,14\\\"/><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.01\\\" points=\\\"11,12 12.5,10.5 16,14\\\"/></svg>\",\n        \"info\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M12.13,11.59 C11.97,12.84 10.35,14.12 9.1,14.16 C6.17,14.2 9.89,9.46 8.74,8.37 C9.3,8.16 10.62,7.83 10.62,8.81 C10.62,9.63 10.12,10.55 9.88,11.32 C8.66,15.16 12.13,11.15 12.14,11.18 C12.16,11.21 12.16,11.35 12.13,11.59 C12.08,11.95 12.16,11.35 12.13,11.59 L12.13,11.59 Z M11.56,5.67 C11.56,6.67 9.36,7.15 9.36,6.03 C9.36,5 11.56,4.54 11.56,5.67 L11.56,5.67 Z\\\"/><circle fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" cx=\\\"10\\\" cy=\\\"10\\\" r=\\\"9\\\"/></svg>\",\n        \"instagram\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M13.55,1H6.46C3.45,1,1,3.44,1,6.44v7.12c0,3,2.45,5.44,5.46,5.44h7.08c3.02,0,5.46-2.44,5.46-5.44V6.44 C19.01,3.44,16.56,1,13.55,1z M17.5,14c0,1.93-1.57,3.5-3.5,3.5H6c-1.93,0-3.5-1.57-3.5-3.5V6c0-1.93,1.57-3.5,3.5-3.5h8 c1.93,0,3.5,1.57,3.5,3.5V14z\\\"/><circle cx=\\\"14.87\\\" cy=\\\"5.26\\\" r=\\\"1.09\\\"/><path d=\\\"M10.03,5.45c-2.55,0-4.63,2.06-4.63,4.6c0,2.55,2.07,4.61,4.63,4.61c2.56,0,4.63-2.061,4.63-4.61 C14.65,7.51,12.58,5.45,10.03,5.45L10.03,5.45L10.03,5.45z M10.08,13c-1.66,0-3-1.34-3-2.99c0-1.65,1.34-2.99,3-2.99s3,1.34,3,2.99 C13.08,11.66,11.74,13,10.08,13L10.08,13L10.08,13z\\\"/></svg>\",\n        \"italic\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M12.63,5.48 L10.15,14.52 C10,15.08 10.37,15.25 11.92,15.3 L11.72,16 L6,16 L6.2,15.31 C7.78,15.26 8.19,15.09 8.34,14.53 L10.82,5.49 C10.97,4.92 10.63,4.76 9.09,4.71 L9.28,4 L15,4 L14.81,4.69 C13.23,4.75 12.78,4.91 12.63,5.48 L12.63,5.48 Z\\\"/></svg>\",\n        \"joomla\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M7.8,13.4l1.7-1.7L5.9,8c-0.6-0.5-0.6-1.5,0-2c0.6-0.6,1.4-0.6,2,0l1.7-1.7c-1-1-2.3-1.3-3.6-1C5.8,2.2,4.8,1.4,3.7,1.4 c-1.3,0-2.3,1-2.3,2.3c0,1.1,0.8,2,1.8,2.3c-0.4,1.3-0.1,2.8,1,3.8L7.8,13.4L7.8,13.4z\\\"/><path d=\\\"M10.2,4.3c1-1,2.5-1.4,3.8-1c0.2-1.1,1.1-2,2.3-2c1.3,0,2.3,1,2.3,2.3c0,1.2-0.9,2.2-2,2.3c0.4,1.3,0,2.8-1,3.8L13.9,8 c0.6-0.5,0.6-1.5,0-2c-0.5-0.6-1.5-0.6-2,0L8.2,9.7L6.5,8\\\"/><path d=\\\"M14.1,16.8c-1.3,0.4-2.8,0.1-3.8-1l1.7-1.7c0.6,0.6,1.5,0.6,2,0c0.5-0.6,0.6-1.5,0-2l-3.7-3.7L12,6.7l3.7,3.7 c1,1,1.3,2.4,1,3.6c1.1,0.2,2,1.1,2,2.3c0,1.3-1,2.3-2.3,2.3C15.2,18.6,14.3,17.8,14.1,16.8\\\"/><path d=\\\"M13.2,12.2l-3.7,3.7c-1,1-2.4,1.3-3.6,1c-0.2,1-1.2,1.8-2.2,1.8c-1.3,0-2.3-1-2.3-2.3c0-1.1,0.8-2,1.8-2.3 c-0.3-1.3,0-2.7,1-3.7l1.7,1.7c-0.6,0.6-0.6,1.5,0,2c0.6,0.6,1.4,0.6,2,0l3.7-3.7\\\"/></svg>\",\n        \"laptop\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect y=\\\"16\\\" width=\\\"20\\\" height=\\\"1\\\"/><rect fill=\\\"none\\\" stroke=\\\"#000\\\" x=\\\"2.5\\\" y=\\\"4.5\\\" width=\\\"15\\\" height=\\\"10\\\"/></svg>\",\n        \"lifesaver\": \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\"><circle fill=\\\"none\\\" stroke=\\\"#000\\\" cx=\\\"10\\\" cy=\\\"10\\\" r=\\\"9\\\"/><circle fill=\\\"none\\\" stroke=\\\"#000\\\" cx=\\\"10\\\" cy=\\\"10\\\" r=\\\"5\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" x1=\\\"5.17\\\" y1=\\\"2.39\\\" x2=\\\"8.11\\\" y2=\\\"5.33\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" x1=\\\"5.33\\\" y1=\\\"8.11\\\" x2=\\\"2.39\\\" y2=\\\"5.17\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" x1=\\\"14.83\\\" y1=\\\"17.61\\\" x2=\\\"11.89\\\" y2=\\\"14.67\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" x1=\\\"14.67\\\" y1=\\\"11.89\\\" x2=\\\"17.61\\\" y2=\\\"14.83\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" x1=\\\"17.61\\\" y1=\\\"5.17\\\" x2=\\\"14.67\\\" y2=\\\"8.11\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" x1=\\\"11.89\\\" y1=\\\"5.33\\\" x2=\\\"14.83\\\" y2=\\\"2.39\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" x1=\\\"8.11\\\" y1=\\\"14.67\\\" x2=\\\"5.17\\\" y2=\\\"17.61\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" x1=\\\"2.39\\\" y1=\\\"14.83\\\" x2=\\\"5.33\\\" y2=\\\"11.89\\\"/></svg>\",\n        \"link\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" d=\\\"M10.625,12.375 L7.525,15.475 C6.825,16.175 5.925,16.175 5.225,15.475 L4.525,14.775 C3.825,14.074 3.825,13.175 4.525,12.475 L7.625,9.375\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" d=\\\"M9.325,7.375 L12.425,4.275 C13.125,3.575 14.025,3.575 14.724,4.275 L15.425,4.975 C16.125,5.675 16.125,6.575 15.425,7.275 L12.325,10.375\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" d=\\\"M7.925,11.875 L11.925,7.975\\\"/></svg>\",\n        \"linkedin\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M5.77,17.89 L5.77,7.17 L2.21,7.17 L2.21,17.89 L5.77,17.89 L5.77,17.89 Z M3.99,5.71 C5.23,5.71 6.01,4.89 6.01,3.86 C5.99,2.8 5.24,2 4.02,2 C2.8,2 2,2.8 2,3.85 C2,4.88 2.77,5.7 3.97,5.7 L3.99,5.7 L3.99,5.71 L3.99,5.71 Z\\\"/><path d=\\\"M7.75,17.89 L11.31,17.89 L11.31,11.9 C11.31,11.58 11.33,11.26 11.43,11.03 C11.69,10.39 12.27,9.73 13.26,9.73 C14.55,9.73 15.06,10.71 15.06,12.15 L15.06,17.89 L18.62,17.89 L18.62,11.74 C18.62,8.45 16.86,6.92 14.52,6.92 C12.6,6.92 11.75,7.99 11.28,8.73 L11.3,8.73 L11.3,7.17 L7.75,7.17 C7.79,8.17 7.75,17.89 7.75,17.89 L7.75,17.89 L7.75,17.89 Z\\\"/></svg>\",\n        \"list\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect x=\\\"6\\\" y=\\\"4\\\" width=\\\"12\\\" height=\\\"1\\\"/><rect x=\\\"6\\\" y=\\\"9\\\" width=\\\"12\\\" height=\\\"1\\\"/><rect x=\\\"6\\\" y=\\\"14\\\" width=\\\"12\\\" height=\\\"1\\\"/><rect x=\\\"2\\\" y=\\\"4\\\" width=\\\"2\\\" height=\\\"1\\\"/><rect x=\\\"2\\\" y=\\\"9\\\" width=\\\"2\\\" height=\\\"1\\\"/><rect x=\\\"2\\\" y=\\\"14\\\" width=\\\"2\\\" height=\\\"1\\\"/></svg>\",\n        \"location\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.01\\\" d=\\\"M10,0.5 C6.41,0.5 3.5,3.39 3.5,6.98 C3.5,11.83 10,19 10,19 C10,19 16.5,11.83 16.5,6.98 C16.5,3.39 13.59,0.5 10,0.5 L10,0.5 Z\\\"/><circle fill=\\\"none\\\" stroke=\\\"#000\\\" cx=\\\"10\\\" cy=\\\"6.8\\\" r=\\\"2.3\\\"/></svg>\",\n        \"lock\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect fill=\\\"none\\\" stroke=\\\"#000\\\" height=\\\"10\\\" width=\\\"13\\\" y=\\\"8.5\\\" x=\\\"3.5\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" d=\\\"M6.5,8 L6.5,4.88 C6.5,3.01 8.07,1.5 10,1.5 C11.93,1.5 13.5,3.01 13.5,4.88 L13.5,8\\\"/></svg>\",\n        \"mail\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" points=\\\"1.4,6.5 10,11 18.6,6.5\\\"/><path d=\\\"M 1,4 1,16 19,16 19,4 1,4 Z M 18,15 2,15 2,5 18,5 18,15 Z\\\"/></svg>\",\n        \"menu\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect x=\\\"2\\\" y=\\\"4\\\" width=\\\"16\\\" height=\\\"1\\\"/><rect x=\\\"2\\\" y=\\\"9\\\" width=\\\"16\\\" height=\\\"1\\\"/><rect x=\\\"2\\\" y=\\\"14\\\" width=\\\"16\\\" height=\\\"1\\\"/></svg>\",\n        \"microphone\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><line fill=\\\"none\\\" stroke=\\\"#000\\\" x1=\\\"10\\\" x2=\\\"10\\\" y1=\\\"16.44\\\" y2=\\\"18.5\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" x1=\\\"7\\\" x2=\\\"13\\\" y1=\\\"18.5\\\" y2=\\\"18.5\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" d=\\\"M13.5 4.89v5.87a3.5 3.5 0 0 1-7 0V4.89a3.5 3.5 0 0 1 7 0z\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" d=\\\"M15.5 10.36V11a5.5 5.5 0 0 1-11 0v-.6\\\"/></svg>\",\n        \"minus-circle\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" cx=\\\"9.5\\\" cy=\\\"9.5\\\" r=\\\"9\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" x1=\\\"5\\\" y1=\\\"9.5\\\" x2=\\\"14\\\" y2=\\\"9.5\\\"/></svg>\",\n        \"minus\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect height=\\\"1\\\" width=\\\"18\\\" y=\\\"9\\\" x=\\\"1\\\"/></svg>\",\n        \"more-vertical\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle cx=\\\"10\\\" cy=\\\"3\\\" r=\\\"2\\\"/><circle cx=\\\"10\\\" cy=\\\"10\\\" r=\\\"2\\\"/><circle cx=\\\"10\\\" cy=\\\"17\\\" r=\\\"2\\\"/></svg>\",\n        \"more\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle cx=\\\"3\\\" cy=\\\"10\\\" r=\\\"2\\\"/><circle cx=\\\"10\\\" cy=\\\"10\\\" r=\\\"2\\\"/><circle cx=\\\"17\\\" cy=\\\"10\\\" r=\\\"2\\\"/></svg>\",\n        \"move\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polygon points=\\\"4,5 1,5 1,9 2,9 2,6 4,6\\\"/><polygon points=\\\"1,16 2,16 2,18 4,18 4,19 1,19\\\"/><polygon points=\\\"14,16 14,19 11,19 11,18 13,18 13,16\\\"/><rect fill=\\\"none\\\" stroke=\\\"#000\\\" x=\\\"5.5\\\" y=\\\"1.5\\\" width=\\\"13\\\" height=\\\"13\\\"/><rect x=\\\"1\\\" y=\\\"11\\\" width=\\\"1\\\" height=\\\"3\\\"/><rect x=\\\"6\\\" y=\\\"18\\\" width=\\\"3\\\" height=\\\"1\\\"/></svg>\",\n        \"nut\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polygon fill=\\\"none\\\" stroke=\\\"#000\\\" points=\\\"2.5,5.7 10,1.3 17.5,5.7 17.5,14.3 10,18.7 2.5,14.3\\\"/><circle fill=\\\"none\\\" stroke=\\\"#000\\\" cx=\\\"10\\\" cy=\\\"10\\\" r=\\\"3.5\\\"/></svg>\",\n        \"pagekit\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polygon points=\\\"3,1 17,1 17,16 10,16 10,13 14,13 14,4 6,4 6,16 10,16 10,19 3,19\\\"/></svg>\",\n        \"paint-bucket\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" d=\\\"m6.42,2.16l5.28,5.28\\\"/><path d=\\\"m18.49,11.83s1.51,2.06,1.51,3.36c0,.92-.76,1.64-1.51,1.64h0c-.75,0-1.49-.72-1.49-1.64,0-1.3,1.49-3.36,1.49-3.36h0Z\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" x1=\\\"1.26\\\" y1=\\\"10.5\\\" x2=\\\"16\\\" y2=\\\"10.5\\\"/><polygon fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" points=\\\"10.2 1.55 17.6 8.93 8.08 18.45 .7 11.07 10.2 1.55\\\"/></svg>\",\n        \"pencil\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path fill=\\\"none\\\" stroke=\\\"#000\\\" d=\\\"M17.25,6.01 L7.12,16.1 L3.82,17.2 L5.02,13.9 L15.12,3.88 C15.71,3.29 16.66,3.29 17.25,3.88 C17.83,4.47 17.83,5.42 17.25,6.01 L17.25,6.01 Z\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" d=\\\"M15.98,7.268 L13.851,5.148\\\"/></svg>\",\n        \"phone-landscape\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path fill=\\\"none\\\" stroke=\\\"#000\\\" d=\\\"M17,5.5 C17.8,5.5 18.5,6.2 18.5,7 L18.5,14 C18.5,14.8 17.8,15.5 17,15.5 L3,15.5 C2.2,15.5 1.5,14.8 1.5,14 L1.5,7 C1.5,6.2 2.2,5.5 3,5.5 L17,5.5 L17,5.5 L17,5.5 Z\\\"/><circle cx=\\\"3.8\\\" cy=\\\"10.5\\\" r=\\\".8\\\"/></svg>\",\n        \"phone\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path fill=\\\"none\\\" stroke=\\\"#000\\\" d=\\\"M15.5,17 C15.5,17.8 14.8,18.5 14,18.5 L7,18.5 C6.2,18.5 5.5,17.8 5.5,17 L5.5,3 C5.5,2.2 6.2,1.5 7,1.5 L14,1.5 C14.8,1.5 15.5,2.2 15.5,3 L15.5,17 L15.5,17 L15.5,17 Z\\\"/><circle cx=\\\"10.5\\\" cy=\\\"16.5\\\" r=\\\".8\\\"/></svg>\",\n        \"pinterest\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M10.21,1 C5.5,1 3,4.16 3,7.61 C3,9.21 3.85,11.2 5.22,11.84 C5.43,11.94 5.54,11.89 5.58,11.69 C5.62,11.54 5.8,10.8 5.88,10.45 C5.91,10.34 5.89,10.24 5.8,10.14 C5.36,9.59 5,8.58 5,7.65 C5,5.24 6.82,2.91 9.93,2.91 C12.61,2.91 14.49,4.74 14.49,7.35 C14.49,10.3 13,12.35 11.06,12.35 C9.99,12.35 9.19,11.47 9.44,10.38 C9.75,9.08 10.35,7.68 10.35,6.75 C10.35,5.91 9.9,5.21 8.97,5.21 C7.87,5.21 6.99,6.34 6.99,7.86 C6.99,8.83 7.32,9.48 7.32,9.48 C7.32,9.48 6.24,14.06 6.04,14.91 C5.7,16.35 6.08,18.7 6.12,18.9 C6.14,19.01 6.26,19.05 6.33,18.95 C6.44,18.81 7.74,16.85 8.11,15.44 C8.24,14.93 8.79,12.84 8.79,12.84 C9.15,13.52 10.19,14.09 11.29,14.09 C14.58,14.09 16.96,11.06 16.96,7.3 C16.94,3.7 14,1 10.21,1\\\"/></svg>\",\n        \"play-circle\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polygon fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" points=\\\"8.5 7 13.5 10 8.5 13\\\"/><circle fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" cx=\\\"10\\\" cy=\\\"10\\\" r=\\\"9\\\"/></svg>\",\n        \"play\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polygon fill=\\\"none\\\" stroke=\\\"#000\\\" points=\\\"6.5,5 14.5,10 6.5,15\\\"/></svg>\",\n        \"plus-circle\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" cx=\\\"9.5\\\" cy=\\\"9.5\\\" r=\\\"9\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" x1=\\\"9.5\\\" y1=\\\"5\\\" x2=\\\"9.5\\\" y2=\\\"14\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" x1=\\\"5\\\" y1=\\\"9.5\\\" x2=\\\"14\\\" y2=\\\"9.5\\\"/></svg>\",\n        \"plus\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect x=\\\"9\\\" y=\\\"1\\\" width=\\\"1\\\" height=\\\"17\\\"/><rect x=\\\"1\\\" y=\\\"9\\\" width=\\\"17\\\" height=\\\"1\\\"/></svg>\",\n        \"print\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" points=\\\"4.5 13.5 1.5 13.5 1.5 6.5 18.5 6.5 18.5 13.5 15.5 13.5\\\"/><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" points=\\\"15.5 6.5 15.5 2.5 4.5 2.5 4.5 6.5\\\"/><rect fill=\\\"none\\\" stroke=\\\"#000\\\" width=\\\"11\\\" height=\\\"6\\\" x=\\\"4.5\\\" y=\\\"11.5\\\"/><rect width=\\\"8\\\" height=\\\"1\\\" x=\\\"6\\\" y=\\\"13\\\"/><rect width=\\\"8\\\" height=\\\"1\\\" x=\\\"6\\\" y=\\\"15\\\"/></svg>\",\n        \"pull\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polygon points=\\\"6.85,8 9.5,10.6 12.15,8 12.85,8.7 9.5,12 6.15,8.7\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" x1=\\\"9.5\\\" y1=\\\"11\\\" x2=\\\"9.5\\\" y2=\\\"2\\\"/><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" points=\\\"6,5.5 3.5,5.5 3.5,18.5 15.5,18.5 15.5,5.5 13,5.5\\\"/></svg>\",\n        \"push\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polygon points=\\\"12.15,4 9.5,1.4 6.85,4 6.15,3.3 9.5,0 12.85,3.3\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" x1=\\\"9.5\\\" y1=\\\"10\\\" x2=\\\"9.5\\\" y2=\\\"1\\\"/><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" points=\\\"6 5.5 3.5 5.5 3.5 18.5 15.5 18.5 15.5 5.5 13 5.5\\\"/></svg>\",\n        \"question\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" cx=\\\"10\\\" cy=\\\"10\\\" r=\\\"9\\\"/><circle cx=\\\"10.44\\\" cy=\\\"14.42\\\" r=\\\"1.05\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.2\\\" d=\\\"M8.17,7.79 C8.17,4.75 12.72,4.73 12.72,7.72 C12.72,8.67 11.81,9.15 11.23,9.75 C10.75,10.24 10.51,10.73 10.45,11.4 C10.44,11.53 10.43,11.64 10.43,11.75\\\"/></svg>\",\n        \"quote-right\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M17.27,7.79 C17.27,9.45 16.97,10.43 15.99,12.02 C14.98,13.64 13,15.23 11.56,15.97 L11.1,15.08 C12.34,14.2 13.14,13.51 14.02,11.82 C14.27,11.34 14.41,10.92 14.49,10.54 C14.3,10.58 14.09,10.6 13.88,10.6 C12.06,10.6 10.59,9.12 10.59,7.3 C10.59,5.48 12.06,4 13.88,4 C15.39,4 16.67,5.02 17.05,6.42 C17.19,6.82 17.27,7.27 17.27,7.79 L17.27,7.79 Z\\\"/><path d=\\\"M8.68,7.79 C8.68,9.45 8.38,10.43 7.4,12.02 C6.39,13.64 4.41,15.23 2.97,15.97 L2.51,15.08 C3.75,14.2 4.55,13.51 5.43,11.82 C5.68,11.34 5.82,10.92 5.9,10.54 C5.71,10.58 5.5,10.6 5.29,10.6 C3.47,10.6 2,9.12 2,7.3 C2,5.48 3.47,4 5.29,4 C6.8,4 8.08,5.02 8.46,6.42 C8.6,6.82 8.68,7.27 8.68,7.79 L8.68,7.79 Z\\\"/></svg>\",\n        \"receiver\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.01\\\" d=\\\"M6.189,13.611C8.134,15.525 11.097,18.239 13.867,18.257C16.47,18.275 18.2,16.241 18.2,16.241L14.509,12.551L11.539,13.639L6.189,8.29L7.313,5.355L3.76,1.8C3.76,1.8 1.732,3.537 1.7,6.092C1.667,8.809 4.347,11.738 6.189,13.611\\\"/></svg>\",\n        \"reddit\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M19 9.05a2.56 2.56 0 0 0-2.56-2.56 2.59 2.59 0 0 0-1.88.82 10.63 10.63 0 0 0-4.14-1v-.08c.58-1.62 1.58-3.89 2.7-4.1.38-.08.77.12 1.19.57a1.15 1.15 0 0 0-.06.37 1.48 1.48 0 1 0 1.51-1.45 1.43 1.43 0 0 0-.76.19A2.29 2.29 0 0 0 12.91 1c-2.11.43-3.39 4.38-3.63 5.19 0 0 0 .11-.06.11a10.65 10.65 0 0 0-3.75 1A2.56 2.56 0 0 0 1 9.05a2.42 2.42 0 0 0 .72 1.76A5.18 5.18 0 0 0 1.24 13c0 3.66 3.92 6.64 8.73 6.64s8.74-3 8.74-6.64a5.23 5.23 0 0 0-.46-2.13A2.58 2.58 0 0 0 19 9.05zm-16.88 0a1.44 1.44 0 0 1 2.27-1.19 7.68 7.68 0 0 0-2.07 1.91 1.33 1.33 0 0 1-.2-.72zM10 18.4c-4.17 0-7.55-2.4-7.55-5.4S5.83 7.53 10 7.53 17.5 10 17.5 13s-3.38 5.4-7.5 5.4zm7.69-8.61a7.62 7.62 0 0 0-2.09-1.91 1.41 1.41 0 0 1 .84-.28 1.47 1.47 0 0 1 1.44 1.45 1.34 1.34 0 0 1-.21.72z\\\"/><path d=\\\"M6.69 12.58a1.39 1.39 0 1 1 1.39-1.39 1.38 1.38 0 0 1-1.38 1.39z\\\"/><path d=\\\"M14.26 11.2a1.39 1.39 0 1 1-1.39-1.39 1.39 1.39 0 0 1 1.39 1.39z\\\"/><path d=\\\"M13.09 14.88a.54.54 0 0 1-.09.77 5.3 5.3 0 0 1-3.26 1.19 5.61 5.61 0 0 1-3.4-1.22.55.55 0 1 1 .73-.83 4.09 4.09 0 0 0 5.25 0 .56.56 0 0 1 .77.09z\\\"/></svg>\",\n        \"refresh\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" d=\\\"M17.08,11.15 C17.09,11.31 17.1,11.47 17.1,11.64 C17.1,15.53 13.94,18.69 10.05,18.69 C6.16,18.68 3,15.53 3,11.63 C3,7.74 6.16,4.58 10.05,4.58 C10.9,4.58 11.71,4.73 12.46,5\\\"/><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" points=\\\"9.9 2 12.79 4.89 9.79 7.9\\\"/></svg>\",\n        \"reply\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M17.7,13.11 C16.12,10.02 13.84,7.85 11.02,6.61 C10.57,6.41 9.75,6.13 9,5.91 L9,2 L1,9 L9,16 L9,12.13 C10.78,12.47 12.5,13.19 14.09,14.25 C17.13,16.28 18.56,18.54 18.56,18.54 C18.56,18.54 18.81,15.28 17.7,13.11 L17.7,13.11 Z M14.82,13.53 C13.17,12.4 11.01,11.4 8,10.92 L8,13.63 L2.55,9 L8,4.25 L8,6.8 C8.3,6.86 9.16,7.02 10.37,7.49 C13.3,8.65 15.54,10.96 16.65,13.08 C16.97,13.7 17.48,14.86 17.68,16 C16.87,15.05 15.73,14.15 14.82,13.53 L14.82,13.53 Z\\\"/></svg>\",\n        \"rss\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle cx=\\\"3.12\\\" cy=\\\"16.8\\\" r=\\\"1.85\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" d=\\\"M1.5,8.2 C1.78,8.18 2.06,8.16 2.35,8.16 C7.57,8.16 11.81,12.37 11.81,17.57 C11.81,17.89 11.79,18.19 11.76,18.5\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" d=\\\"M1.5,2.52 C1.78,2.51 2.06,2.5 2.35,2.5 C10.72,2.5 17.5,9.24 17.5,17.57 C17.5,17.89 17.49,18.19 17.47,18.5\\\"/></svg>\",\n        \"search\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" cx=\\\"9\\\" cy=\\\"9\\\" r=\\\"7\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" d=\\\"M14,14 L18,18 L14,14 Z\\\"/></svg>\",\n        \"server\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect x=\\\"3\\\" y=\\\"3\\\" width=\\\"1\\\" height=\\\"2\\\"/><rect x=\\\"5\\\" y=\\\"3\\\" width=\\\"1\\\" height=\\\"2\\\"/><rect x=\\\"7\\\" y=\\\"3\\\" width=\\\"1\\\" height=\\\"2\\\"/><rect x=\\\"16\\\" y=\\\"3\\\" width=\\\"1\\\" height=\\\"1\\\"/><rect x=\\\"16\\\" y=\\\"10\\\" width=\\\"1\\\" height=\\\"1\\\"/><circle fill=\\\"none\\\" stroke=\\\"#000\\\" cx=\\\"9.9\\\" cy=\\\"17.4\\\" r=\\\"1.4\\\"/><rect x=\\\"3\\\" y=\\\"10\\\" width=\\\"1\\\" height=\\\"2\\\"/><rect x=\\\"5\\\" y=\\\"10\\\" width=\\\"1\\\" height=\\\"2\\\"/><rect x=\\\"9.5\\\" y=\\\"14\\\" width=\\\"1\\\" height=\\\"2\\\"/><rect x=\\\"3\\\" y=\\\"17\\\" width=\\\"6\\\" height=\\\"1\\\"/><rect x=\\\"11\\\" y=\\\"17\\\" width=\\\"6\\\" height=\\\"1\\\"/><rect fill=\\\"none\\\" stroke=\\\"#000\\\" x=\\\"1.5\\\" y=\\\"1.5\\\" width=\\\"17\\\" height=\\\"5\\\"/><rect fill=\\\"none\\\" stroke=\\\"#000\\\" x=\\\"1.5\\\" y=\\\"8.5\\\" width=\\\"17\\\" height=\\\"5\\\"/></svg>\",\n        \"settings\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><ellipse fill=\\\"none\\\" stroke=\\\"#000\\\" cx=\\\"6.11\\\" cy=\\\"3.55\\\" rx=\\\"2.11\\\" ry=\\\"2.15\\\"/><ellipse fill=\\\"none\\\" stroke=\\\"#000\\\" cx=\\\"6.11\\\" cy=\\\"15.55\\\" rx=\\\"2.11\\\" ry=\\\"2.15\\\"/><circle fill=\\\"none\\\" stroke=\\\"#000\\\" cx=\\\"13.15\\\" cy=\\\"9.55\\\" r=\\\"2.15\\\"/><rect x=\\\"1\\\" y=\\\"3\\\" width=\\\"3\\\" height=\\\"1\\\"/><rect x=\\\"10\\\" y=\\\"3\\\" width=\\\"8\\\" height=\\\"1\\\"/><rect x=\\\"1\\\" y=\\\"9\\\" width=\\\"8\\\" height=\\\"1\\\"/><rect x=\\\"15\\\" y=\\\"9\\\" width=\\\"3\\\" height=\\\"1\\\"/><rect x=\\\"1\\\" y=\\\"15\\\" width=\\\"3\\\" height=\\\"1\\\"/><rect x=\\\"10\\\" y=\\\"15\\\" width=\\\"8\\\" height=\\\"1\\\"/></svg>\",\n        \"shrink\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polygon points=\\\"11 4 12 4 12 8 16 8 16 9 11 9\\\"/><polygon points=\\\"4 11 9 11 9 16 8 16 8 12 4 12\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" d=\\\"M12,8 L18,2\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" d=\\\"M2,18 L8,12\\\"/></svg>\",\n        \"sign-in\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polygon points=\\\"7 2 17 2 17 17 7 17 7 16 16 16 16 3 7 3\\\"/><polygon points=\\\"9.1 13.4 8.5 12.8 11.28 10 4 10 4 9 11.28 9 8.5 6.2 9.1 5.62 13 9.5\\\"/></svg>\",\n        \"sign-out\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polygon points=\\\"13.1 13.4 12.5 12.8 15.28 10 8 10 8 9 15.28 9 12.5 6.2 13.1 5.62 17 9.5\\\"/><polygon points=\\\"13 2 3 2 3 17 13 17 13 16 4 16 4 3 13 3\\\"/></svg>\",\n        \"social\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><line fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" x1=\\\"13.4\\\" y1=\\\"14\\\" x2=\\\"6.3\\\" y2=\\\"10.7\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" x1=\\\"13.5\\\" y1=\\\"5.5\\\" x2=\\\"6.5\\\" y2=\\\"8.8\\\"/><circle fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" cx=\\\"15.5\\\" cy=\\\"4.6\\\" r=\\\"2.3\\\"/><circle fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" cx=\\\"15.5\\\" cy=\\\"14.8\\\" r=\\\"2.3\\\"/><circle fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" cx=\\\"4.5\\\" cy=\\\"9.8\\\" r=\\\"2.3\\\"/></svg>\",\n        \"soundcloud\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M17.2,9.4c-0.4,0-0.8,0.1-1.101,0.2c-0.199-2.5-2.399-4.5-5-4.5c-0.6,0-1.2,0.1-1.7,0.3C9.2,5.5,9.1,5.6,9.1,5.6V15h8 c1.601,0,2.801-1.2,2.801-2.8C20,10.7,18.7,9.4,17.2,9.4L17.2,9.4z\\\"/><rect x=\\\"6\\\" y=\\\"6.5\\\" width=\\\"1.5\\\" height=\\\"8.5\\\"/><rect x=\\\"3\\\" y=\\\"8\\\" width=\\\"1.5\\\" height=\\\"7\\\"/><rect y=\\\"10\\\" width=\\\"1.5\\\" height=\\\"5\\\"/></svg>\",\n        \"star\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polygon fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.01\\\" points=\\\"10 2 12.63 7.27 18.5 8.12 14.25 12.22 15.25 18 10 15.27 4.75 18 5.75 12.22 1.5 8.12 7.37 7.27\\\"/></svg>\",\n        \"strikethrough\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M6,13.02 L6.65,13.02 C7.64,15.16 8.86,16.12 10.41,16.12 C12.22,16.12 12.92,14.93 12.92,13.89 C12.92,12.55 11.99,12.03 9.74,11.23 C8.05,10.64 6.23,10.11 6.23,7.83 C6.23,5.5 8.09,4.09 10.4,4.09 C11.44,4.09 12.13,4.31 12.72,4.54 L13.33,4 L13.81,4 L13.81,7.59 L13.16,7.59 C12.55,5.88 11.52,4.89 10.07,4.89 C8.84,4.89 7.89,5.69 7.89,7.03 C7.89,8.29 8.89,8.78 10.88,9.45 C12.57,10.03 14.38,10.6 14.38,12.91 C14.38,14.75 13.27,16.93 10.18,16.93 C9.18,16.93 8.17,16.69 7.46,16.39 L6.52,17 L6,17 L6,13.02 L6,13.02 Z\\\"/><rect x=\\\"3\\\" y=\\\"10\\\" width=\\\"15\\\" height=\\\"1\\\"/></svg>\",\n        \"table\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect x=\\\"1\\\" y=\\\"3\\\" width=\\\"18\\\" height=\\\"1\\\"/><rect x=\\\"1\\\" y=\\\"7\\\" width=\\\"18\\\" height=\\\"1\\\"/><rect x=\\\"1\\\" y=\\\"11\\\" width=\\\"18\\\" height=\\\"1\\\"/><rect x=\\\"1\\\" y=\\\"15\\\" width=\\\"18\\\" height=\\\"1\\\"/></svg>\",\n        \"tablet-landscape\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path fill=\\\"none\\\" stroke=\\\"#000\\\" d=\\\"M1.5,5 C1.5,4.2 2.2,3.5 3,3.5 L17,3.5 C17.8,3.5 18.5,4.2 18.5,5 L18.5,16 C18.5,16.8 17.8,17.5 17,17.5 L3,17.5 C2.2,17.5 1.5,16.8 1.5,16 L1.5,5 L1.5,5 L1.5,5 Z\\\"/><circle cx=\\\"3.7\\\" cy=\\\"10.5\\\" r=\\\".8\\\"/></svg>\",\n        \"tablet\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path fill=\\\"none\\\" stroke=\\\"#000\\\" d=\\\"M5,18.5 C4.2,18.5 3.5,17.8 3.5,17 L3.5,3 C3.5,2.2 4.2,1.5 5,1.5 L16,1.5 C16.8,1.5 17.5,2.2 17.5,3 L17.5,17 C17.5,17.8 16.8,18.5 16,18.5 L5,18.5 L5,18.5 L5,18.5 Z\\\"/><circle cx=\\\"10.5\\\" cy=\\\"16.3\\\" r=\\\".8\\\"/></svg>\",\n        \"tag\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" d=\\\"M17.5,3.71 L17.5,7.72 C17.5,7.96 17.4,8.2 17.21,8.39 L8.39,17.2 C7.99,17.6 7.33,17.6 6.93,17.2 L2.8,13.07 C2.4,12.67 2.4,12.01 2.8,11.61 L11.61,2.8 C11.81,2.6 12.08,2.5 12.34,2.5 L16.19,2.5 C16.52,2.5 16.86,2.63 17.11,2.88 C17.35,3.11 17.48,3.4 17.5,3.71 L17.5,3.71 Z\\\"/><circle cx=\\\"14\\\" cy=\\\"6\\\" r=\\\"1\\\"/></svg>\",\n        \"thumbnails\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect fill=\\\"none\\\" stroke=\\\"#000\\\" x=\\\"3.5\\\" y=\\\"3.5\\\" width=\\\"5\\\" height=\\\"5\\\"/><rect fill=\\\"none\\\" stroke=\\\"#000\\\" x=\\\"11.5\\\" y=\\\"3.5\\\" width=\\\"5\\\" height=\\\"5\\\"/><rect fill=\\\"none\\\" stroke=\\\"#000\\\" x=\\\"11.5\\\" y=\\\"11.5\\\" width=\\\"5\\\" height=\\\"5\\\"/><rect fill=\\\"none\\\" stroke=\\\"#000\\\" x=\\\"3.5\\\" y=\\\"11.5\\\" width=\\\"5\\\" height=\\\"5\\\"/></svg>\",\n        \"tiktok\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M17.24,6V8.82a6.79,6.79,0,0,1-4-1.28v5.81A5.26,5.26,0,1,1,8,8.1a4.36,4.36,0,0,1,.72.05v2.9A2.57,2.57,0,0,0,7.64,11a2.4,2.4,0,1,0,2.77,2.38V2h2.86a4,4,0,0,0,1.84,3.38A4,4,0,0,0,17.24,6Z\\\"/></svg>\",\n        \"trash\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" points=\\\"6.5 3 6.5 1.5 13.5 1.5 13.5 3\\\"/><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" points=\\\"4.5 4 4.5 18.5 15.5 18.5 15.5 4\\\"/><rect x=\\\"8\\\" y=\\\"7\\\" width=\\\"1\\\" height=\\\"9\\\"/><rect x=\\\"11\\\" y=\\\"7\\\" width=\\\"1\\\" height=\\\"9\\\"/><rect x=\\\"2\\\" y=\\\"3\\\" width=\\\"16\\\" height=\\\"1\\\"/></svg>\",\n        \"triangle-down\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polygon points=\\\"5 7 15 7 10 12\\\"/></svg>\",\n        \"triangle-left\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polygon points=\\\"12 5 7 10 12 15\\\"/></svg>\",\n        \"triangle-right\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polygon points=\\\"8 5 13 10 8 15\\\"/></svg>\",\n        \"triangle-up\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polygon points=\\\"5 13 10 8 15 13\\\"/></svg>\",\n        \"tripadvisor\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M19.021,7.866C19.256,6.862,20,5.854,20,5.854h-3.346C14.781,4.641,12.504,4,9.98,4C7.363,4,4.999,4.651,3.135,5.876H0\\tc0,0,0.738,0.987,0.976,1.988c-0.611,0.837-0.973,1.852-0.973,2.964c0,2.763,2.249,5.009,5.011,5.009\\tc1.576,0,2.976-0.737,3.901-1.879l1.063,1.599l1.075-1.615c0.475,0.611,1.1,1.111,1.838,1.451c1.213,0.547,2.574,0.612,3.825,0.15\\tc2.589-0.963,3.913-3.852,2.964-6.439c-0.175-0.463-0.4-0.876-0.675-1.238H19.021z M16.38,14.594\\tc-1.002,0.371-2.088,0.328-3.06-0.119c-0.688-0.317-1.252-0.817-1.657-1.438c-0.164-0.25-0.313-0.52-0.417-0.811\\tc-0.124-0.328-0.186-0.668-0.217-1.014c-0.063-0.689,0.037-1.396,0.339-2.043c0.448-0.971,1.251-1.71,2.25-2.079\\tc2.075-0.765,4.375,0.3,5.14,2.366c0.762,2.066-0.301,4.37-2.363,5.134L16.38,14.594L16.38,14.594z M8.322,13.066\\tc-0.72,1.059-1.935,1.76-3.309,1.76c-2.207,0-4.001-1.797-4.001-3.996c0-2.203,1.795-4.002,4.001-4.002\\tc2.204,0,3.999,1.8,3.999,4.002c0,0.137-0.024,0.261-0.04,0.396c-0.067,0.678-0.284,1.313-0.648,1.853v-0.013H8.322z M2.472,10.775\\tc0,1.367,1.112,2.479,2.476,2.479c1.363,0,2.472-1.11,2.472-2.479c0-1.359-1.11-2.468-2.472-2.468\\tC3.584,8.306,2.473,9.416,2.472,10.775L2.472,10.775z M12.514,10.775c0,1.367,1.104,2.479,2.471,2.479\\tc1.363,0,2.474-1.108,2.474-2.479c0-1.359-1.11-2.468-2.474-2.468c-1.364,0-2.477,1.109-2.477,2.468H12.514z M3.324,10.775\\tc0-0.893,0.726-1.618,1.614-1.618c0.889,0,1.625,0.727,1.625,1.618c0,0.898-0.725,1.627-1.625,1.627\\tc-0.901,0-1.625-0.729-1.625-1.627H3.324z M13.354,10.775c0-0.893,0.726-1.618,1.627-1.618c0.886,0,1.61,0.727,1.61,1.618\\tc0,0.898-0.726,1.627-1.626,1.627s-1.625-0.729-1.625-1.627H13.354z M9.977,4.875c1.798,0,3.425,0.324,4.849,0.968\\tc-0.535,0.015-1.061,0.108-1.586,0.3c-1.264,0.463-2.264,1.388-2.815,2.604c-0.262,0.551-0.398,1.133-0.448,1.72\\tC9.79,7.905,7.677,5.873,5.076,5.82C6.501,5.208,8.153,4.875,9.94,4.875H9.977z\\\"/></svg>\",\n        \"tumblr\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M6.885,8.598c0,0,0,3.393,0,4.996c0,0.282,0,0.66,0.094,0.942c0.377,1.509,1.131,2.545,2.545,3.11 c1.319,0.472,2.356,0.472,3.676,0c0.565-0.188,1.132-0.659,1.132-0.659l-0.849-2.263c0,0-1.036,0.378-1.603,0.283 c-0.565-0.094-1.226-0.66-1.226-1.508c0-1.603,0-4.902,0-4.902h2.828V5.771h-2.828V2H8.205c0,0-0.094,0.66-0.188,0.942 C7.828,3.791,7.262,4.733,6.603,5.394C5.848,6.147,5,6.43,5,6.43v2.168H6.885z\\\"/></svg>\",\n        \"tv\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect x=\\\"7\\\" y=\\\"16\\\" width=\\\"6\\\" height=\\\"1\\\"/><rect fill=\\\"none\\\" stroke=\\\"#000\\\" x=\\\".5\\\" y=\\\"3.5\\\" width=\\\"19\\\" height=\\\"11\\\"/></svg>\",\n        \"twitch\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M5.23,1,2,4.23V15.85H5.88v3.23L9.1,15.85h2.59L17.5,10V1Zm11,8.4L13.62,12H11L8.78,14.24V12H5.88V2.29H16.21Z\\\"/><rect x=\\\"12.98\\\" y=\\\"4.55\\\" width=\\\"1.29\\\" height=\\\"3.88\\\"/><rect x=\\\"9.43\\\" y=\\\"4.55\\\" width=\\\"1.29\\\" height=\\\"3.88\\\"/></svg>\",\n        \"twitter\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M19,4.74 C18.339,5.029 17.626,5.229 16.881,5.32 C17.644,4.86 18.227,4.139 18.503,3.28 C17.79,3.7 17.001,4.009 16.159,4.17 C15.485,3.45 14.526,3 13.464,3 C11.423,3 9.771,4.66 9.771,6.7 C9.771,6.99 9.804,7.269 9.868,7.539 C6.795,7.38 4.076,5.919 2.254,3.679 C1.936,4.219 1.754,4.86 1.754,5.539 C1.754,6.82 2.405,7.95 3.397,8.61 C2.79,8.589 2.22,8.429 1.723,8.149 L1.723,8.189 C1.723,9.978 2.997,11.478 4.686,11.82 C4.376,11.899 4.049,11.939 3.713,11.939 C3.475,11.939 3.245,11.919 3.018,11.88 C3.49,13.349 4.852,14.419 6.469,14.449 C5.205,15.429 3.612,16.019 1.882,16.019 C1.583,16.019 1.29,16.009 1,15.969 C2.635,17.019 4.576,17.629 6.662,17.629 C13.454,17.629 17.17,12 17.17,7.129 C17.17,6.969 17.166,6.809 17.157,6.649 C17.879,6.129 18.504,5.478 19,4.74\\\"/></svg>\",\n        \"uikit\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polygon points=\\\"14.4,3.1 11.3,5.1 15,7.3 15,12.9 10,15.7 5,12.9 5,8.5 2,6.8 2,14.8 9.9,19.5 18,14.8 18,5.3\\\"/><polygon points=\\\"9.8,4.2 6.7,2.4 9.8,0.4 12.9,2.3\\\"/></svg>\",\n        \"unlock\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect fill=\\\"none\\\" stroke=\\\"#000\\\" x=\\\"3.5\\\" y=\\\"8.5\\\" width=\\\"13\\\" height=\\\"10\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" d=\\\"M6.5,8.5 L6.5,4.9 C6.5,3 8.1,1.5 10,1.5 C11.9,1.5 13.5,3 13.5,4.9\\\"/></svg>\",\n        \"upload\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" points=\\\"5 8 9.5 3.5 14 8\\\"/><rect x=\\\"3\\\" y=\\\"17\\\" width=\\\"13\\\" height=\\\"1\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" x1=\\\"9.5\\\" y1=\\\"15\\\" x2=\\\"9.5\\\" y2=\\\"4\\\"/></svg>\",\n        \"user\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" cx=\\\"9.9\\\" cy=\\\"6.4\\\" r=\\\"4.4\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" d=\\\"M1.5,19 C2.3,14.5 5.8,11.2 10,11.2 C14.2,11.2 17.7,14.6 18.5,19.2\\\"/></svg>\",\n        \"users\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" cx=\\\"7.7\\\" cy=\\\"8.6\\\" r=\\\"3.5\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" d=\\\"M1,18.1 C1.7,14.6 4.4,12.1 7.6,12.1 C10.9,12.1 13.7,14.8 14.3,18.3\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" d=\\\"M11.4,4 C12.8,2.4 15.4,2.8 16.3,4.7 C17.2,6.6 15.7,8.9 13.6,8.9 C16.5,8.9 18.8,11.3 19.2,14.1\\\"/></svg>\",\n        \"video-camera\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polygon fill=\\\"none\\\" stroke=\\\"#000\\\" points=\\\"19.5 5.9 19.5 14.1 14.5 10.4 14.5 15.5 .5 15.5 .5 4.5 14.5 4.5 14.5 9.6 19.5 5.9\\\"/></svg>\",\n        \"vimeo\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2.065,7.59C1.84,7.367,1.654,7.082,1.468,6.838c-0.332-0.42-0.137-0.411,0.274-0.772c1.026-0.91,2.004-1.896,3.127-2.688 c1.017-0.713,2.365-1.173,3.286-0.039c0.849,1.045,0.869,2.629,1.084,3.891c0.215,1.309,0.421,2.648,0.88,3.901 c0.127,0.352,0.37,1.018,0.81,1.074c0.567,0.078,1.145-0.917,1.408-1.289c0.684-0.987,1.611-2.317,1.494-3.587 c-0.115-1.349-1.572-1.095-2.482-0.773c0.146-1.514,1.555-3.216,2.912-3.792c1.439-0.597,3.579-0.587,4.302,1.036 c0.772,1.759,0.078,3.802-0.763,5.396c-0.918,1.731-2.1,3.333-3.363,4.829c-1.114,1.329-2.432,2.787-4.093,3.422 c-1.897,0.723-3.021-0.686-3.667-2.318c-0.705-1.777-1.056-3.771-1.565-5.621C4.898,8.726,4.644,7.836,4.136,7.191 C3.473,6.358,2.72,7.141,2.065,7.59C1.977,7.502,2.115,7.551,2.065,7.59L2.065,7.59z\\\"/></svg>\",\n        \"warning\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle cx=\\\"10\\\" cy=\\\"14\\\" r=\\\"1\\\"/><circle fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" cx=\\\"10\\\" cy=\\\"10\\\" r=\\\"9\\\"/><path d=\\\"M10.97,7.72 C10.85,9.54 10.56,11.29 10.56,11.29 C10.51,11.87 10.27,12 9.99,12 C9.69,12 9.49,11.87 9.43,11.29 C9.43,11.29 9.16,9.54 9.03,7.72 C8.96,6.54 9.03,6 9.03,6 C9.03,5.45 9.46,5.02 9.99,5 C10.53,5.01 10.97,5.44 10.97,6 C10.97,6 11.04,6.54 10.97,7.72 L10.97,7.72 Z\\\"/></svg>\",\n        \"whatsapp\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M16.7,3.3c-1.8-1.8-4.1-2.8-6.7-2.8c-5.2,0-9.4,4.2-9.4,9.4c0,1.7,0.4,3.3,1.3,4.7l-1.3,4.9l5-1.3c1.4,0.8,2.9,1.2,4.5,1.2 l0,0l0,0c5.2,0,9.4-4.2,9.4-9.4C19.5,7.4,18.5,5,16.7,3.3 M10.1,17.7L10.1,17.7c-1.4,0-2.8-0.4-4-1.1l-0.3-0.2l-3,0.8l0.8-2.9 l-0.2-0.3c-0.8-1.2-1.2-2.7-1.2-4.2c0-4.3,3.5-7.8,7.8-7.8c2.1,0,4.1,0.8,5.5,2.3c1.5,1.5,2.3,3.4,2.3,5.5 C17.9,14.2,14.4,17.7,10.1,17.7 M14.4,11.9c-0.2-0.1-1.4-0.7-1.6-0.8c-0.2-0.1-0.4-0.1-0.5,0.1c-0.2,0.2-0.6,0.8-0.8,0.9 c-0.1,0.2-0.3,0.2-0.5,0.1c-0.2-0.1-1-0.4-1.9-1.2c-0.7-0.6-1.2-1.4-1.3-1.6c-0.1-0.2,0-0.4,0.1-0.5C8,8.8,8.1,8.7,8.2,8.5 c0.1-0.1,0.2-0.2,0.2-0.4c0.1-0.2,0-0.3,0-0.4C8.4,7.6,7.9,6.5,7.7,6C7.5,5.5,7.3,5.6,7.2,5.6c-0.1,0-0.3,0-0.4,0 c-0.2,0-0.4,0.1-0.6,0.3c-0.2,0.2-0.8,0.8-0.8,2c0,1.2,0.8,2.3,1,2.4c0.1,0.2,1.7,2.5,4,3.5c0.6,0.2,1,0.4,1.3,0.5 c0.6,0.2,1.1,0.2,1.5,0.1c0.5-0.1,1.4-0.6,1.6-1.1c0.2-0.5,0.2-1,0.1-1.1C14.8,12.1,14.6,12,14.4,11.9\\\"/></svg>\",\n        \"wordpress\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M10,0.5c-5.2,0-9.5,4.3-9.5,9.5s4.3,9.5,9.5,9.5c5.2,0,9.5-4.3,9.5-9.5S15.2,0.5,10,0.5L10,0.5L10,0.5z M15.6,3.9h-0.1 c-0.8,0-1.4,0.7-1.4,1.5c0,0.7,0.4,1.3,0.8,1.9c0.3,0.6,0.7,1.3,0.7,2.3c0,0.7-0.3,1.5-0.6,2.7L14.1,15l-3-8.9 c0.5,0,0.9-0.1,0.9-0.1C12.5,6,12.5,5.3,12,5.4c0,0-1.3,0.1-2.2,0.1C9,5.5,7.7,5.4,7.7,5.4C7.2,5.3,7.2,6,7.6,6c0,0,0.4,0.1,0.9,0.1 l1.3,3.5L8,15L5,6.1C5.5,6.1,5.9,6,5.9,6C6.4,6,6.3,5.3,5.9,5.4c0,0-1.3,0.1-2.2,0.1c-0.2,0-0.3,0-0.5,0c1.5-2.2,4-3.7,6.9-3.7 C12.2,1.7,14.1,2.6,15.6,3.9L15.6,3.9L15.6,3.9z M2.5,6.6l3.9,10.8c-2.7-1.3-4.6-4.2-4.6-7.4C1.8,8.8,2,7.6,2.5,6.6L2.5,6.6L2.5,6.6 z M10.2,10.7l2.5,6.9c0,0,0,0.1,0.1,0.1C11.9,18,11,18.2,10,18.2c-0.8,0-1.6-0.1-2.3-0.3L10.2,10.7L10.2,10.7L10.2,10.7z M14.2,17.1 l2.5-7.3c0.5-1.2,0.6-2.1,0.6-2.9c0-0.3,0-0.6-0.1-0.8c0.6,1.2,1,2.5,1,4C18.3,13,16.6,15.7,14.2,17.1L14.2,17.1L14.2,17.1z\\\"/></svg>\",\n        \"world\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path fill=\\\"none\\\" stroke=\\\"#000\\\" d=\\\"M1,10.5 L19,10.5\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" d=\\\"M2.35,15.5 L17.65,15.5\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" d=\\\"M2.35,5.5 L17.523,5.5\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" d=\\\"M10,19.46 L9.98,19.46 C7.31,17.33 5.61,14.141 5.61,10.58 C5.61,7.02 7.33,3.83 10,1.7 C10.01,1.7 9.99,1.7 10,1.7 L10,1.7 C12.67,3.83 14.4,7.02 14.4,10.58 C14.4,14.141 12.67,17.33 10,19.46 L10,19.46 L10,19.46 L10,19.46 Z\\\"/><circle fill=\\\"none\\\" stroke=\\\"#000\\\" cx=\\\"10\\\" cy=\\\"10.5\\\" r=\\\"9\\\"/></svg>\",\n        \"xing\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M4.4,4.56 C4.24,4.56 4.11,4.61 4.05,4.72 C3.98,4.83 3.99,4.97 4.07,5.12 L5.82,8.16 L5.82,8.17 L3.06,13.04 C2.99,13.18 2.99,13.33 3.06,13.44 C3.12,13.55 3.24,13.62 3.4,13.62 L6,13.62 C6.39,13.62 6.57,13.36 6.71,13.12 C6.71,13.12 9.41,8.35 9.51,8.16 C9.49,8.14 7.72,5.04 7.72,5.04 C7.58,4.81 7.39,4.56 6.99,4.56 L4.4,4.56 L4.4,4.56 Z\\\"/><path d=\\\"M15.3,1 C14.91,1 14.74,1.25 14.6,1.5 C14.6,1.5 9.01,11.42 8.82,11.74 C8.83,11.76 12.51,18.51 12.51,18.51 C12.64,18.74 12.84,19 13.23,19 L15.82,19 C15.98,19 16.1,18.94 16.16,18.83 C16.23,18.72 16.23,18.57 16.16,18.43 L12.5,11.74 L12.5,11.72 L18.25,1.56 C18.32,1.42 18.32,1.27 18.25,1.16 C18.21,1.06 18.08,1 17.93,1 L15.3,1 L15.3,1 Z\\\"/></svg>\",\n        \"yelp\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M17.175,14.971c-0.112,0.77-1.686,2.767-2.406,3.054c-0.246,0.1-0.487,0.076-0.675-0.069\\tc-0.122-0.096-2.446-3.859-2.446-3.859c-0.194-0.293-0.157-0.682,0.083-0.978c0.234-0.284,0.581-0.393,0.881-0.276\\tc0.016,0.01,4.21,1.394,4.332,1.482c0.178,0.148,0.263,0.379,0.225,0.646L17.175,14.971L17.175,14.971z M11.464,10.789\\tc-0.203-0.307-0.199-0.666,0.009-0.916c0,0,2.625-3.574,2.745-3.657c0.203-0.135,0.452-0.141,0.69-0.025\\tc0.691,0.335,2.085,2.405,2.167,3.199v0.027c0.024,0.271-0.082,0.491-0.273,0.623c-0.132,0.083-4.43,1.155-4.43,1.155\\tc-0.322,0.096-0.68-0.06-0.882-0.381L11.464,10.789z M9.475,9.563C9.32,9.609,8.848,9.757,8.269,8.817c0,0-3.916-6.16-4.007-6.351\\tc-0.057-0.212,0.011-0.455,0.202-0.65C5.047,1.211,8.21,0.327,9.037,0.529c0.27,0.069,0.457,0.238,0.522,0.479\\tc0.047,0.266,0.433,5.982,0.488,7.264C10.098,9.368,9.629,9.517,9.475,9.563z M9.927,19.066c-0.083,0.225-0.273,0.373-0.54,0.421\\tc-0.762,0.13-3.15-0.751-3.647-1.342c-0.096-0.131-0.155-0.262-0.167-0.394c-0.011-0.095,0-0.189,0.036-0.272\\tc0.061-0.155,2.917-3.538,2.917-3.538c0.214-0.272,0.595-0.355,0.952-0.213c0.345,0.13,0.56,0.428,0.536,0.749\\tC10.014,14.479,9.977,18.923,9.927,19.066z M3.495,13.912c-0.235-0.009-0.444-0.148-0.568-0.382c-0.089-0.17-0.151-0.453-0.19-0.794\\tC2.63,11.701,2.761,10.144,3.07,9.648c0.145-0.226,0.357-0.345,0.592-0.336c0.154,0,4.255,1.667,4.255,1.667\\tc0.321,0.118,0.521,0.453,0.5,0.833c-0.023,0.37-0.236,0.655-0.551,0.738L3.495,13.912z\\\"/></svg>\",\n        \"youtube\": \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M15,4.1c1,0.1,2.3,0,3,0.8c0.8,0.8,0.9,2.1,0.9,3.1C19,9.2,19,10.9,19,12c-0.1,1.1,0,2.4-0.5,3.4c-0.5,1.1-1.4,1.5-2.5,1.6 c-1.2,0.1-8.6,0.1-11,0c-1.1-0.1-2.4-0.1-3.2-1c-0.7-0.8-0.7-2-0.8-3C1,11.8,1,10.1,1,8.9c0-1.1,0-2.4,0.5-3.4C2,4.5,3,4.3,4.1,4.2 C5.3,4.1,12.6,4,15,4.1z M8,7.5v6l5.5-3L8,7.5z\\\"/></svg>\"\n      });\n    }\n\n    if (typeof window !== 'undefined' && window.UIkit) {\n      window.UIkit.use(plugin);\n    }\n\n    return plugin;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/uikit/dist/js/uikit-icons.js\n");

/***/ }),

/***/ "./node_modules/uikit/dist/js/uikit.js":
/*!*********************************************!*\
  !*** ./node_modules/uikit/dist/js/uikit.js ***!
  \*********************************************/
/***/ (function(module) {

eval("/*! UIkit 3.15.23 | https://www.getuikit.com | (c) 2014 - 2023 YOOtheme | MIT License */\n\n(function (global, factory) {\n     true ? module.exports = factory() :\n    0;\n})(this, (function () { 'use strict';\n\n    const { hasOwnProperty, toString } = Object.prototype;\n\n    function hasOwn(obj, key) {\n      return hasOwnProperty.call(obj, key);\n    }\n\n    const hyphenateRe = /\\B([A-Z])/g;\n\n    const hyphenate = memoize((str) => str.replace(hyphenateRe, '-$1').toLowerCase());\n\n    const camelizeRe = /-(\\w)/g;\n\n    const camelize = memoize((str) => str.replace(camelizeRe, toUpper));\n\n    const ucfirst = memoize((str) =>\n    str.length ? toUpper(null, str.charAt(0)) + str.slice(1) : '');\n\n\n    function toUpper(_, c) {\n      return c ? c.toUpperCase() : '';\n    }\n\n    function startsWith(str, search) {\n      return str == null ? void 0 : str.startsWith == null ? void 0 : str.startsWith(search);\n    }\n\n    function endsWith(str, search) {\n      return str == null ? void 0 : str.endsWith == null ? void 0 : str.endsWith(search);\n    }\n\n    function includes(obj, search) {\n      return obj == null ? void 0 : obj.includes == null ? void 0 : obj.includes(search);\n    }\n\n    function findIndex(array, predicate) {\n      return array == null ? void 0 : array.findIndex == null ? void 0 : array.findIndex(predicate);\n    }\n\n    const { isArray, from: toArray } = Array;\n    const { assign } = Object;\n\n    function isFunction(obj) {\n      return typeof obj === 'function';\n    }\n\n    function isObject(obj) {\n      return obj !== null && typeof obj === 'object';\n    }\n\n    function isPlainObject(obj) {\n      return toString.call(obj) === '[object Object]';\n    }\n\n    function isWindow(obj) {\n      return isObject(obj) && obj === obj.window;\n    }\n\n    function isDocument(obj) {\n      return nodeType(obj) === 9;\n    }\n\n    function isNode(obj) {\n      return nodeType(obj) >= 1;\n    }\n\n    function isElement(obj) {\n      return nodeType(obj) === 1;\n    }\n\n    function nodeType(obj) {\n      return !isWindow(obj) && isObject(obj) && obj.nodeType;\n    }\n\n    function isBoolean(value) {\n      return typeof value === 'boolean';\n    }\n\n    function isString(value) {\n      return typeof value === 'string';\n    }\n\n    function isNumber(value) {\n      return typeof value === 'number';\n    }\n\n    function isNumeric(value) {\n      return isNumber(value) || isString(value) && !isNaN(value - parseFloat(value));\n    }\n\n    function isEmpty(obj) {\n      return !(isArray(obj) ? obj.length : isObject(obj) ? Object.keys(obj).length : false);\n    }\n\n    function isUndefined(value) {\n      return value === void 0;\n    }\n\n    function toBoolean(value) {\n      return isBoolean(value) ?\n      value :\n      value === 'true' || value === '1' || value === '' ?\n      true :\n      value === 'false' || value === '0' ?\n      false :\n      value;\n    }\n\n    function toNumber(value) {\n      const number = Number(value);\n      return isNaN(number) ? false : number;\n    }\n\n    function toFloat(value) {\n      return parseFloat(value) || 0;\n    }\n\n    function toNode(element) {\n      return toNodes(element)[0];\n    }\n\n    function toNodes(element) {\n      return element && (isNode(element) ? [element] : Array.from(element).filter(isNode)) || [];\n    }\n\n    function toWindow(element) {var _element;\n      if (isWindow(element)) {\n        return element;\n      }\n\n      element = toNode(element);\n      const document = isDocument(element) ? element : (_element = element) == null ? void 0 : _element.ownerDocument;\n\n      return (document == null ? void 0 : document.defaultView) || window;\n    }\n\n    function isEqual(value, other) {\n      return (\n        value === other ||\n        isObject(value) &&\n        isObject(other) &&\n        Object.keys(value).length === Object.keys(other).length &&\n        each(value, (val, key) => val === other[key]));\n\n    }\n\n    function swap(value, a, b) {\n      return value.replace(new RegExp(`${a}|${b}`, 'g'), (match) => match === a ? b : a);\n    }\n\n    function last(array) {\n      return array[array.length - 1];\n    }\n\n    function each(obj, cb) {\n      for (const key in obj) {\n        if (false === cb(obj[key], key)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    function sortBy$1(array, prop) {\n      return array.\n      slice().\n      sort(({ [prop]: propA = 0 }, { [prop]: propB = 0 }) => propA > propB ? 1 : propB > propA ? -1 : 0);\n\n    }\n\n    function sumBy(array, iteratee) {\n      return array.reduce(\n      (sum, item) => sum + toFloat(isFunction(iteratee) ? iteratee(item) : item[iteratee]),\n      0);\n\n    }\n\n    function uniqueBy(array, prop) {\n      const seen = new Set();\n      return array.filter(({ [prop]: check }) => seen.has(check) ? false : seen.add(check));\n    }\n\n    function clamp(number, min = 0, max = 1) {\n      return Math.min(Math.max(toNumber(number) || 0, min), max);\n    }\n\n    function noop() {}\n\n    function intersectRect(...rects) {\n      return [\n      ['bottom', 'top'],\n      ['right', 'left']].\n      every(\n      ([minProp, maxProp]) => Math.min(...rects.map(({ [minProp]: min }) => min)) -\n      Math.max(...rects.map(({ [maxProp]: max }) => max)) > 0);\n\n    }\n\n    function pointInRect(point, rect) {\n      return (\n        point.x <= rect.right &&\n        point.x >= rect.left &&\n        point.y <= rect.bottom &&\n        point.y >= rect.top);\n\n    }\n\n    function ratio(dimensions, prop, value) {\n      const aProp = prop === 'width' ? 'height' : 'width';\n\n      return {\n        [aProp]: dimensions[prop] ?\n        Math.round(value * dimensions[aProp] / dimensions[prop]) :\n        dimensions[aProp],\n        [prop]: value\n      };\n    }\n\n    function contain(dimensions, maxDimensions) {\n      dimensions = { ...dimensions };\n\n      for (const prop in dimensions) {\n        dimensions =\n        dimensions[prop] > maxDimensions[prop] ?\n        ratio(dimensions, prop, maxDimensions[prop]) :\n        dimensions;\n      }\n\n      return dimensions;\n    }\n\n    function cover$1(dimensions, maxDimensions) {\n      dimensions = contain(dimensions, maxDimensions);\n\n      for (const prop in dimensions) {\n        dimensions =\n        dimensions[prop] < maxDimensions[prop] ?\n        ratio(dimensions, prop, maxDimensions[prop]) :\n        dimensions;\n      }\n\n      return dimensions;\n    }\n\n    const Dimensions = { ratio, contain, cover: cover$1 };\n\n    function getIndex(i, elements, current = 0, finite = false) {\n      elements = toNodes(elements);\n\n      const { length } = elements;\n\n      if (!length) {\n        return -1;\n      }\n\n      i = isNumeric(i) ?\n      toNumber(i) :\n      i === 'next' ?\n      current + 1 :\n      i === 'previous' ?\n      current - 1 :\n      elements.indexOf(toNode(i));\n\n      if (finite) {\n        return clamp(i, 0, length - 1);\n      }\n\n      i %= length;\n\n      return i < 0 ? i + length : i;\n    }\n\n    function memoize(fn) {\n      const cache = Object.create(null);\n      return (key) => cache[key] || (cache[key] = fn(key));\n    }\n\n    class Deferred {\n      constructor() {\n        this.promise = new Promise((resolve, reject) => {\n          this.reject = reject;\n          this.resolve = resolve;\n        });\n      }\n    }\n\n    function attr(element, name, value) {\n      if (isObject(name)) {\n        for (const key in name) {\n          attr(element, key, name[key]);\n        }\n        return;\n      }\n\n      if (isUndefined(value)) {var _toNode;\n        return (_toNode = toNode(element)) == null ? void 0 : _toNode.getAttribute(name);\n      } else {\n        for (const el of toNodes(element)) {\n          if (isFunction(value)) {\n            value = value.call(el, attr(el, name));\n          }\n\n          if (value === null) {\n            removeAttr(el, name);\n          } else {\n            el.setAttribute(name, value);\n          }\n        }\n      }\n    }\n\n    function hasAttr(element, name) {\n      return toNodes(element).some((element) => element.hasAttribute(name));\n    }\n\n    function removeAttr(element, name) {\n      toNodes(element).forEach((element) => element.removeAttribute(name));\n    }\n\n    function data(element, attribute) {\n      for (const name of [attribute, `data-${attribute}`]) {\n        if (hasAttr(element, name)) {\n          return attr(element, name);\n        }\n      }\n    }\n\n    const voidElements = {\n      area: true,\n      base: true,\n      br: true,\n      col: true,\n      embed: true,\n      hr: true,\n      img: true,\n      input: true,\n      keygen: true,\n      link: true,\n      meta: true,\n      param: true,\n      source: true,\n      track: true,\n      wbr: true\n    };\n    function isVoidElement(element) {\n      return toNodes(element).some((element) => voidElements[element.tagName.toLowerCase()]);\n    }\n\n    function isVisible(element) {\n      return toNodes(element).some(\n      (element) => element.offsetWidth || element.offsetHeight || element.getClientRects().length);\n\n    }\n\n    const selInput = 'input,select,textarea,button';\n    function isInput(element) {\n      return toNodes(element).some((element) => matches(element, selInput));\n    }\n\n    const selFocusable = `${selInput},a[href],[tabindex]`;\n    function isFocusable(element) {\n      return matches(element, selFocusable);\n    }\n\n    function parent(element) {var _toNode;\n      return (_toNode = toNode(element)) == null ? void 0 : _toNode.parentElement;\n    }\n\n    function filter$1(element, selector) {\n      return toNodes(element).filter((element) => matches(element, selector));\n    }\n\n    function matches(element, selector) {\n      return toNodes(element).some((element) => element.matches(selector));\n    }\n\n    function closest(element, selector) {\n      return isElement(element) ?\n      element.closest(startsWith(selector, '>') ? selector.slice(1) : selector) :\n      toNodes(element).\n      map((element) => closest(element, selector)).\n      filter(Boolean);\n    }\n\n    function within(element, selector) {\n      return isString(selector) ?\n      !!closest(element, selector) :\n      toNode(selector).contains(toNode(element));\n    }\n\n    function parents(element, selector) {\n      const elements = [];\n\n      while (element = parent(element)) {\n        if (!selector || matches(element, selector)) {\n          elements.push(element);\n        }\n      }\n\n      return elements;\n    }\n\n    function children(element, selector) {\n      element = toNode(element);\n      const children = element ? toNodes(element.children) : [];\n      return selector ? filter$1(children, selector) : children;\n    }\n\n    function index(element, ref) {\n      return ref ? toNodes(element).indexOf(toNode(ref)) : children(parent(element)).indexOf(element);\n    }\n\n    function query(selector, context) {\n      return find(selector, getContext(selector, context));\n    }\n\n    function queryAll(selector, context) {\n      return findAll(selector, getContext(selector, context));\n    }\n\n    function find(selector, context) {\n      return toNode(_query(selector, toNode(context), 'querySelector'));\n    }\n\n    function findAll(selector, context) {\n      return toNodes(_query(selector, toNode(context), 'querySelectorAll'));\n    }\n\n    const contextSelectorRe = /(^|[^\\\\],)\\s*[!>+~-]/;\n    const isContextSelector = memoize((selector) => selector.match(contextSelectorRe));\n\n    function getContext(selector, context = document) {\n      return isString(selector) && isContextSelector(selector) || isDocument(context) ?\n      context :\n      context.ownerDocument;\n    }\n\n    const contextSanitizeRe = /([!>+~-])(?=\\s+[!>+~-]|\\s*$)/g;\n    const sanatize = memoize((selector) => selector.replace(contextSanitizeRe, '$1 *'));\n\n    function _query(selector, context = document, queryFn) {\n      if (!selector || !isString(selector)) {\n        return selector;\n      }\n\n      selector = sanatize(selector);\n\n      if (isContextSelector(selector)) {\n        const split = splitSelector(selector);\n        selector = '';\n        for (let sel of split) {\n          let ctx = context;\n\n          if (sel[0] === '!') {\n            const selectors = sel.substr(1).trim().split(' ');\n            ctx = closest(parent(context), selectors[0]);\n            sel = selectors.slice(1).join(' ').trim();\n            if (!sel.length && split.length === 1) {\n              return ctx;\n            }\n          }\n\n          if (sel[0] === '-') {\n            const selectors = sel.substr(1).trim().split(' ');\n            const prev = (ctx || context).previousElementSibling;\n            ctx = matches(prev, sel.substr(1)) ? prev : null;\n            sel = selectors.slice(1).join(' ');\n          }\n\n          if (ctx) {\n            selector += `${selector ? ',' : ''}${domPath(ctx)} ${sel}`;\n          }\n        }\n\n        context = document;\n      }\n\n      try {\n        return context[queryFn](selector);\n      } catch (e) {\n        return null;\n      }\n    }\n\n    const selectorRe = /.*?[^\\\\](?:,|$)/g;\n\n    const splitSelector = memoize((selector) =>\n    selector.match(selectorRe).map((selector) => selector.replace(/,$/, '').trim()));\n\n\n    function domPath(element) {\n      const names = [];\n      while (element.parentNode) {\n        const id = attr(element, 'id');\n        if (id) {\n          names.unshift(`#${escape(id)}`);\n          break;\n        } else {\n          let { tagName } = element;\n          if (tagName !== 'HTML') {\n            tagName += `:nth-child(${index(element) + 1})`;\n          }\n          names.unshift(tagName);\n          element = element.parentNode;\n        }\n      }\n      return names.join(' > ');\n    }\n\n    function escape(css) {\n      return isString(css) ? CSS.escape(css) : '';\n    }\n\n    function on(...args) {\n      let [targets, types, selector, listener, useCapture = false] = getArgs(args);\n\n      if (listener.length > 1) {\n        listener = detail(listener);\n      }\n\n      if (useCapture != null && useCapture.self) {\n        listener = selfFilter(listener);\n      }\n\n      if (selector) {\n        listener = delegate(selector, listener);\n      }\n\n      for (const type of types) {\n        for (const target of targets) {\n          target.addEventListener(type, listener, useCapture);\n        }\n      }\n\n      return () => off(targets, types, listener, useCapture);\n    }\n\n    function off(...args) {\n      let [targets, types,, listener, useCapture = false] = getArgs(args);\n      for (const type of types) {\n        for (const target of targets) {\n          target.removeEventListener(type, listener, useCapture);\n        }\n      }\n    }\n\n    function once(...args) {\n      const [element, types, selector, listener, useCapture = false, condition] = getArgs(args);\n      const off = on(\n      element,\n      types,\n      selector,\n      (e) => {\n        const result = !condition || condition(e);\n        if (result) {\n          off();\n          listener(e, result);\n        }\n      },\n      useCapture);\n\n\n      return off;\n    }\n\n    function trigger(targets, event, detail) {\n      return toEventTargets(targets).every((target) => target.dispatchEvent(createEvent(event, true, true, detail)));\n\n    }\n\n    function createEvent(e, bubbles = true, cancelable = false, detail) {\n      if (isString(e)) {\n        e = new CustomEvent(e, { bubbles, cancelable, detail });\n      }\n\n      return e;\n    }\n\n    function getArgs(args) {\n      // Event targets\n      args[0] = toEventTargets(args[0]);\n\n      // Event types\n      if (isString(args[1])) {\n        args[1] = args[1].split(' ');\n      }\n\n      // Delegate?\n      if (isFunction(args[2])) {\n        args.splice(2, 0, false);\n      }\n\n      return args;\n    }\n\n    function delegate(selector, listener) {\n      return (e) => {\n        const current =\n        selector[0] === '>' ?\n        findAll(selector, e.currentTarget).\n        reverse().\n        filter((element) => within(e.target, element))[0] :\n        closest(e.target, selector);\n\n        if (current) {\n          e.current = current;\n          listener.call(this, e);\n        }\n      };\n    }\n\n    function detail(listener) {\n      return (e) => isArray(e.detail) ? listener(e, ...e.detail) : listener(e);\n    }\n\n    function selfFilter(listener) {\n      return function (e) {\n        if (e.target === e.currentTarget || e.target === e.current) {\n          return listener.call(null, e);\n        }\n      };\n    }\n\n    function isEventTarget(target) {\n      return target && 'addEventListener' in target;\n    }\n\n    function toEventTarget(target) {\n      return isEventTarget(target) ? target : toNode(target);\n    }\n\n    function toEventTargets(target) {\n      return isArray(target) ?\n      target.map(toEventTarget).filter(Boolean) :\n      isString(target) ?\n      findAll(target) :\n      isEventTarget(target) ?\n      [target] :\n      toNodes(target);\n    }\n\n    function isTouch(e) {\n      return e.pointerType === 'touch' || !!e.touches;\n    }\n\n    function getEventPos(e) {var _e$touches, _e$changedTouches;\n      const { clientX: x, clientY: y } = ((_e$touches = e.touches) == null ? void 0 : _e$touches[0]) || ((_e$changedTouches = e.changedTouches) == null ? void 0 : _e$changedTouches[0]) || e;\n\n      return { x, y };\n    }\n\n    function ajax(url, options) {\n      const env = {\n        data: null,\n        method: 'GET',\n        headers: {},\n        xhr: new XMLHttpRequest(),\n        beforeSend: noop,\n        responseType: '',\n        ...options\n      };\n      return Promise.resolve().\n      then(() => env.beforeSend(env)).\n      then(() => send(url, env));\n    }\n\n    function send(url, env) {\n      return new Promise((resolve, reject) => {\n        const { xhr } = env;\n\n        for (const prop in env) {\n          if (prop in xhr) {\n            try {\n              xhr[prop] = env[prop];\n            } catch (e) {\n\n              // noop\n            }}\n        }\n\n        xhr.open(env.method.toUpperCase(), url);\n\n        for (const header in env.headers) {\n          xhr.setRequestHeader(header, env.headers[header]);\n        }\n\n        on(xhr, 'load', () => {\n          if (xhr.status === 0 || xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n            resolve(xhr);\n          } else {\n            reject(\n            assign(Error(xhr.statusText), {\n              xhr,\n              status: xhr.status\n            }));\n\n          }\n        });\n\n        on(xhr, 'error', () => reject(assign(Error('Network Error'), { xhr })));\n        on(xhr, 'timeout', () => reject(assign(Error('Network Timeout'), { xhr })));\n\n        xhr.send(env.data);\n      });\n    }\n\n    function getImage(src, srcset, sizes) {\n      return new Promise((resolve, reject) => {\n        const img = new Image();\n\n        img.onerror = (e) => {\n          reject(e);\n        };\n        img.onload = () => {\n          resolve(img);\n        };\n\n        sizes && (img.sizes = sizes);\n        srcset && (img.srcset = srcset);\n        img.src = src;\n      });\n    }\n\n    const cssNumber = {\n      'animation-iteration-count': true,\n      'column-count': true,\n      'fill-opacity': true,\n      'flex-grow': true,\n      'flex-shrink': true,\n      'font-weight': true,\n      'line-height': true,\n      opacity: true,\n      order: true,\n      orphans: true,\n      'stroke-dasharray': true,\n      'stroke-dashoffset': true,\n      widows: true,\n      'z-index': true,\n      zoom: true\n    };\n\n    function css(element, property, value, priority = '') {\n      const elements = toNodes(element);\n      for (const element of elements) {\n        if (isString(property)) {\n          property = propName(property);\n\n          if (isUndefined(value)) {\n            return getComputedStyle(element).getPropertyValue(property);\n          } else {\n            element.style.setProperty(\n            property,\n            isNumeric(value) && !cssNumber[property] ?\n            `${value}px` :\n            value || isNumber(value) ?\n            value :\n            '',\n            priority);\n\n          }\n        } else if (isArray(property)) {\n          const props = {};\n          for (const prop of property) {\n            props[prop] = css(element, prop);\n          }\n          return props;\n        } else if (isObject(property)) {\n          priority = value;\n          each(property, (value, property) => css(element, property, value, priority));\n        }\n      }\n      return elements[0];\n    }\n\n    // https://drafts.csswg.org/cssom/#dom-cssstyledeclaration-setproperty\n    const propName = memoize((name) => vendorPropName(name));\n\n    function vendorPropName(name) {\n      if (startsWith(name, '--')) {\n        return name;\n      }\n\n      name = hyphenate(name);\n\n      const { style } = document.documentElement;\n\n      if (name in style) {\n        return name;\n      }\n\n      for (const prefix of ['webkit', 'moz']) {\n        const prefixedName = `-${prefix}-${name}`;\n        if (prefixedName in style) {\n          return prefixedName;\n        }\n      }\n    }\n\n    function addClass(element, ...args) {\n      apply$1(element, args, 'add');\n    }\n\n    function removeClass(element, ...args) {\n      apply$1(element, args, 'remove');\n    }\n\n    function removeClasses(element, cls) {\n      attr(element, 'class', (value) => (value || '').replace(new RegExp(`\\\\b${cls}\\\\b\\\\s?`, 'g'), ''));\n\n    }\n\n    function replaceClass(element, ...args) {\n      args[0] && removeClass(element, args[0]);\n      args[1] && addClass(element, args[1]);\n    }\n\n    function hasClass(element, cls) {\n      [cls] = getClasses(cls);\n      return !!cls && toNodes(element).some((node) => node.classList.contains(cls));\n    }\n\n    function toggleClass(element, cls, force) {\n      const classes = getClasses(cls);\n\n      if (!isUndefined(force)) {\n        force = !!force;\n      }\n\n      for (const node of toNodes(element)) {\n        for (const cls of classes) {\n          node.classList.toggle(cls, force);\n        }\n      }\n    }\n\n    function apply$1(element, args, fn) {\n      args = args.reduce((args, arg) => args.concat(getClasses(arg)), []);\n\n      for (const node of toNodes(element)) {\n        node.classList[fn](...args);\n      }\n    }\n\n    function getClasses(str) {\n      return String(str).split(/\\s|,/).filter(Boolean);\n    }\n\n    function transition$1(element, props, duration = 400, timing = 'linear') {\n      duration = Math.round(duration);\n      return Promise.all(\n      toNodes(element).map(\n      (element) => new Promise((resolve, reject) => {\n        for (const name in props) {\n          const value = css(element, name);\n          if (value === '') {\n            css(element, name, value);\n          }\n        }\n\n        const timer = setTimeout(() => trigger(element, 'transitionend'), duration);\n\n        once(\n        element,\n        'transitionend transitioncanceled',\n        ({ type }) => {\n          clearTimeout(timer);\n          removeClass(element, 'uk-transition');\n          css(element, {\n            transitionProperty: '',\n            transitionDuration: '',\n            transitionTimingFunction: ''\n          });\n          type === 'transitioncanceled' ? reject() : resolve(element);\n        },\n        { self: true });\n\n\n        addClass(element, 'uk-transition');\n        css(element, {\n          transitionProperty: Object.keys(props).map(propName).join(','),\n          transitionDuration: `${duration}ms`,\n          transitionTimingFunction: timing,\n          ...props\n        });\n      })));\n\n\n    }\n\n    const Transition = {\n      start: transition$1,\n\n      async stop(element) {\n        trigger(element, 'transitionend');\n        await Promise.resolve();\n      },\n\n      async cancel(element) {\n        trigger(element, 'transitioncanceled');\n        await Promise.resolve();\n      },\n\n      inProgress(element) {\n        return hasClass(element, 'uk-transition');\n      }\n    };\n\n    const animationPrefix = 'uk-animation-';\n\n    function animate$2(element, animation, duration = 200, origin, out) {\n      return Promise.all(\n      toNodes(element).map(\n      (element) => new Promise((resolve, reject) => {\n        trigger(element, 'animationcanceled');\n        const timer = setTimeout(() => trigger(element, 'animationend'), duration);\n\n        once(\n        element,\n        'animationend animationcanceled',\n        ({ type }) => {\n          clearTimeout(timer);\n\n          type === 'animationcanceled' ? reject() : resolve(element);\n\n          css(element, 'animationDuration', '');\n          removeClasses(element, `${animationPrefix}\\\\S*`);\n        },\n        { self: true });\n\n\n        css(element, 'animationDuration', `${duration}ms`);\n        addClass(element, animation, animationPrefix + (out ? 'leave' : 'enter'));\n\n        if (startsWith(animation, animationPrefix)) {\n          origin && addClass(element, `uk-transform-origin-${origin}`);\n          out && addClass(element, `${animationPrefix}reverse`);\n        }\n      })));\n\n\n    }\n\n    const inProgressRe = new RegExp(`${animationPrefix}(enter|leave)`);\n\n    const Animation = {\n      in: animate$2,\n\n      out(element, animation, duration, origin) {\n        return animate$2(element, animation, duration, origin, true);\n      },\n\n      inProgress(element) {\n        return inProgressRe.test(attr(element, 'class'));\n      },\n\n      cancel(element) {\n        trigger(element, 'animationcanceled');\n      }\n    };\n\n    function ready(fn) {\n      if (document.readyState !== 'loading') {\n        fn();\n        return;\n      }\n\n      once(document, 'DOMContentLoaded', fn);\n    }\n\n    function isTag(element, ...tagNames) {\n      return tagNames.some((tagName) => {var _element$tagName;return (element == null ? void 0 : (_element$tagName = element.tagName) == null ? void 0 : _element$tagName.toLowerCase()) === tagName.toLowerCase();});\n    }\n\n    function empty(element) {\n      element = $(element);\n      element.innerHTML = '';\n      return element;\n    }\n\n    function html(parent, html) {\n      return isUndefined(html) ? $(parent).innerHTML : append(empty(parent), html);\n    }\n\n    const prepend = applyFn('prepend');\n    const append = applyFn('append');\n    const before = applyFn('before');\n    const after = applyFn('after');\n\n    function applyFn(fn) {\n      return function (ref, element) {var _$;\n        const nodes = toNodes(isString(element) ? fragment(element) : element);\n        (_$ = $(ref)) == null ? void 0 : _$[fn](...nodes);\n        return unwrapSingle(nodes);\n      };\n    }\n\n    function remove$1(element) {\n      toNodes(element).forEach((element) => element.remove());\n    }\n\n    function wrapAll(element, structure) {\n      structure = toNode(before(element, structure));\n\n      while (structure.firstChild) {\n        structure = structure.firstChild;\n      }\n\n      append(structure, element);\n\n      return structure;\n    }\n\n    function wrapInner(element, structure) {\n      return toNodes(\n      toNodes(element).map((element) => element.hasChildNodes() ?\n      wrapAll(toNodes(element.childNodes), structure) :\n      append(element, structure)));\n\n\n    }\n\n    function unwrap(element) {\n      toNodes(element).\n      map(parent).\n      filter((value, index, self) => self.indexOf(value) === index).\n      forEach((parent) => parent.replaceWith(...parent.childNodes));\n    }\n\n    const fragmentRe = /^\\s*<(\\w+|!)[^>]*>/;\n    const singleTagRe = /^<(\\w+)\\s*\\/?>(?:<\\/\\1>)?$/;\n\n    function fragment(html) {\n      const matches = singleTagRe.exec(html);\n      if (matches) {\n        return document.createElement(matches[1]);\n      }\n\n      const container = document.createElement('div');\n      if (fragmentRe.test(html)) {\n        container.insertAdjacentHTML('beforeend', html.trim());\n      } else {\n        container.textContent = html;\n      }\n\n      return unwrapSingle(container.childNodes);\n    }\n\n    function unwrapSingle(nodes) {\n      return nodes.length > 1 ? nodes : nodes[0];\n    }\n\n    function apply(node, fn) {\n      if (!isElement(node)) {\n        return;\n      }\n\n      fn(node);\n      node = node.firstElementChild;\n      while (node) {\n        const next = node.nextElementSibling;\n        apply(node, fn);\n        node = next;\n      }\n    }\n\n    function $(selector, context) {\n      return isHtml(selector) ? toNode(fragment(selector)) : find(selector, context);\n    }\n\n    function $$(selector, context) {\n      return isHtml(selector) ? toNodes(fragment(selector)) : findAll(selector, context);\n    }\n\n    function isHtml(str) {\n      return isString(str) && startsWith(str.trim(), '<');\n    }\n\n    const dirs$1 = {\n      width: ['left', 'right'],\n      height: ['top', 'bottom']\n    };\n\n    function dimensions$1(element) {\n      const rect = isElement(element) ?\n      toNode(element).getBoundingClientRect() :\n      { height: height(element), width: width(element), top: 0, left: 0 };\n\n      return {\n        height: rect.height,\n        width: rect.width,\n        top: rect.top,\n        left: rect.left,\n        bottom: rect.top + rect.height,\n        right: rect.left + rect.width\n      };\n    }\n\n    function offset(element, coordinates) {\n      const currentOffset = dimensions$1(element);\n\n      if (element) {\n        const { scrollY, scrollX } = toWindow(element);\n        const offsetBy = { height: scrollY, width: scrollX };\n\n        for (const dir in dirs$1) {\n          for (const prop of dirs$1[dir]) {\n            currentOffset[prop] += offsetBy[dir];\n          }\n        }\n      }\n\n      if (!coordinates) {\n        return currentOffset;\n      }\n\n      const pos = css(element, 'position');\n\n      each(css(element, ['left', 'top']), (value, prop) => css(\n      element,\n      prop,\n      coordinates[prop] -\n      currentOffset[prop] +\n      toFloat(pos === 'absolute' && value === 'auto' ? position(element)[prop] : value)));\n\n\n    }\n\n    function position(element) {\n      let { top, left } = offset(element);\n\n      const {\n        ownerDocument: { body, documentElement },\n        offsetParent\n      } = toNode(element);\n      let parent = offsetParent || documentElement;\n\n      while (\n      parent && (\n      parent === body || parent === documentElement) &&\n      css(parent, 'position') === 'static')\n      {\n        parent = parent.parentNode;\n      }\n\n      if (isElement(parent)) {\n        const parentOffset = offset(parent);\n        top -= parentOffset.top + toFloat(css(parent, 'borderTopWidth'));\n        left -= parentOffset.left + toFloat(css(parent, 'borderLeftWidth'));\n      }\n\n      return {\n        top: top - toFloat(css(element, 'marginTop')),\n        left: left - toFloat(css(element, 'marginLeft'))\n      };\n    }\n\n    function offsetPosition(element) {\n      element = toNode(element);\n\n      const offset = [element.offsetTop, element.offsetLeft];\n\n      while (element = element.offsetParent) {\n        offset[0] += element.offsetTop + toFloat(css(element, `borderTopWidth`));\n        offset[1] += element.offsetLeft + toFloat(css(element, `borderLeftWidth`));\n\n        if (css(element, 'position') === 'fixed') {\n          const win = toWindow(element);\n          offset[0] += win.scrollY;\n          offset[1] += win.scrollX;\n          return offset;\n        }\n      }\n\n      return offset;\n    }\n\n    const height = dimension('height');\n    const width = dimension('width');\n\n    function dimension(prop) {\n      const propName = ucfirst(prop);\n      return (element, value) => {\n        if (isUndefined(value)) {\n          if (isWindow(element)) {\n            return element[`inner${propName}`];\n          }\n\n          if (isDocument(element)) {\n            const doc = element.documentElement;\n            return Math.max(doc[`offset${propName}`], doc[`scroll${propName}`]);\n          }\n\n          element = toNode(element);\n\n          value = css(element, prop);\n          value = value === 'auto' ? element[`offset${propName}`] : toFloat(value) || 0;\n\n          return value - boxModelAdjust(element, prop);\n        } else {\n          return css(\n          element,\n          prop,\n          !value && value !== 0 ? '' : +value + boxModelAdjust(element, prop) + 'px');\n\n        }\n      };\n    }\n\n    function boxModelAdjust(element, prop, sizing = 'border-box') {\n      return css(element, 'boxSizing') === sizing ?\n      sumBy(\n      dirs$1[prop].map(ucfirst),\n      (prop) => toFloat(css(element, `padding${prop}`)) +\n      toFloat(css(element, `border${prop}Width`))) :\n\n      0;\n    }\n\n    function flipPosition(pos) {\n      for (const dir in dirs$1) {\n        for (const i in dirs$1[dir]) {\n          if (dirs$1[dir][i] === pos) {\n            return dirs$1[dir][1 - i];\n          }\n        }\n      }\n      return pos;\n    }\n\n    function toPx(value, property = 'width', element = window, offsetDim = false) {\n      if (!isString(value)) {\n        return toFloat(value);\n      }\n\n      return sumBy(parseCalc(value), (value) => {\n        const unit = parseUnit(value);\n\n        return unit ?\n        percent(\n        unit === 'vh' ?\n        getViewportHeight() :\n        unit === 'vw' ?\n        width(toWindow(element)) :\n        offsetDim ?\n        element[`offset${ucfirst(property)}`] :\n        dimensions$1(element)[property],\n        value) :\n\n        value;\n      });\n    }\n\n    const calcRe = /-?\\d+(?:\\.\\d+)?(?:v[wh]|%|px)?/g;\n    const parseCalc = memoize((calc) => calc.toString().replace(/\\s/g, '').match(calcRe) || []);\n    const unitRe$1 = /(?:v[hw]|%)$/;\n    const parseUnit = memoize((str) => (str.match(unitRe$1) || [])[0]);\n\n    function percent(base, value) {\n      return base * toFloat(value) / 100;\n    }\n\n    let vh;\n    let vhEl;\n\n    function getViewportHeight() {\n      if (vh) {\n        return vh;\n      }\n      if (!vhEl) {\n        vhEl = $('<div>');\n        css(vhEl, {\n          height: '100vh',\n          position: 'fixed'\n        });\n        on(window, 'resize', () => vh = null);\n      }\n\n      append(document.body, vhEl);\n      vh = vhEl.clientHeight;\n      remove$1(vhEl);\n      return vh;\n    }\n\n    const inBrowser = typeof window !== 'undefined';\n    const isRtl = inBrowser && document.dir === 'rtl';\n\n    const hasTouch = inBrowser && 'ontouchstart' in window;\n    const hasPointerEvents = inBrowser && window.PointerEvent;\n\n    const pointerDown$1 = hasPointerEvents ? 'pointerdown' : hasTouch ? 'touchstart' : 'mousedown';\n    const pointerMove$1 = hasPointerEvents ? 'pointermove' : hasTouch ? 'touchmove' : 'mousemove';\n    const pointerUp$1 = hasPointerEvents ? 'pointerup' : hasTouch ? 'touchend' : 'mouseup';\n    const pointerEnter = hasPointerEvents ? 'pointerenter' : hasTouch ? '' : 'mouseenter';\n    const pointerLeave = hasPointerEvents ? 'pointerleave' : hasTouch ? '' : 'mouseleave';\n    const pointerCancel = hasPointerEvents ? 'pointercancel' : 'touchcancel';\n\n    /*\n        Based on:\n        Copyright (c) 2016 Wilson Page wilsonpage@me.com\n        https://github.com/wilsonpage/fastdom\n    */\n\n    const fastdom = {\n      reads: [],\n      writes: [],\n\n      read(task) {\n        this.reads.push(task);\n        scheduleFlush();\n        return task;\n      },\n\n      write(task) {\n        this.writes.push(task);\n        scheduleFlush();\n        return task;\n      },\n\n      clear(task) {\n        remove(this.reads, task);\n        remove(this.writes, task);\n      },\n\n      flush\n    };\n\n    function flush(recursion) {\n      runTasks(fastdom.reads);\n      runTasks(fastdom.writes.splice(0));\n\n      fastdom.scheduled = false;\n\n      if (fastdom.reads.length || fastdom.writes.length) {\n        scheduleFlush(recursion + 1);\n      }\n    }\n\n    const RECURSION_LIMIT = 4;\n    function scheduleFlush(recursion) {\n      if (fastdom.scheduled) {\n        return;\n      }\n\n      fastdom.scheduled = true;\n      if (recursion && recursion < RECURSION_LIMIT) {\n        Promise.resolve().then(() => flush(recursion));\n      } else {\n        requestAnimationFrame(() => flush(1));\n      }\n    }\n\n    function runTasks(tasks) {\n      let task;\n      while (task = tasks.shift()) {\n        try {\n          task();\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    }\n\n    function remove(array, item) {\n      const index = array.indexOf(item);\n      return ~index && array.splice(index, 1);\n    }\n\n    function MouseTracker() {}\n\n    MouseTracker.prototype = {\n      positions: [],\n\n      init() {\n        this.positions = [];\n\n        let position;\n        this.unbind = on(document, 'mousemove', (e) => position = getEventPos(e));\n        this.interval = setInterval(() => {\n          if (!position) {\n            return;\n          }\n\n          this.positions.push(position);\n\n          if (this.positions.length > 5) {\n            this.positions.shift();\n          }\n        }, 50);\n      },\n\n      cancel() {var _this$unbind;\n        (_this$unbind = this.unbind) == null ? void 0 : _this$unbind.call(this);\n        this.interval && clearInterval(this.interval);\n      },\n\n      movesTo(target) {\n        if (this.positions.length < 2) {\n          return false;\n        }\n\n        const p = target.getBoundingClientRect();\n        const { left, right, top, bottom } = p;\n\n        const [prevPosition] = this.positions;\n        const position = last(this.positions);\n        const path = [prevPosition, position];\n\n        if (pointInRect(position, p)) {\n          return false;\n        }\n\n        const diagonals = [\n        [\n        { x: left, y: top },\n        { x: right, y: bottom }],\n\n        [\n        { x: left, y: bottom },\n        { x: right, y: top }]];\n\n\n\n        return diagonals.some((diagonal) => {\n          const intersection = intersect(path, diagonal);\n          return intersection && pointInRect(intersection, p);\n        });\n      }\n    };\n\n    // Inspired by http://paulbourke.net/geometry/pointlineplane/\n    function intersect([{ x: x1, y: y1 }, { x: x2, y: y2 }], [{ x: x3, y: y3 }, { x: x4, y: y4 }]) {\n      const denominator = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n\n      // Lines are parallel\n      if (denominator === 0) {\n        return false;\n      }\n\n      const ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denominator;\n\n      if (ua < 0) {\n        return false;\n      }\n\n      // Return an object with the x and y coordinates of the intersection\n      return { x: x1 + ua * (x2 - x1), y: y1 + ua * (y2 - y1) };\n    }\n\n    function observeIntersection(targets, cb, options, intersecting = true) {\n      const observer = new IntersectionObserver(\n      intersecting ?\n      (entries, observer) => {\n        if (entries.some((entry) => entry.isIntersecting)) {\n          cb(entries, observer);\n        }\n      } :\n      cb,\n      options);\n\n      for (const el of toNodes(targets)) {\n        observer.observe(el);\n      }\n\n      return observer;\n    }\n\n    const hasResizeObserver = inBrowser && window.ResizeObserver;\n    function observeResize(targets, cb, options = { box: 'border-box' }) {\n      if (hasResizeObserver) {\n        return observe(ResizeObserver, targets, cb, options);\n      }\n\n      // Fallback Safari < 13.1\n      initResizeListener();\n      listeners.add(cb);\n\n      return {\n        disconnect() {\n          listeners.delete(cb);\n        }\n      };\n    }\n\n    let listeners;\n    function initResizeListener() {\n      if (listeners) {\n        return;\n      }\n\n      listeners = new Set();\n\n      // throttle 'resize'\n      let pendingResize;\n      const handleResize = () => {\n        if (pendingResize) {\n          return;\n        }\n        pendingResize = true;\n        requestAnimationFrame(() => pendingResize = false);\n        for (const listener of listeners) {\n          listener();\n        }\n      };\n\n      on(window, 'load resize', handleResize);\n      on(document, 'loadedmetadata load', handleResize, true);\n    }\n\n    function observeMutation(targets, cb, options) {\n      return observe(MutationObserver, targets, cb, options);\n    }\n\n    function observe(Observer, targets, cb, options) {\n      const observer = new Observer(cb);\n      for (const el of toNodes(targets)) {\n        observer.observe(el, options);\n      }\n\n      return observer;\n    }\n\n    const strats = {};\n\n    strats.events =\n    strats.created =\n    strats.beforeConnect =\n    strats.connected =\n    strats.beforeDisconnect =\n    strats.disconnected =\n    strats.destroy =\n    concatStrat;\n\n    // args strategy\n    strats.args = function (parentVal, childVal) {\n      return childVal !== false && concatStrat(childVal || parentVal);\n    };\n\n    // update strategy\n    strats.update = function (parentVal, childVal) {\n      return sortBy$1(\n      concatStrat(parentVal, isFunction(childVal) ? { read: childVal } : childVal),\n      'order');\n\n    };\n\n    // property strategy\n    strats.props = function (parentVal, childVal) {\n      if (isArray(childVal)) {\n        const value = {};\n        for (const key of childVal) {\n          value[key] = String;\n        }\n        childVal = value;\n      }\n\n      return strats.methods(parentVal, childVal);\n    };\n\n    // extend strategy\n    strats.computed = strats.methods = function (parentVal, childVal) {\n      return childVal ? parentVal ? { ...parentVal, ...childVal } : childVal : parentVal;\n    };\n\n    // data strategy\n    strats.data = function (parentVal, childVal, vm) {\n      if (!vm) {\n        if (!childVal) {\n          return parentVal;\n        }\n\n        if (!parentVal) {\n          return childVal;\n        }\n\n        return function (vm) {\n          return mergeFnData(parentVal, childVal, vm);\n        };\n      }\n\n      return mergeFnData(parentVal, childVal, vm);\n    };\n\n    function mergeFnData(parentVal, childVal, vm) {\n      return strats.computed(\n      isFunction(parentVal) ? parentVal.call(vm, vm) : parentVal,\n      isFunction(childVal) ? childVal.call(vm, vm) : childVal);\n\n    }\n\n    // concat strategy\n    function concatStrat(parentVal, childVal) {\n      parentVal = parentVal && !isArray(parentVal) ? [parentVal] : parentVal;\n\n      return childVal ?\n      parentVal ?\n      parentVal.concat(childVal) :\n      isArray(childVal) ?\n      childVal :\n      [childVal] :\n      parentVal;\n    }\n\n    // default strategy\n    function defaultStrat(parentVal, childVal) {\n      return isUndefined(childVal) ? parentVal : childVal;\n    }\n\n    function mergeOptions(parent, child, vm) {\n      const options = {};\n\n      if (isFunction(child)) {\n        child = child.options;\n      }\n\n      if (child.extends) {\n        parent = mergeOptions(parent, child.extends, vm);\n      }\n\n      if (child.mixins) {\n        for (const mixin of child.mixins) {\n          parent = mergeOptions(parent, mixin, vm);\n        }\n      }\n\n      for (const key in parent) {\n        mergeKey(key);\n      }\n\n      for (const key in child) {\n        if (!hasOwn(parent, key)) {\n          mergeKey(key);\n        }\n      }\n\n      function mergeKey(key) {\n        options[key] = (strats[key] || defaultStrat)(parent[key], child[key], vm);\n      }\n\n      return options;\n    }\n\n    function parseOptions(options, args = []) {\n      try {\n        return options ?\n        startsWith(options, '{') ?\n        JSON.parse(options) :\n        args.length && !includes(options, ':') ?\n        { [args[0]]: options } :\n        options.split(';').reduce((options, option) => {\n          const [key, value] = option.split(/:(.*)/);\n          if (key && !isUndefined(value)) {\n            options[key.trim()] = value.trim();\n          }\n          return options;\n        }, {}) :\n        {};\n      } catch (e) {\n        return {};\n      }\n    }\n\n    function play(el) {\n      if (isIFrame(el)) {\n        call(el, { func: 'playVideo', method: 'play' });\n      }\n\n      if (isHTML5(el)) {\n        try {\n          el.play().catch(noop);\n        } catch (e) {\n\n          // noop\n        }}\n    }\n\n    function pause(el) {\n      if (isIFrame(el)) {\n        call(el, { func: 'pauseVideo', method: 'pause' });\n      }\n\n      if (isHTML5(el)) {\n        el.pause();\n      }\n    }\n\n    function mute(el) {\n      if (isIFrame(el)) {\n        call(el, { func: 'mute', method: 'setVolume', value: 0 });\n      }\n\n      if (isHTML5(el)) {\n        el.muted = true;\n      }\n    }\n\n    function isVideo(el) {\n      return isHTML5(el) || isIFrame(el);\n    }\n\n    function isHTML5(el) {\n      return isTag(el, 'video');\n    }\n\n    function isIFrame(el) {\n      return isTag(el, 'iframe') && (isYoutube(el) || isVimeo(el));\n    }\n\n    function isYoutube(el) {\n      return !!el.src.match(\n      /\\/\\/.*?youtube(-nocookie)?\\.[a-z]+\\/(watch\\?v=[^&\\s]+|embed)|youtu\\.be\\/.*/);\n\n    }\n\n    function isVimeo(el) {\n      return !!el.src.match(/vimeo\\.com\\/video\\/.*/);\n    }\n\n    async function call(el, cmd) {\n      await enableApi(el);\n      post(el, cmd);\n    }\n\n    function post(el, cmd) {\n      try {\n        el.contentWindow.postMessage(JSON.stringify({ event: 'command', ...cmd }), '*');\n      } catch (e) {\n\n        // noop\n      }}\n\n    const stateKey = '_ukPlayer';\n    let counter = 0;\n    function enableApi(el) {\n      if (el[stateKey]) {\n        return el[stateKey];\n      }\n\n      const youtube = isYoutube(el);\n      const vimeo = isVimeo(el);\n\n      const id = ++counter;\n      let poller;\n\n      return el[stateKey] = new Promise((resolve) => {\n        youtube &&\n        once(el, 'load', () => {\n          const listener = () => post(el, { event: 'listening', id });\n          poller = setInterval(listener, 100);\n          listener();\n        });\n\n        once(window, 'message', resolve, false, ({ data }) => {\n          try {\n            data = JSON.parse(data);\n            return (\n              data && (\n              youtube && data.id === id && data.event === 'onReady' ||\n              vimeo && Number(data.player_id) === id));\n\n          } catch (e) {\n\n            // noop\n          }});\n\n        el.src = `${el.src}${includes(el.src, '?') ? '&' : '?'}${\n    youtube ? 'enablejsapi=1' : `api=1&player_id=${id}`\n    }`;\n      }).then(() => clearInterval(poller));\n    }\n\n    function isInView(element, offsetTop = 0, offsetLeft = 0) {\n      if (!isVisible(element)) {\n        return false;\n      }\n\n      return intersectRect(\n      ...overflowParents(element).\n      map((parent) => {\n        const { top, left, bottom, right } = offsetViewport(parent);\n\n        return {\n          top: top - offsetTop,\n          left: left - offsetLeft,\n          bottom: bottom + offsetTop,\n          right: right + offsetLeft\n        };\n      }).\n      concat(offset(element)));\n\n    }\n\n    function scrollIntoView(element, { offset: offsetBy = 0 } = {}) {\n      const parents = isVisible(element) ? scrollParents(element, false, ['hidden']) : [];\n      return parents.reduce(\n      (fn, scrollElement, i) => {\n        const { scrollTop, scrollHeight, offsetHeight } = scrollElement;\n        const viewport = offsetViewport(scrollElement);\n        const maxScroll = scrollHeight - viewport.height;\n        const { height: elHeight, top: elTop } = parents[i - 1] ?\n        offsetViewport(parents[i - 1]) :\n        offset(element);\n\n        let top = Math.ceil(elTop - viewport.top - offsetBy + scrollTop);\n\n        if (offsetBy > 0 && offsetHeight < elHeight + offsetBy) {\n          top += offsetBy;\n        } else {\n          offsetBy = 0;\n        }\n\n        if (top > maxScroll) {\n          offsetBy -= top - maxScroll;\n          top = maxScroll;\n        } else if (top < 0) {\n          offsetBy -= top;\n          top = 0;\n        }\n\n        return () => scrollTo(scrollElement, top - scrollTop).then(fn);\n      },\n      () => Promise.resolve())();\n\n\n      function scrollTo(element, top) {\n        return new Promise((resolve) => {\n          const scroll = element.scrollTop;\n          const duration = getDuration(Math.abs(top));\n          const start = Date.now();\n\n          (function step() {\n            const percent = ease(clamp((Date.now() - start) / duration));\n\n            element.scrollTop = scroll + top * percent;\n\n            // scroll more if we have not reached our destination\n            if (percent === 1) {\n              resolve();\n            } else {\n              requestAnimationFrame(step);\n            }\n          })();\n        });\n      }\n\n      function getDuration(dist) {\n        return 40 * Math.pow(dist, 0.375);\n      }\n\n      function ease(k) {\n        return 0.5 * (1 - Math.cos(Math.PI * k));\n      }\n    }\n\n    function scrolledOver(element, startOffset = 0, endOffset = 0) {\n      if (!isVisible(element)) {\n        return 0;\n      }\n\n      const [scrollElement] = scrollParents(element, true);\n      const { scrollHeight, scrollTop } = scrollElement;\n      const { height: viewportHeight } = offsetViewport(scrollElement);\n      const maxScroll = scrollHeight - viewportHeight;\n      const elementOffsetTop = offsetPosition(element)[0] - offsetPosition(scrollElement)[0];\n\n      const start = Math.max(0, elementOffsetTop - viewportHeight + startOffset);\n      const end = Math.min(maxScroll, elementOffsetTop + element.offsetHeight - endOffset);\n\n      return clamp((scrollTop - start) / (end - start));\n    }\n\n    function scrollParents(element, scrollable = false, props = []) {\n      const scrollEl = scrollingElement(element);\n\n      let ancestors = parents(element).reverse();\n      ancestors = ancestors.slice(ancestors.indexOf(scrollEl) + 1);\n\n      const fixedIndex = findIndex(ancestors, (el) => css(el, 'position') === 'fixed');\n      if (~fixedIndex) {\n        ancestors = ancestors.slice(fixedIndex);\n      }\n\n      return [scrollEl].\n      concat(\n      ancestors.filter(\n      (parent) => includes(['auto', 'scroll', ...props], css(parent, 'overflow')) && (\n      !scrollable || parent.scrollHeight > offsetViewport(parent).height))).\n\n\n      reverse();\n    }\n\n    function overflowParents(element) {\n      return scrollParents(element, false, ['hidden', 'clip']);\n    }\n\n    function offsetViewport(scrollElement) {\n      const window = toWindow(scrollElement);\n      const {\n        document: { documentElement }\n      } = window;\n      let viewportElement =\n      scrollElement === scrollingElement(scrollElement) ? window : scrollElement;\n\n      const { visualViewport } = window;\n      if (isWindow(viewportElement) && visualViewport) {\n        let { height, width, scale, pageTop: top, pageLeft: left } = visualViewport;\n        height = Math.round(height * scale);\n        width = Math.round(width * scale);\n        return { height, width, top, left, bottom: top + height, right: left + width };\n      }\n\n      let rect = offset(viewportElement);\n      if (css(viewportElement, 'display') === 'inline') {\n        return rect;\n      }\n\n      for (let [prop, dir, start, end] of [\n      ['width', 'x', 'left', 'right'],\n      ['height', 'y', 'top', 'bottom']])\n      {\n        if (isWindow(viewportElement)) {\n          // iOS 12 returns <body> as scrollingElement\n          viewportElement = documentElement;\n        } else {\n          rect[start] += toFloat(css(viewportElement, `border-${start}-width`));\n        }\n        rect[prop] = rect[dir] = viewportElement[`client${ucfirst(prop)}`];\n        rect[end] = rect[prop] + rect[start];\n      }\n      return rect;\n    }\n\n    function scrollingElement(element) {\n      return toWindow(element).document.scrollingElement;\n    }\n\n    const dirs = [\n    ['width', 'x', 'left', 'right'],\n    ['height', 'y', 'top', 'bottom']];\n\n\n    function positionAt(element, target, options) {\n      options = {\n        attach: {\n          element: ['left', 'top'],\n          target: ['left', 'top'],\n          ...options.attach\n        },\n        offset: [0, 0],\n        placement: [],\n        ...options\n      };\n\n      if (!isArray(target)) {\n        target = [target, target];\n      }\n\n      offset(element, getPosition(element, target, options));\n    }\n\n    function getPosition(element, target, options) {\n      const position = attachTo(element, target, options);\n      const { boundary, viewportOffset = 0, placement } = options;\n\n      let offsetPosition = position;\n      for (const [i, [prop,, start, end]] of Object.entries(dirs)) {\n        const viewport = getViewport$2(element, target[i], viewportOffset, boundary, i);\n\n        if (isWithin(position, viewport, i)) {\n          continue;\n        }\n\n        let offsetBy = 0;\n\n        // Flip\n        if (placement[i] === 'flip') {\n          const attach = options.attach.target[i];\n          if (\n          attach === end && position[end] <= viewport[end] ||\n          attach === start && position[start] >= viewport[start])\n          {\n            continue;\n          }\n\n          offsetBy = flip(element, target, options, i)[start] - position[start];\n\n          const scrollArea = getScrollArea(element, target[i], viewportOffset, i);\n\n          if (!isWithin(applyOffset(position, offsetBy, i), scrollArea, i)) {\n            if (isWithin(position, scrollArea, i)) {\n              continue;\n            }\n\n            if (options.recursion) {\n              return false;\n            }\n\n            const newPos = flipAxis(element, target, options);\n\n            if (newPos && isWithin(newPos, scrollArea, 1 - i)) {\n              return newPos;\n            }\n\n            continue;\n          }\n\n          // Shift\n        } else if (placement[i] === 'shift') {\n          const targetDim = offset(target[i]);\n          const { offset: elOffset } = options;\n          offsetBy =\n          clamp(\n          clamp(position[start], viewport[start], viewport[end] - position[prop]),\n          targetDim[start] - position[prop] + elOffset[i],\n          targetDim[end] - elOffset[i]) -\n          position[start];\n        }\n\n        offsetPosition = applyOffset(offsetPosition, offsetBy, i);\n      }\n\n      return offsetPosition;\n    }\n\n    function attachTo(element, target, options) {\n      let { attach, offset: offsetBy } = {\n        attach: {\n          element: ['left', 'top'],\n          target: ['left', 'top'],\n          ...options.attach\n        },\n        offset: [0, 0],\n        ...options\n      };\n\n      let elOffset = offset(element);\n\n      for (const [i, [prop,, start, end]] of Object.entries(dirs)) {\n        const targetOffset =\n        attach.target[i] === attach.element[i] ? offsetViewport(target[i]) : offset(target[i]);\n\n        elOffset = applyOffset(\n        elOffset,\n        targetOffset[start] -\n        elOffset[start] +\n        moveBy(attach.target[i], end, targetOffset[prop]) -\n        moveBy(attach.element[i], end, elOffset[prop]) +\n        +offsetBy[i],\n        i);\n\n      }\n      return elOffset;\n    }\n\n    function applyOffset(position, offset, i) {\n      const [, dir, start, end] = dirs[i];\n      const newPos = { ...position };\n      newPos[start] = position[dir] = position[start] + offset;\n      newPos[end] += offset;\n      return newPos;\n    }\n\n    function moveBy(attach, end, dim) {\n      return attach === 'center' ? dim / 2 : attach === end ? dim : 0;\n    }\n\n    function getViewport$2(element, target, viewportOffset, boundary, i) {\n      let viewport = getIntersectionArea(...commonScrollParents(element, target).map(offsetViewport));\n\n      if (viewportOffset) {\n        viewport[dirs[i][2]] += viewportOffset;\n        viewport[dirs[i][3]] -= viewportOffset;\n      }\n\n      if (boundary) {\n        viewport = getIntersectionArea(\n        viewport,\n        offset(isArray(boundary) ? boundary[i] : boundary));\n\n      }\n\n      return viewport;\n    }\n\n    function getScrollArea(element, target, viewportOffset, i) {\n      const [prop, axis, start, end] = dirs[i];\n      const [scrollElement] = commonScrollParents(element, target);\n      const viewport = offsetViewport(scrollElement);\n\n      if (['auto', 'scroll'].includes(css(scrollElement, `overflow-${axis}`))) {\n        viewport[start] -= scrollElement[`scroll${ucfirst(start)}`];\n        viewport[end] = viewport[start] + scrollElement[`scroll${ucfirst(prop)}`];\n      }\n\n      viewport[start] += viewportOffset;\n      viewport[end] -= viewportOffset;\n\n      return viewport;\n    }\n\n    function commonScrollParents(element, target) {\n      return overflowParents(target).filter((parent) => within(element, parent));\n    }\n\n    function getIntersectionArea(...rects) {\n      let area = {};\n      for (const rect of rects) {\n        for (const [,, start, end] of dirs) {\n          area[start] = Math.max(area[start] || 0, rect[start]);\n          area[end] = Math.min(...[area[end], rect[end]].filter(Boolean));\n        }\n      }\n      return area;\n    }\n\n    function isWithin(positionA, positionB, i) {\n      const [,, start, end] = dirs[i];\n      return positionA[start] >= positionB[start] && positionA[end] <= positionB[end];\n    }\n\n    function flip(element, target, { offset, attach }, i) {\n      return attachTo(element, target, {\n        attach: {\n          element: flipAttach(attach.element, i),\n          target: flipAttach(attach.target, i)\n        },\n        offset: flipOffset(offset, i)\n      });\n    }\n\n    function flipAxis(element, target, options) {\n      return getPosition(element, target, {\n        ...options,\n        attach: {\n          element: options.attach.element.map(flipAttachAxis).reverse(),\n          target: options.attach.target.map(flipAttachAxis).reverse()\n        },\n        offset: options.offset.reverse(),\n        placement: options.placement.reverse(),\n        recursion: true\n      });\n    }\n\n    function flipAttach(attach, i) {\n      const newAttach = [...attach];\n      const index = dirs[i].indexOf(attach[i]);\n      if (~index) {\n        newAttach[i] = dirs[i][1 - index % 2 + 2];\n      }\n      return newAttach;\n    }\n\n    function flipAttachAxis(prop) {\n      for (let i = 0; i < dirs.length; i++) {\n        const index = dirs[i].indexOf(prop);\n        if (~index) {\n          return dirs[1 - i][index % 2 + 2];\n        }\n      }\n    }\n\n    function flipOffset(offset, i) {\n      offset = [...offset];\n      offset[i] *= -1;\n      return offset;\n    }\n\n    var util = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        $: $,\n        $$: $$,\n        Animation: Animation,\n        Deferred: Deferred,\n        Dimensions: Dimensions,\n        MouseTracker: MouseTracker,\n        Transition: Transition,\n        addClass: addClass,\n        after: after,\n        ajax: ajax,\n        append: append,\n        apply: apply,\n        assign: assign,\n        attr: attr,\n        before: before,\n        boxModelAdjust: boxModelAdjust,\n        camelize: camelize,\n        children: children,\n        clamp: clamp,\n        closest: closest,\n        createEvent: createEvent,\n        css: css,\n        data: data,\n        dimensions: dimensions$1,\n        each: each,\n        empty: empty,\n        endsWith: endsWith,\n        escape: escape,\n        fastdom: fastdom,\n        filter: filter$1,\n        find: find,\n        findAll: findAll,\n        findIndex: findIndex,\n        flipPosition: flipPosition,\n        fragment: fragment,\n        getEventPos: getEventPos,\n        getImage: getImage,\n        getIndex: getIndex,\n        hasAttr: hasAttr,\n        hasClass: hasClass,\n        hasOwn: hasOwn,\n        hasTouch: hasTouch,\n        height: height,\n        html: html,\n        hyphenate: hyphenate,\n        inBrowser: inBrowser,\n        includes: includes,\n        index: index,\n        intersectRect: intersectRect,\n        isArray: isArray,\n        isBoolean: isBoolean,\n        isDocument: isDocument,\n        isElement: isElement,\n        isEmpty: isEmpty,\n        isEqual: isEqual,\n        isFocusable: isFocusable,\n        isFunction: isFunction,\n        isInView: isInView,\n        isInput: isInput,\n        isNode: isNode,\n        isNumber: isNumber,\n        isNumeric: isNumeric,\n        isObject: isObject,\n        isPlainObject: isPlainObject,\n        isRtl: isRtl,\n        isString: isString,\n        isTag: isTag,\n        isTouch: isTouch,\n        isUndefined: isUndefined,\n        isVideo: isVideo,\n        isVisible: isVisible,\n        isVoidElement: isVoidElement,\n        isWindow: isWindow,\n        last: last,\n        matches: matches,\n        memoize: memoize,\n        mergeOptions: mergeOptions,\n        mute: mute,\n        noop: noop,\n        observeIntersection: observeIntersection,\n        observeMutation: observeMutation,\n        observeResize: observeResize,\n        off: off,\n        offset: offset,\n        offsetPosition: offsetPosition,\n        offsetViewport: offsetViewport,\n        on: on,\n        once: once,\n        overflowParents: overflowParents,\n        parent: parent,\n        parents: parents,\n        parseOptions: parseOptions,\n        pause: pause,\n        play: play,\n        pointInRect: pointInRect,\n        pointerCancel: pointerCancel,\n        pointerDown: pointerDown$1,\n        pointerEnter: pointerEnter,\n        pointerLeave: pointerLeave,\n        pointerMove: pointerMove$1,\n        pointerUp: pointerUp$1,\n        position: position,\n        positionAt: positionAt,\n        prepend: prepend,\n        propName: propName,\n        query: query,\n        queryAll: queryAll,\n        ready: ready,\n        remove: remove$1,\n        removeAttr: removeAttr,\n        removeClass: removeClass,\n        removeClasses: removeClasses,\n        replaceClass: replaceClass,\n        scrollIntoView: scrollIntoView,\n        scrollParents: scrollParents,\n        scrolledOver: scrolledOver,\n        selFocusable: selFocusable,\n        selInput: selInput,\n        sortBy: sortBy$1,\n        startsWith: startsWith,\n        sumBy: sumBy,\n        swap: swap,\n        toArray: toArray,\n        toBoolean: toBoolean,\n        toEventTargets: toEventTargets,\n        toFloat: toFloat,\n        toNode: toNode,\n        toNodes: toNodes,\n        toNumber: toNumber,\n        toPx: toPx,\n        toWindow: toWindow,\n        toggleClass: toggleClass,\n        trigger: trigger,\n        ucfirst: ucfirst,\n        uniqueBy: uniqueBy,\n        unwrap: unwrap,\n        width: width,\n        within: within,\n        wrapAll: wrapAll,\n        wrapInner: wrapInner\n    });\n\n    function globalAPI (UIkit) {\n      const DATA = UIkit.data;\n\n      UIkit.use = function (plugin) {\n        if (plugin.installed) {\n          return;\n        }\n\n        plugin.call(null, this);\n        plugin.installed = true;\n\n        return this;\n      };\n\n      UIkit.mixin = function (mixin, component) {\n        component = (isString(component) ? UIkit.component(component) : component) || this;\n        component.options = mergeOptions(component.options, mixin);\n      };\n\n      UIkit.extend = function (options) {\n        options = options || {};\n\n        const Super = this;\n        const Sub = function UIkitComponent(options) {\n          this._init(options);\n        };\n\n        Sub.prototype = Object.create(Super.prototype);\n        Sub.prototype.constructor = Sub;\n        Sub.options = mergeOptions(Super.options, options);\n\n        Sub.super = Super;\n        Sub.extend = Super.extend;\n\n        return Sub;\n      };\n\n      UIkit.update = function (element, e) {\n        element = element ? toNode(element) : document.body;\n\n        for (const parentEl of parents(element).reverse()) {\n          update(parentEl[DATA], e);\n        }\n\n        apply(element, (element) => update(element[DATA], e));\n      };\n\n      let container;\n      Object.defineProperty(UIkit, 'container', {\n        get() {\n          return container || document.body;\n        },\n\n        set(element) {\n          container = $(element);\n        }\n      });\n\n      function update(data, e) {\n        if (!data) {\n          return;\n        }\n\n        for (const name in data) {\n          if (data[name]._connected) {\n            data[name]._callUpdate(e);\n          }\n        }\n      }\n    }\n\n    function hooksAPI (UIkit) {\n      UIkit.prototype._callHook = function (hook) {var _this$$options$hook;\n        (_this$$options$hook = this.$options[hook]) == null ? void 0 : _this$$options$hook.forEach((handler) => handler.call(this));\n      };\n\n      UIkit.prototype._callConnected = function () {\n        if (this._connected) {\n          return;\n        }\n\n        this._data = {};\n        this._computed = {};\n\n        this._initProps();\n\n        this._callHook('beforeConnect');\n        this._connected = true;\n\n        this._initEvents();\n        this._initObservers();\n\n        this._callHook('connected');\n        this._callUpdate();\n      };\n\n      UIkit.prototype._callDisconnected = function () {\n        if (!this._connected) {\n          return;\n        }\n\n        this._callHook('beforeDisconnect');\n        this._disconnectObservers();\n        this._unbindEvents();\n        this._callHook('disconnected');\n\n        this._connected = false;\n        delete this._watch;\n      };\n\n      UIkit.prototype._callUpdate = function (e = 'update') {\n        if (!this._connected) {\n          return;\n        }\n\n        if (e === 'update' || e === 'resize') {\n          this._callWatches();\n        }\n\n        if (!this.$options.update) {\n          return;\n        }\n\n        if (!this._updates) {\n          this._updates = new Set();\n          fastdom.read(() => {\n            if (this._connected) {\n              runUpdates.call(this, this._updates);\n            }\n            delete this._updates;\n          });\n        }\n\n        this._updates.add(e.type || e);\n      };\n\n      UIkit.prototype._callWatches = function () {\n        if (this._watch) {\n          return;\n        }\n\n        const initial = !hasOwn(this, '_watch');\n\n        this._watch = fastdom.read(() => {\n          if (this._connected) {\n            runWatches.call(this, initial);\n          }\n          this._watch = null;\n        });\n      };\n\n      function runUpdates(types) {\n        for (const { read, write, events = [] } of this.$options.update) {\n          if (!types.has('update') && !events.some((type) => types.has(type))) {\n            continue;\n          }\n\n          let result;\n          if (read) {\n            result = read.call(this, this._data, types);\n\n            if (result && isPlainObject(result)) {\n              assign(this._data, result);\n            }\n          }\n\n          if (write && result !== false) {\n            fastdom.write(() => {\n              if (this._connected) {\n                write.call(this, this._data, types);\n              }\n            });\n          }\n        }\n      }\n\n      function runWatches(initial) {\n        const {\n          $options: { computed }\n        } = this;\n        const values = { ...this._computed };\n        this._computed = {};\n\n        for (const key in computed) {\n          const { watch, immediate } = computed[key];\n          if (\n          watch && (\n          initial && immediate ||\n          hasOwn(values, key) && !isEqual(values[key], this[key])))\n          {\n            watch.call(this, this[key], values[key]);\n          }\n        }\n      }\n    }\n\n    function stateAPI (UIkit) {\n      let uid = 0;\n\n      UIkit.prototype._init = function (options) {\n        options = options || {};\n        options.data = normalizeData(options, this.constructor.options);\n\n        this.$options = mergeOptions(this.constructor.options, options, this);\n        this.$el = null;\n        this.$props = {};\n\n        this._uid = uid++;\n        this._initData();\n        this._initMethods();\n        this._initComputeds();\n        this._callHook('created');\n\n        if (options.el) {\n          this.$mount(options.el);\n        }\n      };\n\n      UIkit.prototype._initData = function () {\n        const { data = {} } = this.$options;\n\n        for (const key in data) {\n          this.$props[key] = this[key] = data[key];\n        }\n      };\n\n      UIkit.prototype._initMethods = function () {\n        const { methods } = this.$options;\n\n        if (methods) {\n          for (const key in methods) {\n            this[key] = methods[key].bind(this);\n          }\n        }\n      };\n\n      UIkit.prototype._initComputeds = function () {\n        const { computed } = this.$options;\n\n        this._computed = {};\n\n        if (computed) {\n          for (const key in computed) {\n            registerComputed(this, key, computed[key]);\n          }\n        }\n      };\n\n      UIkit.prototype._initProps = function (props) {\n        let key;\n\n        props = props || getProps$1(this.$options);\n\n        for (key in props) {\n          if (!isUndefined(props[key])) {\n            this.$props[key] = props[key];\n          }\n        }\n\n        const exclude = [this.$options.computed, this.$options.methods];\n        for (key in this.$props) {\n          if (key in props && notIn(exclude, key)) {\n            this[key] = this.$props[key];\n          }\n        }\n      };\n\n      UIkit.prototype._initEvents = function () {\n        this._events = [];\n        for (const event of this.$options.events || []) {\n          if (hasOwn(event, 'handler')) {\n            registerEvent(this, event);\n          } else {\n            for (const key in event) {\n              registerEvent(this, event[key], key);\n            }\n          }\n        }\n      };\n\n      UIkit.prototype._unbindEvents = function () {\n        this._events.forEach((unbind) => unbind());\n        delete this._events;\n      };\n\n      UIkit.prototype._initObservers = function () {\n        this._observers = [initPropsObserver(this), initChildListObserver(this)];\n      };\n\n      UIkit.prototype.registerObserver = function (...observer) {\n        this._observers.push(...observer);\n      };\n\n      UIkit.prototype._disconnectObservers = function () {\n        this._observers.forEach((observer) => observer == null ? void 0 : observer.disconnect());\n      };\n    }\n\n    function getProps$1(opts) {\n      const data$1 = {};\n      const { args = [], props = {}, el, id } = opts;\n\n      if (!props) {\n        return data$1;\n      }\n\n      for (const key in props) {\n        const prop = hyphenate(key);\n        let value = data(el, prop);\n\n        if (isUndefined(value)) {\n          continue;\n        }\n\n        value = props[key] === Boolean && value === '' ? true : coerce$1(props[key], value);\n\n        if (prop === 'target' && startsWith(value, '_')) {\n          continue;\n        }\n\n        data$1[key] = value;\n      }\n\n      const options = parseOptions(data(el, id), args);\n\n      for (const key in options) {\n        const prop = camelize(key);\n        if (!isUndefined(props[prop])) {\n          data$1[prop] = coerce$1(props[prop], options[key]);\n        }\n      }\n\n      return data$1;\n    }\n\n    function registerComputed(component, key, cb) {\n      Object.defineProperty(component, key, {\n        enumerable: true,\n\n        get() {\n          const { _computed, $props, $el } = component;\n\n          if (!hasOwn(_computed, key)) {\n            _computed[key] = (cb.get || cb).call(component, $props, $el);\n          }\n\n          return _computed[key];\n        },\n\n        set(value) {\n          const { _computed } = component;\n\n          _computed[key] = cb.set ? cb.set.call(component, value) : value;\n\n          if (isUndefined(_computed[key])) {\n            delete _computed[key];\n          }\n        }\n      });\n    }\n\n    function registerEvent(component, event, key) {\n      if (!isPlainObject(event)) {\n        event = { name: key, handler: event };\n      }\n\n      let { name, el, handler, capture, passive, delegate, filter, self } = event;\n      el = isFunction(el) ? el.call(component) : el || component.$el;\n\n      if (isArray(el)) {\n        el.forEach((el) => registerEvent(component, { ...event, el }, key));\n        return;\n      }\n\n      if (!el || filter && !filter.call(component)) {\n        return;\n      }\n\n      component._events.push(\n      on(\n      el,\n      name,\n      delegate ? isString(delegate) ? delegate : delegate.call(component) : null,\n      isString(handler) ? component[handler] : handler.bind(component),\n      { passive, capture, self }));\n\n\n    }\n\n    function notIn(options, key) {\n      return options.every((arr) => !arr || !hasOwn(arr, key));\n    }\n\n    function coerce$1(type, value) {\n      if (type === Boolean) {\n        return toBoolean(value);\n      } else if (type === Number) {\n        return toNumber(value);\n      } else if (type === 'list') {\n        return toList(value);\n      }\n\n      return type ? type(value) : value;\n    }\n\n    function toList(value) {\n      return isArray(value) ?\n      value :\n      isString(value) ?\n      value.\n      split(/,(?![^(]*\\))/).\n      map((value) => isNumeric(value) ? toNumber(value) : toBoolean(value.trim())) :\n      [value];\n    }\n\n    function normalizeData({ data = {} }, { args = [], props = {} }) {\n      if (isArray(data)) {\n        data = data.slice(0, args.length).reduce((data, value, index) => {\n          if (isPlainObject(value)) {\n            assign(data, value);\n          } else {\n            data[args[index]] = value;\n          }\n          return data;\n        }, {});\n      }\n\n      for (const key in data) {\n        if (isUndefined(data[key])) {\n          delete data[key];\n        } else if (props[key]) {\n          data[key] = coerce$1(props[key], data[key]);\n        }\n      }\n\n      return data;\n    }\n\n    function initChildListObserver(component) {\n      let { el, computed } = component.$options;\n\n      if (!computed) {\n        return;\n      }\n\n      for (const key in computed) {\n        if (computed[key].document) {\n          el = el.ownerDocument;\n          break;\n        }\n      }\n\n      const observer = new MutationObserver(() => component._callWatches());\n      observer.observe(el, {\n        childList: true,\n        subtree: true\n      });\n\n      return observer;\n    }\n\n    function initPropsObserver(component) {\n      const { $options, $props } = component;\n      const { id, attrs, props, el } = $options;\n\n      if (!props || attrs === false) {\n        return;\n      }\n\n      const attributes = isArray(attrs) ? attrs : Object.keys(props);\n      const filter = attributes.map((key) => hyphenate(key)).concat(id);\n\n      const observer = new MutationObserver((records) => {\n        const data = getProps$1($options);\n        if (\n        records.some(({ attributeName }) => {\n          const prop = attributeName.replace('data-', '');\n          return (prop === id ? attributes : [camelize(prop), camelize(attributeName)]).some(\n          (prop) => !isUndefined(data[prop]) && data[prop] !== $props[prop]);\n\n        }))\n        {\n          component.$reset();\n        }\n      });\n\n      observer.observe(el, {\n        attributes: true,\n        attributeFilter: filter.concat(filter.map((key) => `data-${key}`))\n      });\n\n      return observer;\n    }\n\n    function instanceAPI (UIkit) {\n      const DATA = UIkit.data;\n\n      UIkit.prototype.$create = function (component, element, data) {\n        return UIkit[component](element, data);\n      };\n\n      UIkit.prototype.$mount = function (el) {\n        const { name } = this.$options;\n\n        if (!el[DATA]) {\n          el[DATA] = {};\n        }\n\n        if (el[DATA][name]) {\n          return;\n        }\n\n        el[DATA][name] = this;\n\n        this.$el = this.$options.el = this.$options.el || el;\n\n        if (within(el, document)) {\n          this._callConnected();\n        }\n      };\n\n      UIkit.prototype.$reset = function () {\n        this._callDisconnected();\n        this._callConnected();\n      };\n\n      UIkit.prototype.$destroy = function (removeEl = false) {\n        const { el, name } = this.$options;\n\n        if (el) {\n          this._callDisconnected();\n        }\n\n        this._callHook('destroy');\n\n        if (!(el != null && el[DATA])) {\n          return;\n        }\n\n        delete el[DATA][name];\n\n        if (!isEmpty(el[DATA])) {\n          delete el[DATA];\n        }\n\n        if (removeEl) {\n          remove$1(this.$el);\n        }\n      };\n\n      UIkit.prototype.$emit = function (e) {\n        this._callUpdate(e);\n      };\n\n      UIkit.prototype.$update = function (element = this.$el, e) {\n        UIkit.update(element, e);\n      };\n\n      UIkit.prototype.$getComponent = UIkit.getComponent;\n\n      Object.defineProperty(\n      UIkit.prototype,\n      '$container',\n      Object.getOwnPropertyDescriptor(UIkit, 'container'));\n\n    }\n\n    const components$3 = {};\n    function componentAPI (UIkit) {\n      const { data: DATA, prefix: PREFIX } = UIkit;\n\n      UIkit.component = function (name, options) {\n        name = hyphenate(name);\n        const id = PREFIX + name;\n\n        if (!options) {\n          if (isPlainObject(components$3[id])) {\n            components$3[id] = components$3[`data-${id}`] = UIkit.extend(components$3[id]);\n          }\n\n          return components$3[id];\n        }\n\n        name = camelize(name);\n\n        UIkit[name] = function (element, data) {\n          const component = UIkit.component(name);\n\n          return component.options.functional ?\n          new component({ data: isPlainObject(element) ? element : [...arguments] }) :\n          element ?\n          $$(element).map(init)[0] :\n          init();\n\n          function init(element) {\n            const instance = UIkit.getComponent(element, name);\n\n            if (instance) {\n              if (data) {\n                instance.$destroy();\n              } else {\n                return instance;\n              }\n            }\n\n            return new component({ el: element, data });\n          }\n        };\n\n        const opt = isPlainObject(options) ? { ...options } : options.options;\n\n        opt.id = id;\n        opt.name = name;\n\n        opt.install == null ? void 0 : opt.install(UIkit, opt, name);\n\n        if (UIkit._initialized && !opt.functional) {\n          requestAnimationFrame(() => UIkit[name](`[${id}],[data-${id}]`));\n        }\n\n        return components$3[id] = components$3[`data-${id}`] = isPlainObject(options) ? opt : options;\n      };\n\n      UIkit.getComponents = (element) => (element == null ? void 0 : element[DATA]) || {};\n      UIkit.getComponent = (element, name) => UIkit.getComponents(element)[name];\n\n      UIkit.connect = (node) => {\n        if (node[DATA]) {\n          for (const name in node[DATA]) {\n            node[DATA][name]._callConnected();\n          }\n        }\n\n        for (const attribute of node.getAttributeNames()) {\n          const name = getComponentName(attribute);\n          name && UIkit[name](node);\n        }\n      };\n\n      UIkit.disconnect = (node) => {\n        for (const name in node[DATA]) {\n          node[DATA][name]._callDisconnected();\n        }\n      };\n    }\n\n    function getComponentName(attribute) {\n      const cmp = components$3[attribute];\n      return cmp && (isPlainObject(cmp) ? cmp : cmp.options).name;\n    }\n\n    const UIkit = function (options) {\n      this._init(options);\n    };\n\n    UIkit.util = util;\n    UIkit.data = '__uikit__';\n    UIkit.prefix = 'uk-';\n    UIkit.options = {};\n    UIkit.version = '3.15.23';\n\n    globalAPI(UIkit);\n    hooksAPI(UIkit);\n    stateAPI(UIkit);\n    componentAPI(UIkit);\n    instanceAPI(UIkit);\n\n    function boot (UIkit) {\n      const { connect, disconnect } = UIkit;\n\n      if (!inBrowser || !window.MutationObserver) {\n        return;\n      }\n\n      requestAnimationFrame(function () {\n        trigger(document, 'uikit:init', UIkit);\n\n        if (document.body) {\n          apply(document.body, connect);\n        }\n\n        new MutationObserver((records) => records.forEach(applyChildListMutation)).observe(\n        document,\n        {\n          childList: true,\n          subtree: true\n        });\n\n\n        new MutationObserver((records) => records.forEach(applyAttributeMutation)).observe(\n        document,\n        {\n          attributes: true,\n          subtree: true\n        });\n\n\n        UIkit._initialized = true;\n      });\n\n      function applyChildListMutation({ addedNodes, removedNodes }) {\n        for (const node of addedNodes) {\n          apply(node, connect);\n        }\n\n        for (const node of removedNodes) {\n          apply(node, disconnect);\n        }\n      }\n\n      function applyAttributeMutation({ target, attributeName }) {\n        const name = getComponentName(attributeName);\n\n        if (name) {var _UIkit$getComponent;\n          if (hasAttr(target, attributeName)) {\n            UIkit[name](target);\n            return;\n          }\n\n          (_UIkit$getComponent = UIkit.getComponent(target, name)) == null ? void 0 : _UIkit$getComponent.$destroy();\n        }\n      }\n    }\n\n    var Class = {\n      connected() {\n        addClass(this.$el, this.$options.id);\n      }\n    };\n\n    var Lazyload = {\n      data: {\n        preload: 5\n      },\n\n      methods: {\n        lazyload(observeTargets = this.$el, targets = this.$el) {\n          this.registerObserver(\n          observeIntersection(observeTargets, (entries, observer) => {\n            for (const el of toNodes(isFunction(targets) ? targets() : targets)) {\n              $$('[loading=\"lazy\"]', el).\n              slice(0, this.preload - 1).\n              forEach((el) => removeAttr(el, 'loading'));\n            }\n\n            for (const el of entries.\n            filter(({ isIntersecting }) => isIntersecting).\n            map(({ target }) => target)) {\n              observer.unobserve(el);\n            }\n          }));\n\n        }\n      }\n    };\n\n    var Togglable = {\n      props: {\n        cls: Boolean,\n        animation: 'list',\n        duration: Number,\n        velocity: Number,\n        origin: String,\n        transition: String\n      },\n\n      data: {\n        cls: false,\n        animation: [false],\n        duration: 200,\n        velocity: 0.2,\n        origin: false,\n        transition: 'ease',\n        clsEnter: 'uk-togglabe-enter',\n        clsLeave: 'uk-togglabe-leave'\n      },\n\n      computed: {\n        hasAnimation({ animation }) {\n          return !!animation[0];\n        },\n\n        hasTransition({ animation }) {\n          return ['slide', 'reveal'].some((transition) => startsWith(animation[0], transition));\n        }\n      },\n\n      methods: {\n        toggleElement(targets, toggle, animate) {\n          return new Promise((resolve) => Promise.all(\n          toNodes(targets).map((el) => {\n            const show = isBoolean(toggle) ? toggle : !this.isToggled(el);\n\n            if (!trigger(el, `before${show ? 'show' : 'hide'}`, [this])) {\n              return Promise.reject();\n            }\n\n            const promise = (\n            isFunction(animate) ?\n            animate :\n            animate === false || !this.hasAnimation ?\n            toggleInstant :\n            this.hasTransition ?\n            toggleTransition :\n            toggleAnimation)(\n            el, show, this);\n\n            const cls = show ? this.clsEnter : this.clsLeave;\n\n            addClass(el, cls);\n\n            trigger(el, show ? 'show' : 'hide', [this]);\n\n            const done = () => {\n              removeClass(el, cls);\n              trigger(el, show ? 'shown' : 'hidden', [this]);\n            };\n\n            return promise ?\n            promise.then(done, () => {\n              removeClass(el, cls);\n              return Promise.reject();\n            }) :\n            done();\n          })).\n          then(resolve, noop));\n\n        },\n\n        isToggled(el = this.$el) {\n          [el] = toNodes(el);\n          return hasClass(el, this.clsEnter) ?\n          true :\n          hasClass(el, this.clsLeave) ?\n          false :\n          this.cls ?\n          hasClass(el, this.cls.split(' ')[0]) :\n          isVisible(el);\n        },\n\n        _toggle(el, toggled) {\n          if (!el) {\n            return;\n          }\n\n          toggled = Boolean(toggled);\n\n          let changed;\n          if (this.cls) {\n            changed = includes(this.cls, ' ') || toggled !== hasClass(el, this.cls);\n            changed && toggleClass(el, this.cls, includes(this.cls, ' ') ? undefined : toggled);\n          } else {\n            changed = toggled === el.hidden;\n            changed && (el.hidden = !toggled);\n          }\n\n          $$('[autofocus]', el).some((el) => isVisible(el) ? el.focus() || true : el.blur());\n\n          if (changed) {\n            trigger(el, 'toggled', [toggled, this]);\n          }\n        }\n      }\n    };\n\n    function toggleInstant(el, show, { _toggle }) {\n      Animation.cancel(el);\n      Transition.cancel(el);\n      return _toggle(el, show);\n    }\n\n    async function toggleTransition(\n    el,\n    show,\n    { animation, duration, velocity, transition, _toggle })\n    {var _animation$;\n      const [mode = 'reveal', startProp = 'top'] = ((_animation$ = animation[0]) == null ? void 0 : _animation$.split('-')) || [];\n\n      const dirs = [\n      ['left', 'right'],\n      ['top', 'bottom']];\n\n      const dir = dirs[includes(dirs[0], startProp) ? 0 : 1];\n      const end = dir[1] === startProp;\n      const props = ['width', 'height'];\n      const dimProp = props[dirs.indexOf(dir)];\n      const marginProp = `margin-${dir[0]}`;\n      const marginStartProp = `margin-${startProp}`;\n\n      let currentDim = dimensions$1(el)[dimProp];\n\n      const inProgress = Transition.inProgress(el);\n      await Transition.cancel(el);\n\n      if (show) {\n        _toggle(el, true);\n      }\n\n      const prevProps = Object.fromEntries(\n      [\n      'padding',\n      'border',\n      'width',\n      'height',\n      'minWidth',\n      'minHeight',\n      'overflowY',\n      'overflowX',\n      marginProp,\n      marginStartProp].\n      map((key) => [key, el.style[key]]));\n\n\n      const dim = dimensions$1(el);\n      const currentMargin = toFloat(css(el, marginProp));\n      const marginStart = toFloat(css(el, marginStartProp));\n      const endDim = dim[dimProp] + marginStart;\n\n      if (!inProgress && !show) {\n        currentDim += marginStart;\n      }\n\n      const [wrapper] = wrapInner(el, '<div>');\n      css(wrapper, {\n        boxSizing: 'border-box',\n        height: dim.height,\n        width: dim.width,\n        ...css(el, [\n        'overflow',\n        'padding',\n        'borderTop',\n        'borderRight',\n        'borderBottom',\n        'borderLeft',\n        'borderImage',\n        marginStartProp])\n\n      });\n\n      css(el, {\n        padding: 0,\n        border: 0,\n        minWidth: 0,\n        minHeight: 0,\n        [marginStartProp]: 0,\n        width: dim.width,\n        height: dim.height,\n        overflow: 'hidden',\n        [dimProp]: currentDim\n      });\n\n      const percent = currentDim / endDim;\n      duration = (velocity * endDim + duration) * (show ? 1 - percent : percent);\n      const endProps = { [dimProp]: show ? endDim : 0 };\n\n      if (end) {\n        css(el, marginProp, endDim - currentDim + currentMargin);\n        endProps[marginProp] = show ? currentMargin : endDim + currentMargin;\n      }\n\n      if (!end ^ mode === 'reveal') {\n        css(wrapper, marginProp, -endDim + currentDim);\n        Transition.start(wrapper, { [marginProp]: show ? 0 : -endDim }, duration, transition);\n      }\n\n      try {\n        await Transition.start(el, endProps, duration, transition);\n      } finally {\n        css(el, prevProps);\n        unwrap(wrapper.firstChild);\n\n        if (!show) {\n          _toggle(el, false);\n        }\n      }\n    }\n\n    function toggleAnimation(el, show, cmp) {\n      Animation.cancel(el);\n\n      const { animation, duration, _toggle } = cmp;\n\n      if (show) {\n        _toggle(el, true);\n        return Animation.in(el, animation[0], duration, cmp.origin);\n      }\n\n      return Animation.out(el, animation[1] || animation[0], duration, cmp.origin).then(() => _toggle(el, false));\n\n    }\n\n    var Accordion = {\n      mixins: [Class, Lazyload, Togglable],\n\n      props: {\n        animation: Boolean,\n        targets: String,\n        active: null,\n        collapsible: Boolean,\n        multiple: Boolean,\n        toggle: String,\n        content: String,\n        offset: Number\n      },\n\n      data: {\n        targets: '> *',\n        active: false,\n        animation: true,\n        collapsible: true,\n        multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content: '> .uk-accordion-content',\n        offset: 0\n      },\n\n      computed: {\n        items: {\n          get({ targets }, $el) {\n            return $$(targets, $el);\n          },\n\n          watch(items, prev) {\n            if (prev || hasClass(items, this.clsOpen)) {\n              return;\n            }\n\n            const active =\n            this.active !== false && items[Number(this.active)] ||\n            !this.collapsible && items[0];\n\n            if (active) {\n              this.toggle(active, false);\n            }\n          },\n\n          immediate: true\n        },\n\n        toggles({ toggle }) {\n          return this.items.map((item) => $(toggle, item));\n        },\n\n        contents: {\n          get({ content }) {\n            return this.items.map((item) => $(content, item));\n          },\n\n          watch(items) {\n            for (const el of items) {\n              hide(\n              el,\n              !hasClass(\n              this.items.find((item) => within(el, item)),\n              this.clsOpen));\n\n\n            }\n          },\n\n          immediate: true\n        }\n      },\n\n      connected() {\n        this.lazyload();\n      },\n\n      events: [\n      {\n        name: 'click',\n\n        delegate() {\n          return `${this.targets} ${this.$props.toggle}`;\n        },\n\n        async handler(e) {var _this$_off;\n          e.preventDefault();\n\n          (_this$_off = this._off) == null ? void 0 : _this$_off.call(this);\n          this._off = keepScrollPosition(e.target);\n          await this.toggle(index(this.toggles, e.current));\n          this._off();\n        }\n      }],\n\n\n      methods: {\n        async toggle(item, animate) {\n          item = this.items[getIndex(item, this.items)];\n          let items = [item];\n          const activeItems = filter$1(this.items, `.${this.clsOpen}`);\n\n          if (!this.multiple && !includes(activeItems, items[0])) {\n            items = items.concat(activeItems);\n          }\n\n          if (!this.collapsible && activeItems.length < 2 && includes(activeItems, item)) {\n            return;\n          }\n\n          await Promise.all(\n          items.map((el) => this.toggleElement(el, !includes(activeItems, el), (el, show) => {\n            toggleClass(el, this.clsOpen, show);\n            attr($(this.$props.toggle, el), 'aria-expanded', show);\n\n            if (animate === false || !this.animation) {\n              hide($(this.content, el), !show);\n              return;\n            }\n\n            return transition(el, show, this);\n          })));\n\n\n        }\n      }\n    };\n\n    function hide(el, hide) {\n      el && (el.hidden = hide);\n    }\n\n    async function transition(el, show, { content, duration, velocity, transition }) {var _el$_wrapper;\n      content = ((_el$_wrapper = el._wrapper) == null ? void 0 : _el$_wrapper.firstElementChild) || $(content, el);\n\n      if (!el._wrapper) {\n        el._wrapper = wrapAll(content, '<div>');\n      }\n\n      const wrapper = el._wrapper;\n      css(wrapper, 'overflow', 'hidden');\n      const currentHeight = toFloat(css(wrapper, 'height'));\n\n      await Transition.cancel(wrapper);\n      hide(content, false);\n\n      const endHeight =\n      sumBy(['marginTop', 'marginBottom'], (prop) => css(content, prop)) +\n      dimensions$1(content).height;\n\n      const percent = currentHeight / endHeight;\n      duration = (velocity * endHeight + duration) * (show ? 1 - percent : percent);\n      css(wrapper, 'height', currentHeight);\n\n      await Transition.start(wrapper, { height: show ? endHeight : 0 }, duration, transition);\n\n      unwrap(content);\n      delete el._wrapper;\n\n      if (!show) {\n        hide(content, true);\n      }\n    }\n\n    function keepScrollPosition(el) {\n      const [scrollParent] = scrollParents(el, true);\n      let frame;\n      (function scroll() {\n        frame = requestAnimationFrame(() => {\n          const { top } = el.getBoundingClientRect();\n          if (top < 0) {\n            scrollParent.scrollTop += top;\n          }\n          scroll();\n        });\n      })();\n\n      return () => requestAnimationFrame(() => cancelAnimationFrame(frame));\n    }\n\n    var alert = {\n      mixins: [Class, Togglable],\n\n      args: 'animation',\n\n      props: {\n        animation: Boolean,\n        close: String\n      },\n\n      data: {\n        animation: true,\n        selClose: '.uk-alert-close',\n        duration: 150\n      },\n\n      events: {\n        name: 'click',\n\n        delegate() {\n          return this.selClose;\n        },\n\n        handler(e) {\n          e.preventDefault();\n          this.close();\n        }\n      },\n\n      methods: {\n        async close() {\n          await this.toggleElement(this.$el, false, animate$1);\n          this.$destroy(true);\n        }\n      }\n    };\n\n    function animate$1(el, show, { duration, transition, velocity }) {\n      const height = toFloat(css(el, 'height'));\n      css(el, 'height', height);\n      return Transition.start(\n      el,\n      {\n        height: 0,\n        marginTop: 0,\n        marginBottom: 0,\n        paddingTop: 0,\n        paddingBottom: 0,\n        borderTop: 0,\n        borderBottom: 0,\n        opacity: 0\n      },\n      velocity * height + duration,\n      transition);\n\n    }\n\n    var Video = {\n      args: 'autoplay',\n\n      props: {\n        automute: Boolean,\n        autoplay: Boolean\n      },\n\n      data: {\n        automute: false,\n        autoplay: true\n      },\n\n      connected() {\n        this.inView = this.autoplay === 'inview';\n\n        if (this.inView && !hasAttr(this.$el, 'preload')) {\n          this.$el.preload = 'none';\n        }\n\n        if (isTag(this.$el, 'iframe') && !hasAttr(this.$el, 'allow')) {\n          this.$el.allow = 'autoplay';\n        }\n\n        if (this.automute) {\n          mute(this.$el);\n        }\n\n        this.registerObserver(observeIntersection(this.$el, () => this.$emit(), {}, false));\n      },\n\n      update: {\n        read({ visible }) {\n          if (!isVideo(this.$el)) {\n            return false;\n          }\n\n          return {\n            prev: visible,\n            visible: isVisible(this.$el) && css(this.$el, 'visibility') !== 'hidden',\n            inView: this.inView && isInView(this.$el)\n          };\n        },\n\n        write({ prev, visible, inView }) {\n          if (!visible || this.inView && !inView) {\n            pause(this.$el);\n          } else if (this.autoplay === true && !prev || this.inView && inView) {\n            play(this.$el);\n          }\n        }\n      }\n    };\n\n    var Resize = {\n      connected() {var _this$$options$resize;\n        this.registerObserver(\n        observeResize(((_this$$options$resize = this.$options.resizeTargets) == null ? void 0 : _this$$options$resize.call(this)) || this.$el, () => this.$emit('resize')));\n\n\n      }\n    };\n\n    var cover = {\n      mixins: [Resize, Video],\n\n      props: {\n        width: Number,\n        height: Number\n      },\n\n      data: {\n        automute: true\n      },\n\n      events: {\n        'load loadedmetadata'() {\n          this.$emit('resize');\n        }\n      },\n\n      resizeTargets() {\n        return [this.$el, getPositionedParent(this.$el) || parent(this.$el)];\n      },\n\n      update: {\n        read() {\n          const { ratio, cover } = Dimensions;\n          const { $el, width, height } = this;\n\n          let dim = { width, height };\n\n          if (!dim.width || !dim.height) {\n            const intrinsic = {\n              width: $el.naturalWidth || $el.videoWidth || $el.clientWidth,\n              height: $el.naturalHeight || $el.videoHeight || $el.clientHeight\n            };\n\n            if (dim.width) {\n              dim = ratio(intrinsic, 'width', dim.width);\n            } else if (height) {\n              dim = ratio(intrinsic, 'height', dim.height);\n            } else {\n              dim = intrinsic;\n            }\n          }\n\n          const { offsetHeight: coverHeight, offsetWidth: coverWidth } =\n          getPositionedParent($el) || parent($el);\n          const coverDim = cover(dim, {\n            width: coverWidth + (coverWidth % 2 ? 1 : 0),\n            height: coverHeight + (coverHeight % 2 ? 1 : 0)\n          });\n\n          if (!coverDim.width || !coverDim.height) {\n            return false;\n          }\n\n          return coverDim;\n        },\n\n        write({ height, width }) {\n          css(this.$el, { height, width });\n        },\n\n        events: ['resize']\n      }\n    };\n\n    function getPositionedParent(el) {\n      while (el = parent(el)) {\n        if (css(el, 'position') !== 'static') {\n          return el;\n        }\n      }\n    }\n\n    var Container = {\n      props: {\n        container: Boolean\n      },\n\n      data: {\n        container: true\n      },\n\n      computed: {\n        container({ container }) {\n          return container === true && this.$container || container && $(container);\n        }\n      }\n    };\n\n    var Position = {\n      props: {\n        pos: String,\n        offset: null,\n        flip: Boolean,\n        shift: Boolean,\n        inset: Boolean\n      },\n\n      data: {\n        pos: `bottom-${isRtl ? 'right' : 'left'}`,\n        offset: false,\n        flip: true,\n        shift: true,\n        inset: false\n      },\n\n      connected() {\n        this.pos = this.$props.pos.split('-').concat('center').slice(0, 2);\n        [this.dir, this.align] = this.pos;\n        this.axis = includes(['top', 'bottom'], this.dir) ? 'y' : 'x';\n      },\n\n      methods: {\n        positionAt(element, target, boundary) {\n          let offset = [this.getPositionOffset(element), this.getShiftOffset(element)];\n          const placement = [this.flip && 'flip', this.shift && 'shift'];\n\n          const attach = {\n            element: [this.inset ? this.dir : flipPosition(this.dir), this.align],\n            target: [this.dir, this.align]\n          };\n\n          if (this.axis === 'y') {\n            for (const prop in attach) {\n              attach[prop].reverse();\n            }\n            offset.reverse();\n            placement.reverse();\n          }\n\n          const [scrollElement] = scrollParents(element);\n          const { scrollTop, scrollLeft } = scrollElement;\n\n          // Ensure none positioned element does not generate scrollbars\n          const elDim = dimensions$1(element);\n          css(element, { top: -elDim.height, left: -elDim.width });\n\n          positionAt(element, target, {\n            attach,\n            offset,\n            boundary,\n            placement,\n            viewportOffset: this.getViewportOffset(element)\n          });\n\n          // Restore scroll position\n          scrollElement.scrollTop = scrollTop;\n          scrollElement.scrollLeft = scrollLeft;\n        },\n\n        getPositionOffset(element) {\n          return (\n            toPx(\n            this.offset === false ? css(element, '--uk-position-offset') : this.offset,\n            this.axis === 'x' ? 'width' : 'height',\n            element) * (\n\n            includes(['left', 'top'], this.dir) ? -1 : 1) * (\n            this.inset ? -1 : 1));\n\n        },\n\n        getShiftOffset(element) {\n          return this.align === 'center' ?\n          0 :\n          toPx(\n          css(element, '--uk-position-shift-offset'),\n          this.axis === 'y' ? 'width' : 'height',\n          element) * (\n          includes(['left', 'top'], this.align) ? 1 : -1);\n        },\n\n        getViewportOffset(element) {\n          return toPx(css(element, '--uk-position-viewport-offset'));\n        }\n      }\n    };\n\n    const active$1 = [];\n\n    var Modal = {\n      mixins: [Class, Container, Togglable],\n\n      props: {\n        selPanel: String,\n        selClose: String,\n        escClose: Boolean,\n        bgClose: Boolean,\n        stack: Boolean\n      },\n\n      data: {\n        cls: 'uk-open',\n        escClose: true,\n        bgClose: true,\n        overlay: true,\n        stack: false\n      },\n\n      computed: {\n        panel({ selPanel }, $el) {\n          return $(selPanel, $el);\n        },\n\n        transitionElement() {\n          return this.panel;\n        },\n\n        bgClose({ bgClose }) {\n          return bgClose && this.panel;\n        }\n      },\n\n      beforeDisconnect() {\n        if (includes(active$1, this)) {\n          this.toggleElement(this.$el, false, false);\n        }\n      },\n\n      events: [\n      {\n        name: 'click',\n\n        delegate() {\n          return `${this.selClose},a[href*=\"#\"]`;\n        },\n\n        handler(e) {\n          const { current, defaultPrevented } = e;\n          const { hash } = current;\n          if (\n          !defaultPrevented &&\n          hash &&\n          isSameSiteAnchor(current) &&\n          !within(hash, this.$el) &&\n          $(hash, document.body))\n          {\n            this.hide();\n          } else if (matches(current, this.selClose)) {\n            e.preventDefault();\n            this.hide();\n          }\n        }\n      },\n\n      {\n        name: 'toggle',\n\n        self: true,\n\n        handler(e) {\n          if (e.defaultPrevented) {\n            return;\n          }\n\n          e.preventDefault();\n\n          if (this.isToggled() === includes(active$1, this)) {\n            this.toggle();\n          }\n        }\n      },\n\n      {\n        name: 'beforeshow',\n\n        self: true,\n\n        handler(e) {\n          if (includes(active$1, this)) {\n            return false;\n          }\n\n          if (!this.stack && active$1.length) {\n            Promise.all(active$1.map((modal) => modal.hide())).then(this.show);\n            e.preventDefault();\n          } else {\n            active$1.push(this);\n          }\n        }\n      },\n\n      {\n        name: 'show',\n\n        self: true,\n\n        handler() {\n          once(\n          this.$el,\n          'hide',\n          on(document, 'focusin', (e) => {\n            if (last(active$1) === this && !within(e.target, this.$el)) {\n              this.$el.focus();\n            }\n          }));\n\n\n          if (this.overlay) {\n            once(this.$el, 'hidden', preventBackgroundScroll(this.$el), { self: true });\n          }\n\n          if (this.stack) {\n            css(this.$el, 'zIndex', toFloat(css(this.$el, 'zIndex')) + active$1.length);\n          }\n\n          addClass(document.documentElement, this.clsPage);\n\n          if (this.bgClose) {\n            once(\n            this.$el,\n            'hide',\n            on(document, pointerDown$1, ({ target }) => {\n              if (\n              last(active$1) !== this ||\n              this.overlay && !within(target, this.$el) ||\n              within(target, this.panel))\n              {\n                return;\n              }\n\n              once(\n              document,\n              `${pointerUp$1} ${pointerCancel} scroll`,\n              ({ defaultPrevented, type, target: newTarget }) => {\n                if (\n                !defaultPrevented &&\n                type === pointerUp$1 &&\n                target === newTarget)\n                {\n                  this.hide();\n                }\n              },\n              true);\n\n            }),\n            { self: true });\n\n          }\n\n          if (this.escClose) {\n            once(\n            this.$el,\n            'hide',\n            on(document, 'keydown', (e) => {\n              if (e.keyCode === 27 && last(active$1) === this) {\n                this.hide();\n              }\n            }),\n            { self: true });\n\n          }\n        }\n      },\n\n      {\n        name: 'shown',\n\n        self: true,\n\n        handler() {\n          if (!isFocusable(this.$el)) {\n            attr(this.$el, 'tabindex', '-1');\n          }\n\n          if (!$(':focus', this.$el)) {\n            this.$el.focus();\n          }\n        }\n      },\n\n      {\n        name: 'hidden',\n\n        self: true,\n\n        handler() {\n          if (includes(active$1, this)) {\n            active$1.splice(active$1.indexOf(this), 1);\n          }\n\n          css(this.$el, 'zIndex', '');\n\n          if (!active$1.some((modal) => modal.clsPage === this.clsPage)) {\n            removeClass(document.documentElement, this.clsPage);\n          }\n        }\n      }],\n\n\n      methods: {\n        toggle() {\n          return this.isToggled() ? this.hide() : this.show();\n        },\n\n        show() {\n          if (this.container && parent(this.$el) !== this.container) {\n            append(this.container, this.$el);\n            return new Promise((resolve) => requestAnimationFrame(() => this.show().then(resolve)));\n\n          }\n\n          return this.toggleElement(this.$el, true, animate);\n        },\n\n        hide() {\n          return this.toggleElement(this.$el, false, animate);\n        }\n      }\n    };\n\n    function animate(el, show, { transitionElement, _toggle }) {\n      return new Promise((resolve, reject) => once(el, 'show hide', () => {\n        el._reject == null ? void 0 : el._reject();\n        el._reject = reject;\n\n        _toggle(el, show);\n\n        const off = once(\n        transitionElement,\n        'transitionstart',\n        () => {\n          once(transitionElement, 'transitionend transitioncancel', resolve, {\n            self: true\n          });\n          clearTimeout(timer);\n        },\n        { self: true });\n\n\n        const timer = setTimeout(() => {\n          off();\n          resolve();\n        }, toMs(css(transitionElement, 'transitionDuration')));\n      })).\n      then(() => delete el._reject);\n    }\n\n    function toMs(time) {\n      return time ? endsWith(time, 'ms') ? toFloat(time) : toFloat(time) * 1000 : 0;\n    }\n\n    let prevented;\n    function preventBackgroundScroll(el) {\n      // 'overscroll-behavior: contain' only works consistently if el overflows (Safari)\n      const off = on(\n      el,\n      'touchmove',\n      (e) => {\n        if (e.targetTouches.length !== 1) {\n          return;\n        }\n\n        let [{ scrollHeight, clientHeight }] = scrollParents(e.target);\n\n        if (clientHeight >= scrollHeight && e.cancelable) {\n          e.preventDefault();\n        }\n      },\n      { passive: false });\n\n\n      if (prevented) {\n        return off;\n      }\n      prevented = true;\n\n      const { scrollingElement } = document;\n      css(scrollingElement, {\n        overflowY: CSS.supports('overflow', 'clip') ? 'clip' : 'hidden',\n        touchAction: 'none',\n        paddingRight: width(window) - scrollingElement.clientWidth || ''\n      });\n      return () => {\n        prevented = false;\n        off();\n        css(scrollingElement, { overflowY: '', touchAction: '', paddingRight: '' });\n      };\n    }\n\n    function isSameSiteAnchor(a) {\n      return ['origin', 'pathname', 'search'].every((part) => a[part] === location[part]);\n    }\n\n    let active;\n\n    var drop = {\n      mixins: [Container, Lazyload, Position, Togglable],\n\n      args: 'pos',\n\n      props: {\n        mode: 'list',\n        toggle: Boolean,\n        boundary: Boolean,\n        boundaryX: Boolean,\n        boundaryY: Boolean,\n        target: Boolean,\n        targetX: Boolean,\n        targetY: Boolean,\n        stretch: Boolean,\n        delayShow: Number,\n        delayHide: Number,\n        autoUpdate: Boolean,\n        clsDrop: String,\n        animateOut: Boolean,\n        bgScroll: Boolean\n      },\n\n      data: {\n        mode: ['click', 'hover'],\n        toggle: '- *',\n        boundary: false,\n        boundaryX: false,\n        boundaryY: false,\n        target: false,\n        targetX: false,\n        targetY: false,\n        stretch: false,\n        delayShow: 0,\n        delayHide: 800,\n        autoUpdate: true,\n        clsDrop: false,\n        animateOut: false,\n        bgScroll: true,\n        animation: ['uk-animation-fade'],\n        cls: 'uk-open',\n        container: false\n      },\n\n      computed: {\n        boundary({ boundary, boundaryX, boundaryY }, $el) {\n          return [\n          query(boundaryX || boundary, $el) || window,\n          query(boundaryY || boundary, $el) || window];\n\n        },\n\n        target({ target, targetX, targetY }, $el) {\n          targetX = targetX || target || this.targetEl;\n          targetY = targetY || target || this.targetEl;\n\n          return [\n          targetX === true ? window : query(targetX, $el),\n          targetY === true ? window : query(targetY, $el)];\n\n        }\n      },\n\n      created() {\n        this.tracker = new MouseTracker();\n      },\n\n      beforeConnect() {\n        this.clsDrop = this.$props.clsDrop || `uk-${this.$options.name}`;\n      },\n\n      connected() {\n        addClass(this.$el, this.clsDrop);\n\n        if (this.toggle && !this.targetEl) {\n          this.targetEl = this.$create('toggle', query(this.toggle, this.$el), {\n            target: this.$el,\n            mode: this.mode\n          }).$el;\n          attr(this.targetEl, 'aria-haspopup', true);\n          this.lazyload(this.targetEl);\n        }\n\n        this._style = (({ width, height }) => ({ width, height }))(this.$el.style);\n      },\n\n      disconnected() {\n        if (this.isActive()) {\n          this.hide(false);\n          active = null;\n        }\n        css(this.$el, this._style);\n      },\n\n      events: [\n      {\n        name: 'click',\n\n        delegate() {\n          return `.${this.clsDrop}-close`;\n        },\n\n        handler(e) {\n          e.preventDefault();\n          this.hide(false);\n        }\n      },\n\n      {\n        name: 'click',\n\n        delegate() {\n          return 'a[href*=\"#\"]';\n        },\n\n        handler({ defaultPrevented, current }) {\n          const { hash } = current;\n          if (\n          !defaultPrevented &&\n          hash &&\n          isSameSiteAnchor(current) &&\n          !within(hash, this.$el))\n          {\n            this.hide(false);\n          }\n        }\n      },\n\n      {\n        name: 'beforescroll',\n\n        handler() {\n          this.hide(false);\n        }\n      },\n\n      {\n        name: 'toggle',\n\n        self: true,\n\n        handler(e, toggle) {\n          e.preventDefault();\n\n          if (this.isToggled()) {\n            this.hide(false);\n          } else {\n            this.show(toggle == null ? void 0 : toggle.$el, false);\n          }\n        }\n      },\n\n      {\n        name: 'toggleshow',\n\n        self: true,\n\n        handler(e, toggle) {\n          e.preventDefault();\n          this.show(toggle == null ? void 0 : toggle.$el);\n        }\n      },\n\n      {\n        name: 'togglehide',\n\n        self: true,\n\n        handler(e) {\n          e.preventDefault();\n          if (!matches(this.$el, ':focus,:hover')) {\n            this.hide();\n          }\n        }\n      },\n\n      {\n        name: `${pointerEnter} focusin`,\n\n        filter() {\n          return includes(this.mode, 'hover');\n        },\n\n        handler(e) {\n          if (!isTouch(e)) {\n            this.clearTimers();\n          }\n        }\n      },\n\n      {\n        name: `${pointerLeave} focusout`,\n\n        filter() {\n          return includes(this.mode, 'hover');\n        },\n\n        handler(e) {\n          if (!isTouch(e) && e.relatedTarget) {\n            this.hide();\n          }\n        }\n      },\n\n      {\n        name: 'toggled',\n\n        self: true,\n\n        handler(e, toggled) {\n          if (!toggled) {\n            return;\n          }\n\n          this.clearTimers();\n          this.position();\n        }\n      },\n\n      {\n        name: 'show',\n\n        self: true,\n\n        handler() {\n          active = this;\n\n          this.tracker.init();\n\n          const update = () => this.$emit();\n          const handlers = [\n          on(\n          document,\n          pointerDown$1,\n          ({ target }) => !within(target, this.$el) &&\n          once(\n          document,\n          `${pointerUp$1} ${pointerCancel} scroll`,\n          ({ defaultPrevented, type, target: newTarget }) => {\n            if (\n            !defaultPrevented &&\n            type === pointerUp$1 &&\n            target === newTarget &&\n            !(this.targetEl && within(target, this.targetEl)))\n            {\n              this.hide(false);\n            }\n          },\n          true)),\n\n\n\n          on(document, 'keydown', (e) => {\n            if (e.keyCode === 27) {\n              this.hide(false);\n            }\n          }),\n\n          on(window, 'resize', update),\n\n          (() => {\n            const observer = observeResize(\n            overflowParents(this.$el).concat(this.target),\n            update);\n\n            return () => observer.disconnect();\n          })(),\n\n          this.autoUpdate &&\n          on([document, ...overflowParents(this.$el)], 'scroll', update, {\n            passive: true\n          }),\n\n          !this.bgScroll && preventBackgroundScroll(this.$el)];\n\n\n          once(this.$el, 'hide', () => handlers.forEach((handler) => handler && handler()), {\n            self: true\n          });\n        }\n      },\n\n      {\n        name: 'beforehide',\n\n        self: true,\n\n        handler() {\n          this.clearTimers();\n        }\n      },\n\n      {\n        name: 'hide',\n\n        handler({ target }) {\n          if (this.$el !== target) {\n            active =\n            active === null && within(target, this.$el) && this.isToggled() ?\n            this :\n            active;\n            return;\n          }\n\n          active = this.isActive() ? null : active;\n          this.tracker.cancel();\n        }\n      }],\n\n\n      update: {\n        write() {\n          if (this.isToggled() && !hasClass(this.$el, this.clsEnter)) {\n            this.position();\n          }\n        }\n      },\n\n      methods: {\n        show(target = this.targetEl, delay = true) {\n          if (this.isToggled() && target && this.targetEl && target !== this.targetEl) {\n            this.hide(false, false);\n          }\n\n          this.targetEl = target;\n\n          this.clearTimers();\n\n          if (this.isActive()) {\n            return;\n          }\n\n          if (active) {\n            if (delay && active.isDelaying) {\n              this.showTimer = setTimeout(() => matches(target, ':hover') && this.show(), 10);\n              return;\n            }\n\n            let prev;\n            while (active && prev !== active && !within(this.$el, active.$el)) {\n              prev = active;\n              active.hide(false, false);\n            }\n          }\n\n          if (this.container && parent(this.$el) !== this.container) {\n            append(this.container, this.$el);\n          }\n\n          this.showTimer = setTimeout(\n          () => this.toggleElement(this.$el, true),\n          delay && this.delayShow || 0);\n\n        },\n\n        hide(delay = true, animate = true) {\n          const hide = () => this.toggleElement(this.$el, false, this.animateOut && animate);\n\n          this.clearTimers();\n\n          this.isDelaying = getPositionedElements(this.$el).some((el) => this.tracker.movesTo(el));\n\n\n          if (delay && this.isDelaying) {\n            this.hideTimer = setTimeout(this.hide, 50);\n          } else if (delay && this.delayHide) {\n            this.hideTimer = setTimeout(hide, this.delayHide);\n          } else {\n            hide();\n          }\n        },\n\n        clearTimers() {\n          clearTimeout(this.showTimer);\n          clearTimeout(this.hideTimer);\n          this.showTimer = null;\n          this.hideTimer = null;\n          this.isDelaying = false;\n        },\n\n        isActive() {\n          return active === this;\n        },\n\n        position() {\n          removeClass(this.$el, `${this.clsDrop}-stack`);\n          css(this.$el, this._style);\n\n          // Ensure none positioned element does not generate scrollbars\n          this.$el.hidden = true;\n\n          const viewports = this.target.map((target) => getViewport$1(this.$el, target));\n          const viewportOffset = this.getViewportOffset(this.$el);\n\n          const dirs = [\n          [0, ['x', 'width', 'left', 'right']],\n          [1, ['y', 'height', 'top', 'bottom']]];\n\n\n          for (const [i, [axis, prop]] of dirs) {\n            if (this.axis !== axis && includes([axis, true], this.stretch)) {\n              css(this.$el, {\n                [prop]: Math.min(\n                offset(this.boundary[i])[prop],\n                viewports[i][prop] - 2 * viewportOffset),\n\n                [`overflow-${axis}`]: 'auto'\n              });\n            }\n          }\n\n          const maxWidth = viewports[0].width - 2 * viewportOffset;\n\n          if (this.$el.offsetWidth > maxWidth) {\n            addClass(this.$el, `${this.clsDrop}-stack`);\n          }\n\n          css(this.$el, 'maxWidth', maxWidth);\n\n          this.$el.hidden = false;\n\n          this.positionAt(this.$el, this.target, this.boundary);\n\n          for (const [i, [axis, prop, start, end]] of dirs) {\n            if (this.axis === axis && includes([axis, true], this.stretch)) {\n              const positionOffset = Math.abs(this.getPositionOffset(this.$el));\n              const targetOffset = offset(this.target[i]);\n              const elOffset = offset(this.$el);\n\n              css(this.$el, {\n                [prop]:\n                (targetOffset[start] > elOffset[start] ?\n                targetOffset[start] -\n                Math.max(\n                offset(this.boundary[i])[start],\n                viewports[i][start] + viewportOffset) :\n\n                Math.min(\n                offset(this.boundary[i])[end],\n                viewports[i][end] - viewportOffset) -\n                targetOffset[end]) - positionOffset,\n                [`overflow-${axis}`]: 'auto'\n              });\n\n              this.positionAt(this.$el, this.target, this.boundary);\n            }\n          }\n        }\n      }\n    };\n\n    function getPositionedElements(el) {\n      const result = [];\n      apply(el, (el) => css(el, 'position') !== 'static' && result.push(el));\n      return result;\n    }\n\n    function getViewport$1(el, target) {\n      return offsetViewport(overflowParents(target).find((parent) => within(el, parent)));\n    }\n\n    var formCustom = {\n      mixins: [Class],\n\n      args: 'target',\n\n      props: {\n        target: Boolean\n      },\n\n      data: {\n        target: false\n      },\n\n      computed: {\n        input(_, $el) {\n          return $(selInput, $el);\n        },\n\n        state() {\n          return this.input.nextElementSibling;\n        },\n\n        target({ target }, $el) {\n          return (\n            target && (\n            target === true && parent(this.input) === $el && this.input.nextElementSibling ||\n            $(target, $el)));\n\n        }\n      },\n\n      update() {var _input$files;\n        const { target, input } = this;\n\n        if (!target) {\n          return;\n        }\n\n        let option;\n        const prop = isInput(target) ? 'value' : 'textContent';\n        const prev = target[prop];\n        const value = (_input$files = input.files) != null && _input$files[0] ?\n        input.files[0].name :\n        matches(input, 'select') && (\n        option = $$('option', input).filter((el) => el.selected)[0]) // eslint-disable-line prefer-destructuring\n        ? option.textContent :\n        input.value;\n\n        if (prev !== value) {\n          target[prop] = value;\n        }\n      },\n\n      events: [\n      {\n        name: 'change',\n\n        handler() {\n          this.$emit();\n        }\n      },\n\n      {\n        name: 'reset',\n\n        el() {\n          return closest(this.$el, 'form');\n        },\n\n        handler() {\n          this.$emit();\n        }\n      }]\n\n    };\n\n    var Margin = {\n      mixins: [Resize],\n\n      props: {\n        margin: String,\n        firstColumn: Boolean\n      },\n\n      data: {\n        margin: 'uk-margin-small-top',\n        firstColumn: 'uk-first-column'\n      },\n\n      resizeTargets() {\n        return [this.$el, ...toArray(this.$el.children)];\n      },\n\n      connected() {\n        this.registerObserver(\n        observeMutation(this.$el, () => this.$reset(), {\n          childList: true,\n          attributes: true,\n          attributeFilter: ['style']\n        }));\n\n      },\n\n      update: {\n        read() {\n          const rows = getRows(this.$el.children);\n\n          return {\n            rows,\n            columns: getColumns(rows)\n          };\n        },\n\n        write({ columns, rows }) {\n          for (const row of rows) {\n            for (const column of row) {\n              toggleClass(column, this.margin, rows[0] !== row);\n              toggleClass(column, this.firstColumn, columns[0].includes(column));\n            }\n          }\n        },\n\n        events: ['resize']\n      }\n    };\n\n    function getRows(items) {\n      return sortBy(items, 'top', 'bottom');\n    }\n\n    function getColumns(rows) {\n      const columns = [];\n\n      for (const row of rows) {\n        const sorted = sortBy(row, 'left', 'right');\n        for (let j = 0; j < sorted.length; j++) {\n          columns[j] = columns[j] ? columns[j].concat(sorted[j]) : sorted[j];\n        }\n      }\n\n      return isRtl ? columns.reverse() : columns;\n    }\n\n    function sortBy(items, startProp, endProp) {\n      const sorted = [[]];\n\n      for (const el of items) {\n        if (!isVisible(el)) {\n          continue;\n        }\n\n        let dim = getOffset(el);\n\n        for (let i = sorted.length - 1; i >= 0; i--) {\n          const current = sorted[i];\n\n          if (!current[0]) {\n            current.push(el);\n            break;\n          }\n\n          let startDim;\n          if (current[0].offsetParent === el.offsetParent) {\n            startDim = getOffset(current[0]);\n          } else {\n            dim = getOffset(el, true);\n            startDim = getOffset(current[0], true);\n          }\n\n          if (dim[startProp] >= startDim[endProp] - 1 && dim[startProp] !== startDim[startProp]) {\n            sorted.push([el]);\n            break;\n          }\n\n          if (dim[endProp] - 1 > startDim[startProp] || dim[startProp] === startDim[startProp]) {\n            current.push(el);\n            break;\n          }\n\n          if (i === 0) {\n            sorted.unshift([el]);\n            break;\n          }\n        }\n      }\n\n      return sorted;\n    }\n\n    function getOffset(element, offset = false) {\n      let { offsetTop, offsetLeft, offsetHeight, offsetWidth } = element;\n\n      if (offset) {\n        [offsetTop, offsetLeft] = offsetPosition(element);\n      }\n\n      return {\n        top: offsetTop,\n        left: offsetLeft,\n        bottom: offsetTop + offsetHeight,\n        right: offsetLeft + offsetWidth\n      };\n    }\n\n    var Scroll = {\n      connected() {\n        registerScrollListener(this._uid, () => this.$emit('scroll'));\n      },\n\n      disconnected() {\n        unregisterScrollListener(this._uid);\n      }\n    };\n\n    const scrollListeners = new Map();\n    let unbindScrollListener;\n    function registerScrollListener(id, listener) {\n      unbindScrollListener =\n      unbindScrollListener ||\n      on(window, 'scroll', () => scrollListeners.forEach((listener) => listener()), {\n        passive: true,\n        capture: true\n      });\n\n      scrollListeners.set(id, listener);\n    }\n\n    function unregisterScrollListener(id) {\n      scrollListeners.delete(id);\n      if (unbindScrollListener && !scrollListeners.size) {\n        unbindScrollListener();\n        unbindScrollListener = null;\n      }\n    }\n\n    var grid = {\n      extends: Margin,\n\n      mixins: [Class],\n\n      name: 'grid',\n\n      props: {\n        masonry: Boolean,\n        parallax: Number\n      },\n\n      data: {\n        margin: 'uk-grid-margin',\n        clsStack: 'uk-grid-stack',\n        masonry: false,\n        parallax: 0\n      },\n\n      connected() {\n        this.masonry && addClass(this.$el, 'uk-flex-top uk-flex-wrap-top');\n        this.parallax && registerScrollListener(this._uid, () => this.$emit('scroll'));\n      },\n\n      disconnected() {\n        unregisterScrollListener(this._uid);\n      },\n\n      update: [\n      {\n        write({ columns }) {\n          toggleClass(this.$el, this.clsStack, columns.length < 2);\n        },\n\n        events: ['resize']\n      },\n\n      {\n        read(data) {\n          let { columns, rows } = data;\n\n          // Filter component makes elements positioned absolute\n          if (\n          !columns.length ||\n          !this.masonry && !this.parallax ||\n          positionedAbsolute(this.$el))\n          {\n            data.translates = false;\n            return false;\n          }\n\n          let translates = false;\n\n          const nodes = children(this.$el);\n          const columnHeights = columns.map((column) => sumBy(column, 'offsetHeight'));\n          const margin = getMarginTop(nodes, this.margin) * (rows.length - 1);\n          const elHeight = Math.max(...columnHeights) + margin;\n\n          if (this.masonry) {\n            columns = columns.map((column) => sortBy$1(column, 'offsetTop'));\n            translates = getTranslates(rows, columns);\n          }\n\n          let padding = Math.abs(this.parallax);\n          if (padding) {\n            padding = columnHeights.reduce(\n            (newPadding, hgt, i) => Math.max(\n            newPadding,\n            hgt + margin + (i % 2 ? padding : padding / 8) - elHeight),\n\n            0);\n\n          }\n\n          return { padding, columns, translates, height: translates ? elHeight : '' };\n        },\n\n        write({ height, padding }) {\n          css(this.$el, 'paddingBottom', padding || '');\n          height !== false && css(this.$el, 'height', height);\n        },\n\n        events: ['resize']\n      },\n\n      {\n        read() {\n          if (this.parallax && positionedAbsolute(this.$el)) {\n            return false;\n          }\n\n          return {\n            scrolled: this.parallax ?\n            scrolledOver(this.$el) * Math.abs(this.parallax) :\n            false\n          };\n        },\n\n        write({ columns, scrolled, translates }) {\n          if (scrolled === false && !translates) {\n            return;\n          }\n\n          columns.forEach((column, i) => column.forEach((el, j) => css(\n          el,\n          'transform',\n          !scrolled && !translates ?\n          '' :\n          `translateY(${\n      (translates && -translates[i][j]) + (\n      scrolled ? i % 2 ? scrolled : scrolled / 8 : 0)\n      }px)`)));\n\n\n\n        },\n\n        events: ['scroll', 'resize']\n      }]\n\n    };\n\n    function positionedAbsolute(el) {\n      return children(el).some((el) => css(el, 'position') === 'absolute');\n    }\n\n    function getTranslates(rows, columns) {\n      const rowHeights = rows.map((row) => Math.max(...row.map((el) => el.offsetHeight)));\n\n      return columns.map((elements) => {\n        let prev = 0;\n        return elements.map(\n        (element, row) => prev += row ? rowHeights[row - 1] - elements[row - 1].offsetHeight : 0);\n\n      });\n    }\n\n    function getMarginTop(nodes, cls) {\n      const [node] = nodes.filter((el) => hasClass(el, cls));\n\n      return toFloat(node ? css(node, 'marginTop') : css(nodes[0], 'paddingLeft'));\n    }\n\n    var heightMatch = {\n      mixins: [Resize],\n\n      args: 'target',\n\n      props: {\n        target: String,\n        row: Boolean\n      },\n\n      data: {\n        target: '> *',\n        row: true\n      },\n\n      computed: {\n        elements: {\n          get({ target }, $el) {\n            return $$(target, $el);\n          },\n\n          watch() {\n            this.$reset();\n          }\n        }\n      },\n\n      resizeTargets() {\n        return [this.$el, ...this.elements];\n      },\n\n      update: {\n        read() {\n          return {\n            rows: (this.row ? getRows(this.elements) : [this.elements]).map(match$1)\n          };\n        },\n\n        write({ rows }) {\n          for (const { heights, elements } of rows) {\n            elements.forEach((el, i) => css(el, 'minHeight', heights[i]));\n          }\n        },\n\n        events: ['resize']\n      }\n    };\n\n    function match$1(elements) {\n      if (elements.length < 2) {\n        return { heights: [''], elements };\n      }\n\n      css(elements, 'minHeight', '');\n      let heights = elements.map(getHeight);\n      const max = Math.max(...heights);\n\n      return {\n        heights: elements.map((el, i) => heights[i].toFixed(2) === max.toFixed(2) ? '' : max),\n        elements\n      };\n    }\n\n    function getHeight(element) {\n      let style = false;\n      if (!isVisible(element)) {\n        style = element.style.display;\n        css(element, 'display', 'block', 'important');\n      }\n\n      const height = dimensions$1(element).height - boxModelAdjust(element, 'height', 'content-box');\n\n      if (style !== false) {\n        css(element, 'display', style);\n      }\n\n      return height;\n    }\n\n    var heightViewport = {\n      mixins: [Resize],\n\n      props: {\n        expand: Boolean,\n        offsetTop: Boolean,\n        offsetBottom: Boolean,\n        minHeight: Number\n      },\n\n      data: {\n        expand: false,\n        offsetTop: false,\n        offsetBottom: false,\n        minHeight: 0\n      },\n\n      resizeTargets() {\n        // check for offsetTop change\n        return [this.$el, ...scrollParents(this.$el)];\n      },\n\n      update: {\n        read({ minHeight: prev }) {\n          if (!isVisible(this.$el)) {\n            return false;\n          }\n\n          let minHeight = '';\n          const box = boxModelAdjust(this.$el, 'height', 'content-box');\n\n          const { body, scrollingElement } = document;\n          const [scrollElement] = scrollParents(this.$el);\n          const { height: viewportHeight } = offsetViewport(\n          scrollElement === body ? scrollingElement : scrollElement);\n\n\n          if (this.expand) {\n            minHeight = Math.max(\n            viewportHeight - (\n            dimensions$1(scrollElement).height - dimensions$1(this.$el).height) -\n            box,\n            0);\n\n          } else {\n            const isScrollingElement =\n            scrollingElement === scrollElement || body === scrollElement;\n\n            // on mobile devices (iOS and Android) window.innerHeight !== 100vh\n            minHeight = `calc(${isScrollingElement ? '100vh' : `${viewportHeight}px`}`;\n\n            if (this.offsetTop) {\n              if (isScrollingElement) {\n                const top = offsetPosition(this.$el)[0] - offsetPosition(scrollElement)[0];\n                minHeight += top > 0 && top < viewportHeight / 2 ? ` - ${top}px` : '';\n              } else {\n                minHeight += ` - ${css(scrollElement, 'paddingTop')}`;\n              }\n            }\n\n            if (this.offsetBottom === true) {\n              minHeight += ` - ${dimensions$1(this.$el.nextElementSibling).height}px`;\n            } else if (isNumeric(this.offsetBottom)) {\n              minHeight += ` - ${this.offsetBottom}vh`;\n            } else if (this.offsetBottom && endsWith(this.offsetBottom, 'px')) {\n              minHeight += ` - ${toFloat(this.offsetBottom)}px`;\n            } else if (isString(this.offsetBottom)) {\n              minHeight += ` - ${dimensions$1(query(this.offsetBottom, this.$el)).height}px`;\n            }\n\n            minHeight += `${box ? ` - ${box}px` : ''})`;\n          }\n\n          return { minHeight, prev };\n        },\n\n        write({ minHeight }) {\n          css(this.$el, { minHeight });\n\n          if (this.minHeight && toFloat(css(this.$el, 'minHeight')) < this.minHeight) {\n            css(this.$el, 'minHeight', this.minHeight);\n          }\n        },\n\n        events: ['resize']\n      }\n    };\n\n    var SVG = {\n      args: 'src',\n\n      props: {\n        id: Boolean,\n        icon: String,\n        src: String,\n        style: String,\n        width: Number,\n        height: Number,\n        ratio: Number,\n        class: String,\n        strokeAnimation: Boolean,\n        attributes: 'list'\n      },\n\n      data: {\n        ratio: 1,\n        include: ['style', 'class'],\n        class: '',\n        strokeAnimation: false\n      },\n\n      beforeConnect() {\n        this.class += ' uk-svg';\n      },\n\n      connected() {\n        if (!this.icon && includes(this.src, '#')) {\n          [this.src, this.icon] = this.src.split('#');\n        }\n\n        this.svg = this.getSvg().then((el) => {\n          if (this._connected) {\n            const svg = insertSVG(el, this.$el);\n\n            if (this.svgEl && svg !== this.svgEl) {\n              remove$1(this.svgEl);\n            }\n\n            this.applyAttributes(svg, el);\n\n            return this.svgEl = svg;\n          }\n        }, noop);\n\n        if (this.strokeAnimation) {\n          this.svg.then((el) => {\n            if (this._connected && el) {\n              applyAnimation(el);\n              this.registerObserver(\n              observeIntersection(el, (records, observer) => {\n                applyAnimation(el);\n                observer.disconnect();\n              }));\n\n            }\n          });\n        }\n      },\n\n      disconnected() {\n        this.svg.then((svg) => {\n          if (this._connected) {\n            return;\n          }\n\n          if (isVoidElement(this.$el)) {\n            this.$el.hidden = false;\n          }\n\n          remove$1(svg);\n          this.svgEl = null;\n        });\n\n        this.svg = null;\n      },\n\n      methods: {\n        async getSvg() {\n          if (isTag(this.$el, 'img') && !this.$el.complete && this.$el.loading === 'lazy') {\n            return new Promise((resolve) => once(this.$el, 'load', () => resolve(this.getSvg())));\n\n          }\n\n          return parseSVG(await loadSVG(this.src), this.icon) || Promise.reject('SVG not found.');\n        },\n\n        applyAttributes(el, ref) {\n          for (const prop in this.$options.props) {\n            if (includes(this.include, prop) && prop in this) {\n              attr(el, prop, this[prop]);\n            }\n          }\n\n          for (const attribute in this.attributes) {\n            const [prop, value] = this.attributes[attribute].split(':', 2);\n            attr(el, prop, value);\n          }\n\n          if (!this.id) {\n            removeAttr(el, 'id');\n          }\n\n          const props = ['width', 'height'];\n          let dimensions = props.map((prop) => this[prop]);\n\n          if (!dimensions.some((val) => val)) {\n            dimensions = props.map((prop) => attr(ref, prop));\n          }\n\n          const viewBox = attr(ref, 'viewBox');\n          if (viewBox && !dimensions.some((val) => val)) {\n            dimensions = viewBox.split(' ').slice(2);\n          }\n\n          dimensions.forEach((val, i) => attr(el, props[i], toFloat(val) * this.ratio || null));\n        }\n      }\n    };\n\n    const loadSVG = memoize(async (src) => {\n      if (src) {\n        if (startsWith(src, 'data:')) {\n          return decodeURIComponent(src.split(',')[1]);\n        } else {\n          return (await fetch(src)).text();\n        }\n      } else {\n        return Promise.reject();\n      }\n    });\n\n    function parseSVG(svg, icon) {var _svg;\n      if (icon && includes(svg, '<symbol')) {\n        svg = parseSymbols(svg, icon) || svg;\n      }\n\n      svg = $(svg.substr(svg.indexOf('<svg')));\n      return ((_svg = svg) == null ? void 0 : _svg.hasChildNodes()) && svg;\n    }\n\n    const symbolRe = /<symbol([^]*?id=(['\"])(.+?)\\2[^]*?<\\/)symbol>/g;\n    const symbols = {};\n\n    function parseSymbols(svg, icon) {\n      if (!symbols[svg]) {\n        symbols[svg] = {};\n\n        symbolRe.lastIndex = 0;\n\n        let match;\n        while (match = symbolRe.exec(svg)) {\n          symbols[svg][match[3]] = `<svg xmlns=\"http://www.w3.org/2000/svg\"${match[1]}svg>`;\n        }\n      }\n\n      return symbols[svg][icon];\n    }\n\n    function applyAnimation(el) {\n      const length = getMaxPathLength(el);\n\n      if (length) {\n        el.style.setProperty('--uk-animation-stroke', length);\n      }\n    }\n\n    function getMaxPathLength(el) {\n      return Math.ceil(\n      Math.max(\n      0,\n      ...$$('[stroke]', el).map((stroke) => {\n        try {\n          return stroke.getTotalLength();\n        } catch (e) {\n          return 0;\n        }\n      })));\n\n\n    }\n\n    function insertSVG(el, root) {\n      if (isVoidElement(root) || isTag(root, 'canvas')) {\n        root.hidden = true;\n\n        const next = root.nextElementSibling;\n        return equals(el, next) ? next : after(root, el);\n      }\n\n      const last = root.lastElementChild;\n      return equals(el, last) ? last : append(root, el);\n    }\n\n    function equals(el, other) {\n      return isTag(el, 'svg') && isTag(other, 'svg') && el.innerHTML === other.innerHTML;\n    }\n\n    var closeIcon = \"<svg width=\\\"14\\\" height=\\\"14\\\" viewBox=\\\"0 0 14 14\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><line fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" x1=\\\"1\\\" y1=\\\"1\\\" x2=\\\"13\\\" y2=\\\"13\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" x1=\\\"13\\\" y1=\\\"1\\\" x2=\\\"1\\\" y2=\\\"13\\\"/></svg>\";\n\n    var closeLarge = \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><line fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.4\\\" x1=\\\"1\\\" y1=\\\"1\\\" x2=\\\"19\\\" y2=\\\"19\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.4\\\" x1=\\\"19\\\" y1=\\\"1\\\" x2=\\\"1\\\" y2=\\\"19\\\"/></svg>\";\n\n    var marker = \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect x=\\\"9\\\" y=\\\"4\\\" width=\\\"1\\\" height=\\\"11\\\"/><rect x=\\\"4\\\" y=\\\"9\\\" width=\\\"11\\\" height=\\\"1\\\"/></svg>\";\n\n    var navParentIcon = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"12\\\" height=\\\"12\\\" viewBox=\\\"0 0 12 12\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" points=\\\"1 3.5 6 8.5 11 3.5\\\"/></svg>\";\n\n    var navParentIconLarge = \"<svg width=\\\"14\\\" height=\\\"14\\\" viewBox=\\\"0 0 14 14\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" points=\\\"1 4 7 10 13 4\\\"/></svg>\";\n\n    var navbarParentIcon = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"12\\\" height=\\\"12\\\" viewBox=\\\"0 0 12 12\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" points=\\\"1 3.5 6 8.5 11 3.5\\\"/></svg>\";\n\n    var navbarToggleIcon = \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><style>.uk-navbar-toggle-animate svg>[class*=line-]{transition:.2s ease-in-out;transition-property:transform,opacity;transform-origin:center;opacity:1}.uk-navbar-toggle svg>.line-3{opacity:0}.uk-navbar-toggle-animate[aria-expanded=true] svg>.line-3{opacity:1}.uk-navbar-toggle-animate[aria-expanded=true] svg>.line-2{transform:rotate(45deg)}.uk-navbar-toggle-animate[aria-expanded=true] svg>.line-3{transform:rotate(-45deg)}.uk-navbar-toggle-animate[aria-expanded=true] svg>.line-1,.uk-navbar-toggle-animate[aria-expanded=true] svg>.line-4{opacity:0}.uk-navbar-toggle-animate[aria-expanded=true] svg>.line-1{transform:translateY(6px) scaleX(0)}.uk-navbar-toggle-animate[aria-expanded=true] svg>.line-4{transform:translateY(-6px) scaleX(0)}</style><rect class=\\\"line-1\\\" y=\\\"3\\\" width=\\\"20\\\" height=\\\"2\\\"/><rect class=\\\"line-2\\\" y=\\\"9\\\" width=\\\"20\\\" height=\\\"2\\\"/><rect class=\\\"line-3\\\" y=\\\"9\\\" width=\\\"20\\\" height=\\\"2\\\"/><rect class=\\\"line-4\\\" y=\\\"15\\\" width=\\\"20\\\" height=\\\"2\\\"/></svg>\";\n\n    var overlayIcon = \"<svg width=\\\"40\\\" height=\\\"40\\\" viewBox=\\\"0 0 40 40\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect x=\\\"19\\\" y=\\\"0\\\" width=\\\"1\\\" height=\\\"40\\\"/><rect x=\\\"0\\\" y=\\\"19\\\" width=\\\"40\\\" height=\\\"1\\\"/></svg>\";\n\n    var paginationNext = \"<svg width=\\\"7\\\" height=\\\"12\\\" viewBox=\\\"0 0 7 12\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.2\\\" points=\\\"1 1 6 6 1 11\\\"/></svg>\";\n\n    var paginationPrevious = \"<svg width=\\\"7\\\" height=\\\"12\\\" viewBox=\\\"0 0 7 12\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.2\\\" points=\\\"6 1 1 6 6 11\\\"/></svg>\";\n\n    var searchIcon = \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" cx=\\\"9\\\" cy=\\\"9\\\" r=\\\"7\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" d=\\\"M14,14 L18,18 L14,14 Z\\\"/></svg>\";\n\n    var searchLarge = \"<svg width=\\\"40\\\" height=\\\"40\\\" viewBox=\\\"0 0 40 40\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.8\\\" cx=\\\"17.5\\\" cy=\\\"17.5\\\" r=\\\"16.5\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.8\\\" x1=\\\"38\\\" y1=\\\"39\\\" x2=\\\"29\\\" y2=\\\"30\\\"/></svg>\";\n\n    var searchNavbar = \"<svg width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" cx=\\\"10.5\\\" cy=\\\"10.5\\\" r=\\\"9.5\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" x1=\\\"23\\\" y1=\\\"23\\\" x2=\\\"17\\\" y2=\\\"17\\\"/></svg>\";\n\n    var slidenavNext = \"<svg width=\\\"14\\\" height=\\\"24\\\" viewBox=\\\"0 0 14 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.4\\\" points=\\\"1.225,23 12.775,12 1.225,1 \\\"/></svg>\";\n\n    var slidenavNextLarge = \"<svg width=\\\"25\\\" height=\\\"40\\\" viewBox=\\\"0 0 25 40\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"2\\\" points=\\\"4.002,38.547 22.527,20.024 4,1.5 \\\"/></svg>\";\n\n    var slidenavPrevious = \"<svg width=\\\"14\\\" height=\\\"24\\\" viewBox=\\\"0 0 14 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.4\\\" points=\\\"12.775,1 1.225,12 12.775,23 \\\"/></svg>\";\n\n    var slidenavPreviousLarge = \"<svg width=\\\"25\\\" height=\\\"40\\\" viewBox=\\\"0 0 25 40\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"2\\\" points=\\\"20.527,1.5 2,20.024 20.525,38.547 \\\"/></svg>\";\n\n    var spinner = \"<svg width=\\\"30\\\" height=\\\"30\\\" viewBox=\\\"0 0 30 30\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle fill=\\\"none\\\" stroke=\\\"#000\\\" cx=\\\"15\\\" cy=\\\"15\\\" r=\\\"14\\\"/></svg>\";\n\n    var subnavParentIcon = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"12\\\" height=\\\"12\\\" viewBox=\\\"0 0 12 12\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" points=\\\"1 3.5 6 8.5 11 3.5\\\"/></svg>\";\n\n    var totop = \"<svg width=\\\"18\\\" height=\\\"10\\\" viewBox=\\\"0 0 18 10\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.2\\\" points=\\\"1 9 9 1 17 9 \\\"/></svg>\";\n\n    const icons = {\n      spinner,\n      totop,\n      marker,\n      'close-icon': closeIcon,\n      'close-large': closeLarge,\n      'nav-parent-icon': navParentIcon,\n      'nav-parent-icon-large': navParentIconLarge,\n      'navbar-parent-icon': navbarParentIcon,\n      'navbar-toggle-icon': navbarToggleIcon,\n      'overlay-icon': overlayIcon,\n      'pagination-next': paginationNext,\n      'pagination-previous': paginationPrevious,\n      'search-icon': searchIcon,\n      'search-large': searchLarge,\n      'search-navbar': searchNavbar,\n      'slidenav-next': slidenavNext,\n      'slidenav-next-large': slidenavNextLarge,\n      'slidenav-previous': slidenavPrevious,\n      'slidenav-previous-large': slidenavPreviousLarge,\n      'subnav-parent-icon': subnavParentIcon\n    };\n\n    const Icon = {\n      install: install$3,\n\n      extends: SVG,\n\n      args: 'icon',\n\n      props: ['icon'],\n\n      data: { include: [] },\n\n      isIcon: true,\n\n      beforeConnect() {\n        addClass(this.$el, 'uk-icon');\n      },\n\n      methods: {\n        async getSvg() {\n          const icon = getIcon(this.icon);\n\n          if (!icon) {\n            throw 'Icon not found.';\n          }\n\n          return icon;\n        }\n      }\n    };\n\n    const IconComponent = {\n      args: false,\n\n      extends: Icon,\n\n      data: (vm) => ({\n        icon: hyphenate(vm.constructor.options.name)\n      }),\n\n      beforeConnect() {\n        addClass(this.$el, this.$options.id);\n      }\n    };\n\n    const NavParentIcon = {\n      extends: IconComponent,\n\n      beforeConnect() {\n        const icon = this.$props.icon;\n        this.icon = closest(this.$el, '.uk-nav-primary') ? `${icon}-large` : icon;\n      }\n    };\n\n    const Slidenav = {\n      extends: IconComponent,\n\n      beforeConnect() {\n        addClass(this.$el, 'uk-slidenav');\n        const icon = this.$props.icon;\n        this.icon = hasClass(this.$el, 'uk-slidenav-large') ? `${icon}-large` : icon;\n      }\n    };\n\n    const Search = {\n      extends: IconComponent,\n\n      beforeConnect() {\n        this.icon =\n        hasClass(this.$el, 'uk-search-icon') && parents(this.$el, '.uk-search-large').length ?\n        'search-large' :\n        parents(this.$el, '.uk-search-navbar').length ?\n        'search-navbar' :\n        this.$props.icon;\n      }\n    };\n\n    const Close = {\n      extends: IconComponent,\n\n      beforeConnect() {\n        this.icon = `close-${hasClass(this.$el, 'uk-close-large') ? 'large' : 'icon'}`;\n      }\n    };\n\n    const Spinner = {\n      extends: IconComponent,\n\n      methods: {\n        async getSvg() {\n          const icon = await Icon.methods.getSvg.call(this);\n\n          if (this.ratio !== 1) {\n            css($('circle', icon), 'strokeWidth', 1 / this.ratio);\n          }\n\n          return icon;\n        }\n      }\n    };\n\n    const parsed = {};\n    function install$3(UIkit) {\n      UIkit.icon.add = (name, svg) => {\n        const added = isString(name) ? { [name]: svg } : name;\n        each(added, (svg, name) => {\n          icons[name] = svg;\n          delete parsed[name];\n        });\n\n        if (UIkit._initialized) {\n          apply(document.body, (el) => each(UIkit.getComponents(el), (cmp) => {\n            cmp.$options.isIcon && cmp.icon in added && cmp.$reset();\n          }));\n\n        }\n      };\n    }\n\n    function getIcon(icon) {\n      if (!icons[icon]) {\n        return null;\n      }\n\n      if (!parsed[icon]) {\n        parsed[icon] = $((icons[applyRtl(icon)] || icons[icon]).trim());\n      }\n\n      return parsed[icon].cloneNode(true);\n    }\n\n    function applyRtl(icon) {\n      return isRtl ? swap(swap(icon, 'left', 'right'), 'previous', 'next') : icon;\n    }\n\n    const nativeLazyLoad = inBrowser && 'loading' in HTMLImageElement.prototype;\n\n    var img = {\n      args: 'dataSrc',\n\n      props: {\n        dataSrc: String,\n        sources: String,\n        margin: String,\n        target: String,\n        loading: String\n      },\n\n      data: {\n        dataSrc: '',\n        sources: false,\n        margin: '50%',\n        target: false,\n        loading: 'lazy'\n      },\n\n      connected() {\n        if (this.loading !== 'lazy') {\n          this.load();\n          return;\n        }\n\n        const target = [this.$el, ...queryAll(this.$props.target, this.$el)];\n\n        if (nativeLazyLoad && isImg(this.$el)) {\n          this.$el.loading = 'lazy';\n          setSrcAttrs(this.$el);\n\n          if (target.length === 1) {\n            return;\n          }\n        }\n\n        ensureSrcAttribute(this.$el);\n\n        this.registerObserver(\n        observeIntersection(\n        target,\n        (entries, observer) => {\n          this.load();\n          observer.disconnect();\n        },\n        { rootMargin: this.margin }));\n\n\n      },\n\n      disconnected() {\n        if (this._data.image) {\n          this._data.image.onload = '';\n        }\n      },\n\n      methods: {\n        load() {\n          if (this._data.image) {\n            return this._data.image;\n          }\n\n          const image = isImg(this.$el) ?\n          this.$el :\n          getImageFromElement(this.$el, this.dataSrc, this.sources);\n\n          removeAttr(image, 'loading');\n          setSrcAttrs(this.$el, image.currentSrc);\n          return this._data.image = image;\n        }\n      }\n    };\n\n    function setSrcAttrs(el, src) {\n      if (isImg(el)) {\n        const parentNode = parent(el);\n        const elements = isTag(parentNode, 'picture') ? children(parentNode) : [el];\n        elements.forEach((el) => setSourceProps(el, el));\n      } else if (src) {\n        const change = !includes(el.style.backgroundImage, src);\n        if (change) {\n          css(el, 'backgroundImage', `url(${escape(src)})`);\n          trigger(el, createEvent('load', false));\n        }\n      }\n    }\n\n    const srcProps = ['data-src', 'data-srcset', 'sizes'];\n    function setSourceProps(sourceEl, targetEl) {\n      srcProps.forEach((prop) => {\n        const value = data(sourceEl, prop);\n        if (value) {\n          attr(targetEl, prop.replace(/^(data-)+/, ''), value);\n        }\n      });\n    }\n\n    function getImageFromElement(el, src, sources) {\n      const img = new Image();\n\n      wrapInPicture(img, sources);\n      setSourceProps(el, img);\n      img.onload = () => {\n        setSrcAttrs(el, img.currentSrc);\n      };\n      attr(img, 'src', src);\n      return img;\n    }\n\n    function wrapInPicture(img, sources) {\n      sources = parseSources(sources);\n\n      if (sources.length) {\n        const picture = fragment('<picture>');\n        for (const attrs of sources) {\n          const source = fragment('<source>');\n          attr(source, attrs);\n          append(picture, source);\n        }\n        append(picture, img);\n      }\n    }\n\n    function parseSources(sources) {\n      if (!sources) {\n        return [];\n      }\n\n      if (startsWith(sources, '[')) {\n        try {\n          sources = JSON.parse(sources);\n        } catch (e) {\n          sources = [];\n        }\n      } else {\n        sources = parseOptions(sources);\n      }\n\n      if (!isArray(sources)) {\n        sources = [sources];\n      }\n\n      return sources.filter((source) => !isEmpty(source));\n    }\n\n    function ensureSrcAttribute(el) {\n      if (isImg(el) && !hasAttr(el, 'src')) {\n        attr(el, 'src', 'data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\"></svg>');\n      }\n    }\n\n    function isImg(el) {\n      return isTag(el, 'img');\n    }\n\n    var Media = {\n      props: {\n        media: Boolean\n      },\n\n      data: {\n        media: false\n      },\n\n      connected() {\n        const media = toMedia(this.media, this.$el);\n        this.matchMedia = true;\n        if (media) {\n          this.mediaObj = window.matchMedia(media);\n          const handler = () => {\n            this.matchMedia = this.mediaObj.matches;\n            trigger(this.$el, createEvent('mediachange', false, true, [this.mediaObj]));\n          };\n          this.offMediaObj = on(this.mediaObj, 'change', () => {\n            handler();\n            this.$emit('resize');\n          });\n          handler();\n        }\n      },\n\n      disconnected() {var _this$offMediaObj;\n        (_this$offMediaObj = this.offMediaObj) == null ? void 0 : _this$offMediaObj.call(this);\n      }\n    };\n\n    function toMedia(value, element) {\n      if (isString(value)) {\n        if (startsWith(value, '@')) {\n          value = toFloat(css(element, `--uk-breakpoint-${value.substr(1)}`));\n        } else if (isNaN(value)) {\n          return value;\n        }\n      }\n\n      return value && isNumeric(value) ? `(min-width: ${value}px)` : '';\n    }\n\n    var leader = {\n      mixins: [Class, Media, Resize],\n\n      props: {\n        fill: String\n      },\n\n      data: {\n        fill: '',\n        clsWrapper: 'uk-leader-fill',\n        clsHide: 'uk-leader-hide',\n        attrFill: 'data-fill'\n      },\n\n      computed: {\n        fill({ fill }) {\n          return fill || css(this.$el, '--uk-leader-fill-content');\n        }\n      },\n\n      connected() {\n        [this.wrapper] = wrapInner(this.$el, `<span class=\"${this.clsWrapper}\">`);\n      },\n\n      disconnected() {\n        unwrap(this.wrapper.childNodes);\n      },\n\n      update: {\n        read() {\n          const width = Math.trunc(this.$el.offsetWidth / 2);\n\n          return {\n            width,\n            fill: this.fill,\n            hide: !this.matchMedia\n          };\n        },\n\n        write({ width, fill, hide }) {\n          toggleClass(this.wrapper, this.clsHide, hide);\n          attr(this.wrapper, this.attrFill, new Array(width).join(fill));\n        },\n\n        events: ['resize']\n      }\n    };\n\n    var modal = {\n      install: install$2,\n\n      mixins: [Modal],\n\n      data: {\n        clsPage: 'uk-modal-page',\n        selPanel: '.uk-modal-dialog',\n        selClose:\n        '.uk-modal-close, .uk-modal-close-default, .uk-modal-close-outside, .uk-modal-close-full'\n      },\n\n      events: [\n      {\n        name: 'show',\n\n        self: true,\n\n        handler() {\n          if (hasClass(this.panel, 'uk-margin-auto-vertical')) {\n            addClass(this.$el, 'uk-flex');\n          } else {\n            css(this.$el, 'display', 'block');\n          }\n\n          height(this.$el); // force reflow\n        }\n      },\n\n      {\n        name: 'hidden',\n\n        self: true,\n\n        handler() {\n          css(this.$el, 'display', '');\n          removeClass(this.$el, 'uk-flex');\n        }\n      }]\n\n    };\n\n    function install$2({ modal }) {\n      modal.dialog = function (content, options) {\n        const dialog = modal(\n        `<div class=\"uk-modal\"> <div class=\"uk-modal-dialog\">${content}</div> </div>`,\n        options);\n\n\n        dialog.show();\n\n        on(\n        dialog.$el,\n        'hidden',\n        async () => {\n          await Promise.resolve();\n          dialog.$destroy(true);\n        },\n        { self: true });\n\n\n        return dialog;\n      };\n\n      modal.alert = function (message, options) {\n        return openDialog(\n        ({ labels }) => `<div class=\"uk-modal-body\">${\n    isString(message) ? message : html(message)\n    }</div> <div class=\"uk-modal-footer uk-text-right\"> <button class=\"uk-button uk-button-primary uk-modal-close\" autofocus>${\n    labels.ok\n    }</button> </div>`,\n        options,\n        (deferred) => deferred.resolve());\n\n      };\n\n      modal.confirm = function (message, options) {\n        return openDialog(\n        ({ labels }) => `<form> <div class=\"uk-modal-body\">${isString(message) ? message : html(message)}</div> <div class=\"uk-modal-footer uk-text-right\"> <button class=\"uk-button uk-button-default uk-modal-close\" type=\"button\">${\n    labels.cancel\n    }</button> <button class=\"uk-button uk-button-primary\" autofocus>${labels.ok}</button> </div> </form>`,\n        options,\n        (deferred) => deferred.reject());\n\n      };\n\n      modal.prompt = function (message, value, options) {\n        return openDialog(\n        ({ labels }) => `<form class=\"uk-form-stacked\"> <div class=\"uk-modal-body\"> <label>${isString(message) ? message : html(message)}</label> <input class=\"uk-input\" value=\"${value || ''}\" autofocus> </div> <div class=\"uk-modal-footer uk-text-right\"> <button class=\"uk-button uk-button-default uk-modal-close\" type=\"button\">${\n    labels.cancel\n    }</button> <button class=\"uk-button uk-button-primary\">${labels.ok}</button> </div> </form>`,\n        options,\n        (deferred) => deferred.resolve(null),\n        (dialog) => $('input', dialog.$el).value);\n\n      };\n\n      modal.labels = {\n        ok: 'Ok',\n        cancel: 'Cancel'\n      };\n\n      function openDialog(tmpl, options, hideFn, submitFn) {\n        options = { bgClose: false, escClose: true, labels: modal.labels, ...options };\n\n        const dialog = modal.dialog(tmpl(options), options);\n        const deferred = new Deferred();\n\n        let resolved = false;\n\n        on(dialog.$el, 'submit', 'form', (e) => {\n          e.preventDefault();\n          deferred.resolve(submitFn == null ? void 0 : submitFn(dialog));\n          resolved = true;\n          dialog.hide();\n        });\n\n        on(dialog.$el, 'hide', () => !resolved && hideFn(deferred));\n\n        deferred.promise.dialog = dialog;\n\n        return deferred.promise;\n      }\n    }\n\n    var nav = {\n      extends: Accordion,\n\n      data: {\n        targets: '> .uk-parent',\n        toggle: '> a',\n        content: '> ul'\n      }\n    };\n\n    var navbar = {\n      mixins: [Class, Container],\n\n      props: {\n        dropdown: String,\n        align: String,\n        clsDrop: String,\n        boundary: Boolean,\n        dropbar: Boolean,\n        dropbarAnchor: Boolean,\n        duration: Number,\n        mode: Boolean,\n        offset: Boolean,\n        stretch: Boolean,\n        delayShow: Boolean,\n        delayHide: Boolean,\n        target: Boolean,\n        targetX: Boolean,\n        targetY: Boolean,\n        animation: Boolean,\n        animateOut: Boolean\n      },\n\n      data: {\n        dropdown: '.uk-navbar-nav > li > a, .uk-navbar-item, .uk-navbar-toggle',\n        align: isRtl ? 'right' : 'left',\n        clsDrop: 'uk-navbar-dropdown',\n        boundary: true,\n        dropbar: false,\n        dropbarAnchor: false,\n        duration: 200,\n        container: false\n      },\n\n      computed: {\n        dropbarAnchor({ dropbarAnchor }, $el) {\n          return query(dropbarAnchor, $el) || $el;\n        },\n\n        dropbar: {\n          get({ dropbar }) {\n            if (!dropbar) {\n              return null;\n            }\n\n            dropbar =\n            this._dropbar ||\n            query(dropbar, this.$el) ||\n            $('+ .uk-navbar-dropbar', this.$el);\n\n            return dropbar ? dropbar : this._dropbar = $('<div></div>');\n          },\n\n          watch(dropbar) {\n            addClass(dropbar, 'uk-dropbar', 'uk-dropbar-top', 'uk-navbar-dropbar');\n          },\n\n          immediate: true\n        },\n\n        dropContainer(_, $el) {\n          return this.container || $el;\n        },\n\n        dropdowns: {\n          get({ clsDrop }, $el) {\n            const dropdowns = $$(`.${clsDrop}`, $el);\n\n            if (this.dropContainer !== $el) {\n              for (const el of $$(`.${clsDrop}`, this.dropContainer)) {var _this$getDropdown;\n                const target = (_this$getDropdown = this.getDropdown(el)) == null ? void 0 : _this$getDropdown.targetEl;\n                if (!includes(dropdowns, el) && target && within(target, this.$el)) {\n                  dropdowns.push(el);\n                }\n              }\n            }\n\n            return dropdowns;\n          },\n\n          watch(dropdowns) {\n            this.$create(\n            'drop',\n            dropdowns.filter((el) => !this.getDropdown(el)),\n            {\n              ...this.$props,\n              flip: false,\n              shift: true,\n              pos: `bottom-${this.align}`,\n              boundary: this.boundary === true ? this.$el : this.boundary\n            });\n\n          },\n\n          immediate: true\n        },\n\n        toggles: {\n          get({ dropdown }, $el) {\n            return $$(dropdown, $el);\n          },\n\n          watch() {\n            const justify = hasClass(this.$el, 'uk-navbar-justify');\n            for (const container of $$(\n            '.uk-navbar-nav, .uk-navbar-left, .uk-navbar-right',\n            this.$el))\n            {\n              css(container, 'flexGrow', justify ? $$(this.dropdown, container).length : '');\n            }\n          },\n\n          immediate: true\n        }\n      },\n\n      disconnected() {\n        this.dropbar && remove$1(this.dropbar);\n        delete this._dropbar;\n      },\n\n      events: [\n      {\n        name: 'mouseover focusin',\n\n        delegate() {\n          return this.dropdown;\n        },\n\n        handler({ current }) {\n          const active = this.getActive();\n          if (\n          active &&\n          includes(active.mode, 'hover') &&\n          active.targetEl &&\n          !within(active.targetEl, current) &&\n          !active.isDelaying)\n          {\n            active.hide(false);\n          }\n        }\n      },\n\n      {\n        name: 'keydown',\n\n        delegate() {\n          return this.dropdown;\n        },\n\n        handler(e) {\n          const { current, keyCode } = e;\n          const active = this.getActive();\n\n          if (keyCode === keyMap.DOWN && hasAttr(current, 'aria-expanded')) {\n            e.preventDefault();\n\n            if (!active || active.targetEl !== current) {\n              current.click();\n              once(this.dropContainer, 'show', ({ target }) => focusFirstFocusableElement(target));\n\n            } else {\n              focusFirstFocusableElement(active.$el);\n            }\n          }\n\n          handleNavItemNavigation(e, this.toggles, active);\n        }\n      },\n\n      {\n        name: 'keydown',\n\n        el() {\n          return this.dropContainer;\n        },\n\n        delegate() {\n          return `.${this.clsDrop}`;\n        },\n\n        handler(e) {\n          const { current, keyCode } = e;\n\n          if (!includes(this.dropdowns, current)) {\n            return;\n          }\n\n          const active = this.getActive();\n          const elements = $$(selFocusable, current);\n          const i = findIndex(elements, (el) => matches(el, ':focus'));\n\n          if (keyCode === keyMap.UP) {\n            e.preventDefault();\n            if (i > 0) {\n              elements[i - 1].focus();\n            }\n          }\n\n          if (keyCode === keyMap.DOWN) {\n            e.preventDefault();\n            if (i < elements.length - 1) {\n              elements[i + 1].focus();\n            }\n          }\n\n          if (keyCode === keyMap.ESC) {var _active$targetEl;\n            (_active$targetEl = active.targetEl) == null ? void 0 : _active$targetEl.focus();\n          }\n\n          handleNavItemNavigation(e, this.toggles, active);\n        }\n      },\n\n      {\n        name: 'mouseleave',\n\n        el() {\n          return this.dropbar;\n        },\n\n        filter() {\n          return this.dropbar;\n        },\n\n        handler() {\n          const active = this.getActive();\n\n          if (\n          active &&\n          includes(active.mode, 'hover') &&\n          !this.dropdowns.some((el) => matches(el, ':hover')))\n          {\n            active.hide();\n          }\n        }\n      },\n\n      {\n        name: 'beforeshow',\n\n        el() {\n          return this.dropContainer;\n        },\n\n        filter() {\n          return this.dropbar;\n        },\n\n        handler({ target }) {\n          if (!this.isDropbarDrop(target)) {\n            return;\n          }\n\n          if (this.dropbar.previousElementSibling !== this.dropbarAnchor) {\n            after(this.dropbarAnchor, this.dropbar);\n          }\n\n          addClass(target, `${this.clsDrop}-dropbar`);\n        }\n      },\n\n      {\n        name: 'show',\n\n        el() {\n          return this.dropContainer;\n        },\n\n        filter() {\n          return this.dropbar;\n        },\n\n        handler({ target }) {\n          if (!this.isDropbarDrop(target)) {\n            return;\n          }\n\n          const drop = this.getDropdown(target);\n          this._observer = observeResize([drop.$el, ...drop.target], () => {\n            const targetOffsets = parents(target, `.${this.clsDrop}`).\n            concat(target).\n            map((el) => offset(el));\n            const minTop = Math.min(...targetOffsets.map(({ top }) => top));\n            const maxBottom = Math.max(...targetOffsets.map(({ bottom }) => bottom));\n            const dropbarOffset = offset(this.dropbar);\n            css(this.dropbar, 'top', this.dropbar.offsetTop - (dropbarOffset.top - minTop));\n            this.transitionTo(\n            maxBottom - minTop + toFloat(css(target, 'marginBottom')),\n            target);\n\n          });\n        }\n      },\n\n      {\n        name: 'beforehide',\n\n        el() {\n          return this.dropContainer;\n        },\n\n        filter() {\n          return this.dropbar;\n        },\n\n        handler(e) {\n          const active = this.getActive();\n\n          if (\n          matches(this.dropbar, ':hover') &&\n          active.$el === e.target &&\n          !this.toggles.some((el) => active.targetEl !== el && matches(el, ':focus')))\n          {\n            e.preventDefault();\n          }\n        }\n      },\n\n      {\n        name: 'hide',\n\n        el() {\n          return this.dropContainer;\n        },\n\n        filter() {\n          return this.dropbar;\n        },\n\n        handler({ target }) {var _this$_observer;\n          if (!this.isDropbarDrop(target)) {\n            return;\n          }\n\n          (_this$_observer = this._observer) == null ? void 0 : _this$_observer.disconnect();\n\n          const active = this.getActive();\n\n          if (!active || active.$el === target) {\n            this.transitionTo(0);\n          }\n        }\n      }],\n\n\n      methods: {\n        getActive() {\n          return includes(this.dropdowns, active == null ? void 0 : active.$el) && active;\n        },\n\n        transitionTo(newHeight, el) {\n          const { dropbar } = this;\n          const oldHeight = height(dropbar);\n\n          el = oldHeight < newHeight && el;\n\n          css(el, 'clipPath', `polygon(0 0,100% 0,100% ${oldHeight}px,0 ${oldHeight}px)`);\n\n          height(dropbar, oldHeight);\n\n          Transition.cancel([el, dropbar]);\n          Promise.all([\n          Transition.start(dropbar, { height: newHeight }, this.duration),\n          Transition.start(\n          el,\n          {\n            clipPath: `polygon(0 0,100% 0,100% ${newHeight}px,0 ${newHeight}px)`\n          },\n          this.duration)]).\n\n\n          catch(noop).\n          then(() => css(el, { clipPath: '' }));\n        },\n\n        getDropdown(el) {\n          return this.$getComponent(el, 'drop') || this.$getComponent(el, 'dropdown');\n        },\n\n        isDropbarDrop(el) {\n          return this.getDropdown(el) && hasClass(el, this.clsDrop);\n        }\n      }\n    };\n\n    function handleNavItemNavigation(e, toggles, active) {\n      const { current, keyCode } = e;\n      const target = active.targetEl || current;\n      const i = toggles.indexOf(target);\n\n      // Left\n      if (keyCode === keyMap.LEFT && i > 0) {\n        active.hide == null ? void 0 : active.hide(false);\n        toggles[i - 1].focus();\n      }\n\n      // Right\n      if (keyCode === keyMap.RIGHT && i < toggles.length - 1) {\n        active.hide == null ? void 0 : active.hide(false);\n        toggles[i + 1].focus();\n      }\n\n      if (keyCode === keyMap.TAB) {\n        target.focus();\n        active.hide == null ? void 0 : active.hide(false);\n      }\n    }\n\n    function focusFirstFocusableElement(el) {\n      if (!$(':focus', el)) {var _$;\n        (_$ = $(selFocusable, el)) == null ? void 0 : _$.focus();\n      }\n    }\n\n    const keyMap = {\n      TAB: 9,\n      ESC: 27,\n      LEFT: 37,\n      UP: 38,\n      RIGHT: 39,\n      DOWN: 40\n    };\n\n    var Swipe = {\n      props: {\n        swiping: Boolean\n      },\n\n      data: {\n        swiping: true\n      },\n\n      computed: {\n        swipeTarget(props, $el) {\n          return $el;\n        }\n      },\n\n      connected() {\n        if (!this.swiping) {\n          return;\n        }\n\n        registerEvent(this, {\n          el: this.swipeTarget,\n          name: pointerDown$1,\n          passive: true,\n          handler(e) {\n            if (!isTouch(e)) {\n              return;\n            }\n\n            // Handle Swipe Gesture\n            const pos = getEventPos(e);\n            const target = 'tagName' in e.target ? e.target : parent(e.target);\n            once(document, `${pointerUp$1} ${pointerCancel} scroll`, (e) => {\n              const { x, y } = getEventPos(e);\n\n              // swipe\n              if (\n              e.type !== 'scroll' && target && x && Math.abs(pos.x - x) > 100 ||\n              y && Math.abs(pos.y - y) > 100)\n              {\n                setTimeout(() => {\n                  trigger(target, 'swipe');\n                  trigger(target, `swipe${swipeDirection(pos.x, pos.y, x, y)}`);\n                });\n              }\n            });\n          }\n        });\n      }\n    };\n\n    function swipeDirection(x1, y1, x2, y2) {\n      return Math.abs(x1 - x2) >= Math.abs(y1 - y2) ?\n      x1 - x2 > 0 ?\n      'Left' :\n      'Right' :\n      y1 - y2 > 0 ?\n      'Up' :\n      'Down';\n    }\n\n    var offcanvas = {\n      mixins: [Modal, Swipe],\n\n      args: 'mode',\n\n      props: {\n        mode: String,\n        flip: Boolean,\n        overlay: Boolean\n      },\n\n      data: {\n        mode: 'slide',\n        flip: false,\n        overlay: false,\n        clsPage: 'uk-offcanvas-page',\n        clsContainer: 'uk-offcanvas-container',\n        selPanel: '.uk-offcanvas-bar',\n        clsFlip: 'uk-offcanvas-flip',\n        clsContainerAnimation: 'uk-offcanvas-container-animation',\n        clsSidebarAnimation: 'uk-offcanvas-bar-animation',\n        clsMode: 'uk-offcanvas',\n        clsOverlay: 'uk-offcanvas-overlay',\n        selClose: '.uk-offcanvas-close',\n        container: false\n      },\n\n      computed: {\n        clsFlip({ flip, clsFlip }) {\n          return flip ? clsFlip : '';\n        },\n\n        clsOverlay({ overlay, clsOverlay }) {\n          return overlay ? clsOverlay : '';\n        },\n\n        clsMode({ mode, clsMode }) {\n          return `${clsMode}-${mode}`;\n        },\n\n        clsSidebarAnimation({ mode, clsSidebarAnimation }) {\n          return mode === 'none' || mode === 'reveal' ? '' : clsSidebarAnimation;\n        },\n\n        clsContainerAnimation({ mode, clsContainerAnimation }) {\n          return mode !== 'push' && mode !== 'reveal' ? '' : clsContainerAnimation;\n        },\n\n        transitionElement({ mode }) {\n          return mode === 'reveal' ? parent(this.panel) : this.panel;\n        }\n      },\n\n      update: {\n        read() {\n          if (this.isToggled() && !isVisible(this.$el)) {\n            this.hide();\n          }\n        },\n\n        events: ['resize']\n      },\n\n      events: [\n      {\n        name: 'touchmove',\n\n        self: true,\n        passive: false,\n\n        filter() {\n          return this.overlay;\n        },\n\n        handler(e) {\n          e.cancelable && e.preventDefault();\n        }\n      },\n\n      {\n        name: 'show',\n\n        self: true,\n\n        handler() {\n          if (this.mode === 'reveal' && !hasClass(parent(this.panel), this.clsMode)) {\n            wrapAll(this.panel, '<div>');\n            addClass(parent(this.panel), this.clsMode);\n          }\n\n          const { body, scrollingElement } = document;\n\n          addClass(body, this.clsContainer, this.clsFlip);\n          css(body, 'touch-action', 'pan-y pinch-zoom');\n          css(this.$el, 'display', 'block');\n          css(this.panel, 'maxWidth', scrollingElement.clientWidth);\n          addClass(this.$el, this.clsOverlay);\n          addClass(\n          this.panel,\n          this.clsSidebarAnimation,\n          this.mode === 'reveal' ? '' : this.clsMode);\n\n\n          height(body); // force reflow\n          addClass(body, this.clsContainerAnimation);\n\n          this.clsContainerAnimation && suppressUserScale();\n        }\n      },\n\n      {\n        name: 'hide',\n\n        self: true,\n\n        handler() {\n          removeClass(document.body, this.clsContainerAnimation);\n          css(document.body, 'touch-action', '');\n        }\n      },\n\n      {\n        name: 'hidden',\n\n        self: true,\n\n        handler() {\n          this.clsContainerAnimation && resumeUserScale();\n\n          if (this.mode === 'reveal') {\n            unwrap(this.panel);\n          }\n\n          removeClass(this.panel, this.clsSidebarAnimation, this.clsMode);\n          removeClass(this.$el, this.clsOverlay);\n          css(this.$el, 'display', '');\n          css(this.panel, 'maxWidth', '');\n          removeClass(document.body, this.clsContainer, this.clsFlip);\n        }\n      },\n\n      {\n        name: 'swipeLeft swipeRight',\n\n        handler(e) {\n          if (this.isToggled() && endsWith(e.type, 'Left') ^ this.flip) {\n            this.hide();\n          }\n        }\n      }]\n\n    };\n\n    // Chrome in responsive mode zooms page upon opening offcanvas\n    function suppressUserScale() {\n      getViewport().content += ',user-scalable=0';\n    }\n\n    function resumeUserScale() {\n      const viewport = getViewport();\n      viewport.content = viewport.content.replace(/,user-scalable=0$/, '');\n    }\n\n    function getViewport() {\n      return (\n        $('meta[name=\"viewport\"]', document.head) || append(document.head, '<meta name=\"viewport\">'));\n\n    }\n\n    var overflowAuto = {\n      mixins: [Class, Resize],\n\n      props: {\n        selContainer: String,\n        selContent: String,\n        minHeight: Number\n      },\n\n      data: {\n        selContainer: '.uk-modal',\n        selContent: '.uk-modal-dialog',\n        minHeight: 150\n      },\n\n      computed: {\n        container({ selContainer }, $el) {\n          return closest($el, selContainer);\n        },\n\n        content({ selContent }, $el) {\n          return closest($el, selContent);\n        }\n      },\n\n      resizeTargets() {\n        return [this.container, this.content];\n      },\n\n      update: {\n        read() {\n          if (!this.content || !this.container || !isVisible(this.$el)) {\n            return false;\n          }\n\n          return {\n            max: Math.max(\n            this.minHeight,\n            height(this.container) - (dimensions$1(this.content).height - height(this.$el)))\n\n          };\n        },\n\n        write({ max }) {\n          css(this.$el, { minHeight: this.minHeight, maxHeight: max });\n        },\n\n        events: ['resize']\n      }\n    };\n\n    var responsive = {\n      mixins: [Resize],\n\n      props: ['width', 'height'],\n\n      resizeTargets() {\n        return [this.$el, parent(this.$el)];\n      },\n\n      connected() {\n        addClass(this.$el, 'uk-responsive-width');\n      },\n\n      update: {\n        read() {\n          return isVisible(this.$el) && this.width && this.height ?\n          { width: width(parent(this.$el)), height: this.height } :\n          false;\n        },\n\n        write(dim) {\n          height(\n          this.$el,\n          Dimensions.contain(\n          {\n            height: this.height,\n            width: this.width\n          },\n          dim).\n          height);\n\n        },\n\n        events: ['resize']\n      }\n    };\n\n    var scroll = {\n      props: {\n        offset: Number\n      },\n\n      data: {\n        offset: 0\n      },\n\n      connected() {\n        registerClick(this);\n      },\n\n      disconnected() {\n        unregisterClick(this);\n      },\n\n      methods: {\n        async scrollTo(el) {\n          el = el && $(el) || document.body;\n\n          if (trigger(this.$el, 'beforescroll', [this, el])) {\n            await scrollIntoView(el, { offset: this.offset });\n            trigger(this.$el, 'scrolled', [this, el]);\n          }\n        }\n      }\n    };\n\n    const components$2 = new Set();\n    function registerClick(cmp) {\n      if (!components$2.size) {\n        on(document, 'click', clickHandler);\n      }\n\n      components$2.add(cmp);\n    }\n\n    function unregisterClick(cmp) {\n      components$2.delete(cmp);\n\n      if (!components$2.size) {\n        off(document, 'click', clickHandler);\n      }\n    }\n\n    function clickHandler(e) {\n      if (e.defaultPrevented) {\n        return;\n      }\n\n      for (const component of components$2) {\n        if (within(e.target, component.$el) && isSameSiteLink(component.$el)) {\n          e.preventDefault();\n          component.scrollTo(getTargetElement(component.$el));\n        }\n      }\n    }\n\n    function isSameSiteLink(el) {\n      return ['origin', 'pathname', 'search'].every((part) => location[part] === el[part]);\n    }\n\n    function getTargetElement(el) {\n      if (isSameSiteLink(el)) {\n        const id = decodeURIComponent(el.hash).substring(1);\n        return document.getElementById(id) || document.getElementsByName(id)[0];\n      }\n    }\n\n    var scrollspy = {\n      mixins: [Scroll],\n\n      args: 'cls',\n\n      props: {\n        cls: String,\n        target: String,\n        hidden: Boolean,\n        margin: String,\n        repeat: Boolean,\n        delay: Number\n      },\n\n      data: () => ({\n        cls: '',\n        target: false,\n        hidden: true,\n        margin: '-1px',\n        repeat: false,\n        delay: 0,\n        inViewClass: 'uk-scrollspy-inview'\n      }),\n\n      computed: {\n        elements: {\n          get({ target }, $el) {\n            return target ? $$(target, $el) : [$el];\n          },\n\n          watch(elements, prev) {\n            if (this.hidden) {\n              // use `opacity:0` instead of `visibility:hidden` to make content focusable with keyboard\n              css(filter$1(elements, `:not(.${this.inViewClass})`), 'opacity', 0);\n            }\n\n            if (!isEqual(elements, prev)) {\n              this.$reset();\n            }\n          },\n\n          immediate: true\n        }\n      },\n\n      connected() {\n        this._data.elements = new Map();\n        this.registerObserver(\n        observeIntersection(\n        this.elements,\n        (records) => {\n          const elements = this._data.elements;\n          for (const { target: el, isIntersecting } of records) {\n            if (!elements.has(el)) {\n              elements.set(el, {\n                cls: data(el, 'uk-scrollspy-class') || this.cls\n              });\n            }\n\n            const state = elements.get(el);\n            if (!this.repeat && state.show) {\n              continue;\n            }\n\n            state.show = isIntersecting;\n          }\n\n          this.$emit();\n        },\n        { rootMargin: this.margin },\n        false));\n\n\n      },\n\n      disconnected() {\n        for (const [el, state] of this._data.elements.entries()) {\n          removeClass(el, this.inViewClass, (state == null ? void 0 : state.cls) || '');\n        }\n      },\n\n      update: [\n      {\n        write(data) {\n          for (const [el, state] of data.elements.entries()) {\n            if (state.show && !state.inview && !state.queued) {\n              state.queued = true;\n\n              data.promise = (data.promise || Promise.resolve()).\n              then(() => new Promise((resolve) => setTimeout(resolve, this.delay))).\n              then(() => {\n                this.toggle(el, true);\n                setTimeout(() => {\n                  state.queued = false;\n                  this.$emit();\n                }, 300);\n              });\n            } else if (!state.show && state.inview && !state.queued && this.repeat) {\n              this.toggle(el, false);\n            }\n          }\n        }\n      }],\n\n\n      methods: {\n        toggle(el, inview) {\n          const state = this._data.elements.get(el);\n\n          if (!state) {\n            return;\n          }\n\n          state.off == null ? void 0 : state.off();\n\n          css(el, 'opacity', !inview && this.hidden ? 0 : '');\n\n          toggleClass(el, this.inViewClass, inview);\n          toggleClass(el, state.cls);\n\n          if (/\\buk-animation-/.test(state.cls)) {\n            const removeAnimationClasses = () => removeClasses(el, 'uk-animation-[\\\\w-]+');\n            if (inview) {\n              state.off = once(el, 'animationcancel animationend', removeAnimationClasses);\n            } else {\n              removeAnimationClasses();\n            }\n          }\n\n          trigger(el, inview ? 'inview' : 'outview');\n\n          state.inview = inview;\n\n          // change to `visibility: hidden` does not trigger observers\n          this.$update(el);\n        }\n      }\n    };\n\n    var scrollspyNav = {\n      mixins: [Scroll],\n\n      props: {\n        cls: String,\n        closest: String,\n        scroll: Boolean,\n        overflow: Boolean,\n        offset: Number\n      },\n\n      data: {\n        cls: 'uk-active',\n        closest: false,\n        scroll: false,\n        overflow: true,\n        offset: 0\n      },\n\n      computed: {\n        links: {\n          get(_, $el) {\n            return $$('a[href*=\"#\"]', $el).filter((el) => el.hash && isSameSiteAnchor(el));\n          },\n\n          watch(links) {\n            if (this.scroll) {\n              this.$create('scroll', links, { offset: this.offset || 0 });\n            }\n          },\n\n          immediate: true\n        },\n\n        elements({ closest: selector }) {\n          return closest(this.links, selector || '*');\n        }\n      },\n\n      update: [\n      {\n        read() {\n          const targets = this.links.map(getTargetElement).filter(Boolean);\n\n          const { length } = targets;\n\n          if (!length || !isVisible(this.$el)) {\n            return false;\n          }\n\n          const [scrollElement] = scrollParents(targets, true);\n          const { scrollTop, scrollHeight } = scrollElement;\n          const viewport = offsetViewport(scrollElement);\n          const max = scrollHeight - viewport.height;\n          let active = false;\n\n          if (scrollTop === max) {\n            active = length - 1;\n          } else {\n            for (let i = 0; i < targets.length; i++) {\n              if (offset(targets[i]).top - viewport.top - this.offset > 0) {\n                break;\n              }\n              active = +i;\n            }\n\n            if (active === false && this.overflow) {\n              active = 0;\n            }\n          }\n\n          return { active };\n        },\n\n        write({ active }) {\n          const changed = active !== false && !hasClass(this.elements[active], this.cls);\n\n          this.links.forEach((el) => el.blur());\n          for (let i = 0; i < this.elements.length; i++) {\n            toggleClass(this.elements[i], this.cls, +i === active);\n          }\n\n          if (changed) {\n            trigger(this.$el, 'active', [active, this.elements[active]]);\n          }\n        },\n\n        events: ['scroll', 'resize']\n      }]\n\n    };\n\n    var sticky = {\n      mixins: [Class, Media, Resize, Scroll],\n\n      props: {\n        position: String,\n        top: null,\n        bottom: null,\n        start: null,\n        end: null,\n        offset: String,\n        overflowFlip: Boolean,\n        animation: String,\n        clsActive: String,\n        clsInactive: String,\n        clsFixed: String,\n        clsBelow: String,\n        selTarget: String,\n        showOnUp: Boolean,\n        targetOffset: Number\n      },\n\n      data: {\n        position: 'top',\n        top: false,\n        bottom: false,\n        start: false,\n        end: false,\n        offset: 0,\n        overflowFlip: false,\n        animation: '',\n        clsActive: 'uk-active',\n        clsInactive: '',\n        clsFixed: 'uk-sticky-fixed',\n        clsBelow: 'uk-sticky-below',\n        selTarget: '',\n        showOnUp: false,\n        targetOffset: false\n      },\n\n      computed: {\n        selTarget({ selTarget }, $el) {\n          return selTarget && $(selTarget, $el) || $el;\n        }\n      },\n\n      resizeTargets() {\n        return document.documentElement;\n      },\n\n      connected() {\n        this.start = coerce(this.start || this.top);\n        this.end = coerce(this.end || this.bottom);\n\n        this.placeholder =\n        $('+ .uk-sticky-placeholder', this.$el) ||\n        $('<div class=\"uk-sticky-placeholder\"></div>');\n        this.isFixed = false;\n        this.setActive(false);\n\n        this.registerObserver(observeResize(this.$el, () => !this.isFixed && this.$emit('resize')));\n      },\n\n      disconnected() {\n        if (this.isFixed) {\n          this.hide();\n          removeClass(this.selTarget, this.clsInactive);\n        }\n        reset(this.$el);\n\n        remove$1(this.placeholder);\n        this.placeholder = null;\n      },\n\n      events: [\n      {\n        name: 'resize',\n\n        el() {\n          return [window, window.visualViewport];\n        },\n\n        handler() {\n          this.$emit('resizeViewport');\n        }\n      },\n      {\n        name: 'load hashchange popstate',\n\n        el() {\n          return window;\n        },\n\n        filter() {\n          return this.targetOffset !== false;\n        },\n\n        handler() {\n          const { scrollingElement } = document;\n\n          if (!location.hash || scrollingElement.scrollTop === 0) {\n            return;\n          }\n\n          setTimeout(() => {\n            const targetOffset = offset($(location.hash));\n            const elOffset = offset(this.$el);\n\n            if (this.isFixed && intersectRect(targetOffset, elOffset)) {\n              scrollingElement.scrollTop =\n              targetOffset.top -\n              elOffset.height -\n              toPx(this.targetOffset, 'height', this.placeholder) -\n              toPx(this.offset, 'height', this.placeholder);\n            }\n          });\n        }\n      }],\n\n\n      update: [\n      {\n        read({ height: height$1, width, margin, sticky }, types) {\n          this.inactive = !this.matchMedia || !isVisible(this.$el);\n\n          if (this.inactive) {\n            return;\n          }\n\n          const hide = this.isFixed && types.has('resize') && !sticky;\n          if (hide) {\n            css(this.selTarget, 'transition', '0s');\n            this.hide();\n          }\n\n          if (!this.active) {\n            ({ height: height$1, width } = offset(this.$el));\n            margin = css(this.$el, 'margin');\n          }\n\n          if (hide) {\n            this.show();\n            requestAnimationFrame(() => css(this.selTarget, 'transition', ''));\n          }\n\n          const viewport = toPx('100vh', 'height');\n          const dynamicViewport = height(window);\n          const maxScrollHeight = document.scrollingElement.scrollHeight - viewport;\n\n          let position = this.position;\n          if (this.overflowFlip && height$1 > viewport) {\n            position = position === 'top' ? 'bottom' : 'top';\n          }\n\n          const referenceElement = this.isFixed ? this.placeholder : this.$el;\n          let offset$1 = toPx(this.offset, 'height', sticky ? this.$el : referenceElement);\n          if (position === 'bottom' && (height$1 < dynamicViewport || this.overflowFlip)) {\n            offset$1 += dynamicViewport - height$1;\n          }\n\n          const overflow = this.overflowFlip ? 0 : Math.max(0, height$1 + offset$1 - viewport);\n          const topOffset = offset(referenceElement).top;\n          const elHeight = offset(this.$el).height;\n\n          const start =\n          (this.start === false ?\n          topOffset :\n          parseProp(this.start, this.$el, topOffset)) - offset$1;\n          const end =\n          this.end === false ?\n          maxScrollHeight :\n          Math.min(\n          maxScrollHeight,\n          parseProp(this.end, this.$el, topOffset + height$1, true) -\n          elHeight -\n          offset$1 +\n          overflow);\n\n\n          sticky =\n          maxScrollHeight &&\n          !this.showOnUp &&\n          start + offset$1 === topOffset &&\n          end ===\n          Math.min(\n          maxScrollHeight,\n          parseProp('!*', this.$el, 0, true) - elHeight - offset$1 + overflow) &&\n\n          css(parent(this.$el), 'overflowY') === 'visible';\n\n          return {\n            start,\n            end,\n            offset: offset$1,\n            overflow,\n            topOffset,\n            height: height$1,\n            elHeight,\n            width,\n            margin,\n            top: offsetPosition(referenceElement)[0],\n            sticky\n          };\n        },\n\n        write({ height, width, margin, offset, sticky }) {\n          if (this.inactive || sticky || !this.isFixed) {\n            reset(this.$el);\n          }\n\n          if (this.inactive) {\n            return;\n          }\n\n          if (sticky) {\n            height = width = margin = 0;\n            css(this.$el, { position: 'sticky', top: offset });\n          }\n\n          const { placeholder } = this;\n\n          css(placeholder, { height, width, margin });\n\n          if (!within(placeholder, document)) {\n            placeholder.hidden = true;\n          }\n          (sticky ? before : after)(this.$el, placeholder);\n        },\n\n        events: ['resize', 'resizeViewport']\n      },\n\n      {\n        read({\n          scroll: prevScroll = 0,\n          dir: prevDir = 'down',\n          overflow,\n          overflowScroll = 0,\n          start,\n          end\n        }) {\n          const scroll = document.scrollingElement.scrollTop;\n          const dir = prevScroll <= scroll ? 'down' : 'up';\n\n          return {\n            dir,\n            prevDir,\n            scroll,\n            prevScroll,\n            offsetParentTop: offset(\n            (this.isFixed ? this.placeholder : this.$el).offsetParent).\n            top,\n            overflowScroll: clamp(\n            overflowScroll + clamp(scroll, start, end) - clamp(prevScroll, start, end),\n            0,\n            overflow)\n\n          };\n        },\n\n        write(data, types) {\n          const isScrollUpdate = types.has('scroll');\n          const {\n            initTimestamp = 0,\n            dir,\n            prevDir,\n            scroll,\n            prevScroll = 0,\n            top,\n            start,\n            topOffset,\n            height\n          } = data;\n\n          if (\n          scroll < 0 ||\n          scroll === prevScroll && isScrollUpdate ||\n          this.showOnUp && !isScrollUpdate && !this.isFixed)\n          {\n            return;\n          }\n\n          const now = Date.now();\n          if (now - initTimestamp > 300 || dir !== prevDir) {\n            data.initScroll = scroll;\n            data.initTimestamp = now;\n          }\n\n          if (\n          this.showOnUp &&\n          !this.isFixed &&\n          Math.abs(data.initScroll - scroll) <= 30 &&\n          Math.abs(prevScroll - scroll) <= 10)\n          {\n            return;\n          }\n\n          if (\n          this.inactive ||\n          scroll < start ||\n          this.showOnUp && (\n          scroll <= start ||\n          dir === 'down' && isScrollUpdate ||\n          dir === 'up' && !this.isFixed && scroll <= topOffset + height))\n          {\n            if (!this.isFixed) {\n              if (Animation.inProgress(this.$el) && top > scroll) {\n                Animation.cancel(this.$el);\n                this.hide();\n              }\n\n              return;\n            }\n\n            if (this.animation && scroll > topOffset) {\n              Animation.cancel(this.$el);\n              Animation.out(this.$el, this.animation).then(() => this.hide(), noop);\n            } else {\n              this.hide();\n            }\n          } else if (this.isFixed) {\n            this.update();\n          } else if (this.animation && scroll > topOffset) {\n            Animation.cancel(this.$el);\n            this.show();\n            Animation.in(this.$el, this.animation).catch(noop);\n          } else {\n            this.show();\n          }\n        },\n\n        events: ['resize', 'resizeViewport', 'scroll']\n      }],\n\n\n      methods: {\n        show() {\n          this.isFixed = true;\n          this.update();\n          this.placeholder.hidden = false;\n        },\n\n        hide() {\n          const { offset, sticky } = this._data;\n          this.setActive(false);\n          removeClass(this.$el, this.clsFixed, this.clsBelow);\n          if (sticky) {\n            css(this.$el, 'top', offset);\n          } else {\n            css(this.$el, {\n              position: '',\n              top: '',\n              width: '',\n              marginTop: ''\n            });\n          }\n          this.placeholder.hidden = true;\n          this.isFixed = false;\n        },\n\n        update() {\n          let {\n            width,\n            scroll = 0,\n            overflow,\n            overflowScroll = 0,\n            start,\n            end,\n            offset,\n            topOffset,\n            height,\n            elHeight,\n            offsetParentTop,\n            sticky\n          } = this._data;\n          const active = start !== 0 || scroll > start;\n\n          if (!sticky) {\n            let position = 'fixed';\n\n            if (scroll > end) {\n              offset += end - offsetParentTop;\n              position = 'absolute';\n            }\n\n            css(this.$el, { position, width });\n            css(this.$el, 'marginTop', 0, 'important');\n          }\n\n          if (overflow) {\n            offset -= overflowScroll;\n          }\n\n          css(this.$el, 'top', offset);\n\n          this.setActive(active);\n          toggleClass(\n          this.$el,\n          this.clsBelow,\n          scroll > topOffset + (sticky ? Math.min(height, elHeight) : height));\n\n          addClass(this.$el, this.clsFixed);\n        },\n\n        setActive(active) {\n          const prev = this.active;\n          this.active = active;\n          if (active) {\n            replaceClass(this.selTarget, this.clsInactive, this.clsActive);\n            prev !== active && trigger(this.$el, 'active');\n          } else {\n            replaceClass(this.selTarget, this.clsActive, this.clsInactive);\n            prev !== active && trigger(this.$el, 'inactive');\n          }\n        }\n      }\n    };\n\n    function parseProp(value, el, propOffset, padding) {\n      if (!value) {\n        return 0;\n      }\n\n      if (isNumeric(value) || isString(value) && value.match(/^-?\\d/)) {\n        return propOffset + toPx(value, 'height', el, true);\n      } else {\n        const refElement = value === true ? parent(el) : query(value, el);\n        return (\n          offset(refElement).bottom - (\n          padding && refElement && within(el, refElement) ?\n          toFloat(css(refElement, 'paddingBottom')) :\n          0));\n\n      }\n    }\n\n    function coerce(value) {\n      if (value === 'true') {\n        return true;\n      } else if (value === 'false') {\n        return false;\n      }\n      return value;\n    }\n\n    function reset(el) {\n      css(el, { position: '', top: '', marginTop: '', width: '' });\n    }\n\n    var Switcher = {\n      mixins: [Lazyload, Swipe, Togglable],\n\n      args: 'connect',\n\n      props: {\n        connect: String,\n        toggle: String,\n        itemNav: String,\n        active: Number\n      },\n\n      data: {\n        connect: '~.uk-switcher',\n        toggle: '> * > :first-child',\n        itemNav: false,\n        active: 0,\n        cls: 'uk-active',\n        attrItem: 'uk-switcher-item'\n      },\n\n      computed: {\n        connects: {\n          get({ connect }, $el) {\n            return queryAll(connect, $el);\n          },\n\n          watch(connects) {\n            if (this.swiping) {\n              css(connects, 'touchAction', 'pan-y pinch-zoom');\n            }\n          },\n\n          document: true,\n          immediate: true\n        },\n\n        connectChildren: {\n          get() {\n            return this.connects.map((el) => children(el)).flat();\n          },\n\n          watch() {\n            const index = this.index();\n            for (const el of this.connects) {\n              children(el).forEach((child, i) => toggleClass(child, this.cls, i === index));\n              this.lazyload(this.$el, children(el));\n            }\n          },\n\n          immediate: true\n        },\n\n        toggles: {\n          get({ toggle }, $el) {\n            return $$(toggle, $el).filter(\n            (el) => !matches(el, '.uk-disabled *, .uk-disabled, [disabled]'));\n\n          },\n\n          watch(toggles) {\n            const active = this.index();\n            this.show(~active ? active : toggles[this.active] || toggles[0]);\n          },\n\n          immediate: true\n        },\n\n        children() {\n          return children(this.$el).filter((child) => this.toggles.some((toggle) => within(toggle, child)));\n\n        },\n\n        swipeTarget() {\n          return this.connects;\n        }\n      },\n\n      events: [\n      {\n        name: 'click',\n\n        delegate() {\n          return this.toggle;\n        },\n\n        handler(e) {\n          e.preventDefault();\n          this.show(e.current);\n        }\n      },\n\n      {\n        name: 'click',\n\n        el() {\n          return this.connects.concat(this.itemNav ? queryAll(this.itemNav, this.$el) : []);\n        },\n\n        delegate() {\n          return `[${this.attrItem}],[data-${this.attrItem}]`;\n        },\n\n        handler(e) {\n          e.preventDefault();\n          this.show(data(e.current, this.attrItem));\n        }\n      },\n\n      {\n        name: 'swipeRight swipeLeft',\n\n        filter() {\n          return this.swiping;\n        },\n\n        el() {\n          return this.connects;\n        },\n\n        handler({ type }) {\n          this.show(endsWith(type, 'Left') ? 'next' : 'previous');\n        }\n      }],\n\n\n      methods: {\n        index() {\n          return findIndex(this.children, (el) => hasClass(el, this.cls));\n        },\n\n        show(item) {\n          const prev = this.index();\n          const next = getIndex(item, this.toggles, prev);\n          const active = getIndex(this.children[next], children(this.$el));\n          children(this.$el).forEach((child, i) => {\n            toggleClass(child, this.cls, active === i);\n            attr(this.toggles[i], 'aria-expanded', active === i);\n          });\n\n          const animate = prev >= 0 && prev !== next;\n          this.connects.forEach(async ({ children }) => {\n            await this.toggleElement(\n            toNodes(children).filter((child) => hasClass(child, this.cls)),\n            false,\n            animate);\n\n            await this.toggleElement(children[active], true, animate);\n          });\n        }\n      }\n    };\n\n    var tab = {\n      mixins: [Class],\n\n      extends: Switcher,\n\n      props: {\n        media: Boolean\n      },\n\n      data: {\n        media: 960,\n        attrItem: 'uk-tab-item'\n      },\n\n      connected() {\n        const cls = hasClass(this.$el, 'uk-tab-left') ?\n        'uk-tab-left' :\n        hasClass(this.$el, 'uk-tab-right') ?\n        'uk-tab-right' :\n        false;\n\n        if (cls) {\n          this.$create('toggle', this.$el, { cls, mode: 'media', media: this.media });\n        }\n      }\n    };\n\n    const KEY_SPACE = 32;\n\n    var toggle = {\n      mixins: [Lazyload, Media, Togglable],\n\n      args: 'target',\n\n      props: {\n        href: String,\n        target: null,\n        mode: 'list',\n        queued: Boolean\n      },\n\n      data: {\n        href: false,\n        target: false,\n        mode: 'click',\n        queued: true\n      },\n\n      computed: {\n        target: {\n          get({ href, target }, $el) {\n            target = queryAll(target || href, $el);\n            return target.length && target || [$el];\n          },\n\n          watch() {\n            this.updateAria();\n            this.lazyload(this.$el, this.target);\n          },\n\n          document: true,\n          immediate: true\n        }\n      },\n\n      connected() {\n        if (!includes(this.mode, 'media') && !isFocusable(this.$el)) {\n          attr(this.$el, 'tabindex', '0');\n        }\n      },\n\n      events: [\n      {\n        name: pointerDown$1,\n\n        filter() {\n          return includes(this.mode, 'hover');\n        },\n\n        handler(e) {\n          this._preventClick = null;\n\n          if (!isTouch(e) || this._showState) {\n            return;\n          }\n\n          // Clicking a button does not give it focus on all browsers and platforms\n          // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#clicking_and_focus\n          trigger(this.$el, 'focus');\n          once(\n          document,\n          pointerDown$1,\n          () => trigger(this.$el, 'blur'),\n          true,\n          (e) => !within(e.target, this.$el));\n\n\n          // Prevent initial click to prevent double toggle through focus + click\n          if (includes(this.mode, 'click')) {\n            this._preventClick = true;\n          }\n        }\n      },\n\n      {\n        name: `${pointerEnter} ${pointerLeave} focus blur`,\n\n        filter() {\n          return includes(this.mode, 'hover');\n        },\n\n        handler(e) {\n          if (isTouch(e)) {\n            return;\n          }\n\n          const show = includes([pointerEnter, 'focus'], e.type);\n          const expanded = attr(this.$el, 'aria-expanded');\n\n          // Skip hide if still hovered or focused\n          if (\n          !show && (\n          e.type === pointerLeave && matches(this.$el, ':focus') ||\n          e.type === 'blur' && matches(this.$el, ':hover')))\n          {\n            return;\n          }\n\n          // Skip if state does not change e.g. hover + focus received\n          if (this._showState && show && expanded !== this._showState) {\n            // Ensure reset if state has changed through click\n            if (!show) {\n              this._showState = null;\n            }\n            return;\n          }\n\n          this._showState = show ? expanded : null;\n\n          this.toggle(`toggle${show ? 'show' : 'hide'}`);\n        }\n      },\n\n      {\n        name: 'keydown',\n\n        filter() {\n          return includes(this.mode, 'click') && !isTag(this.$el, 'input');\n        },\n\n        handler(e) {\n          if (e.keyCode === KEY_SPACE) {\n            e.preventDefault();\n            this.$el.click();\n          }\n        }\n      },\n\n      {\n        name: 'click',\n\n        filter() {\n          return ['click', 'hover'].some((mode) => includes(this.mode, mode));\n        },\n\n        handler(e) {\n          let link;\n          if (\n          this._preventClick ||\n          closest(e.target, 'a[href=\"#\"], a[href=\"\"]') ||\n          (link = closest(e.target, 'a[href]')) && (\n          attr(this.$el, 'aria-expanded') !== 'true' ||\n          link.hash && matches(this.target, link.hash)))\n          {\n            e.preventDefault();\n          }\n\n          if (!this._preventClick && includes(this.mode, 'click')) {\n            this.toggle();\n          }\n        }\n      },\n\n      {\n        name: 'hide show',\n\n        self: true,\n\n        el() {\n          return this.target;\n        },\n\n        handler({ target, type }) {\n          this.updateAria(target === this.target[0] && type === 'show');\n        }\n      },\n\n      {\n        name: 'mediachange',\n\n        filter() {\n          return includes(this.mode, 'media');\n        },\n\n        el() {\n          return this.target;\n        },\n\n        handler(e, mediaObj) {\n          if (mediaObj.matches ^ this.isToggled(this.target)) {\n            this.toggle();\n          }\n        }\n      }],\n\n\n      methods: {\n        async toggle(type) {\n          if (!trigger(this.target, type || 'toggle', [this])) {\n            return;\n          }\n\n          if (!this.queued) {\n            return this.toggleElement(this.target);\n          }\n\n          const leaving = this.target.filter((el) => hasClass(el, this.clsLeave));\n\n          if (leaving.length) {\n            for (const el of this.target) {\n              const isLeaving = includes(leaving, el);\n              this.toggleElement(el, isLeaving, isLeaving);\n            }\n            return;\n          }\n\n          const toggled = this.target.filter(this.isToggled);\n          await this.toggleElement(toggled, false);\n          await this.toggleElement(\n          this.target.filter((el) => !includes(toggled, el)),\n          true);\n\n        },\n\n        updateAria(toggled) {\n          if (includes(this.mode, 'media')) {\n            return;\n          }\n\n          attr(\n          this.$el,\n          'aria-expanded',\n          isBoolean(toggled) ? toggled : this.isToggled(this.target));\n\n        }\n      }\n    };\n\n    var components$1 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        Accordion: Accordion,\n        Alert: alert,\n        Close: Close,\n        Cover: cover,\n        Drop: drop,\n        Dropdown: drop,\n        FormCustom: formCustom,\n        Grid: grid,\n        HeightMatch: heightMatch,\n        HeightViewport: heightViewport,\n        Icon: Icon,\n        Img: img,\n        Leader: leader,\n        Margin: Margin,\n        Marker: IconComponent,\n        Modal: modal,\n        Nav: nav,\n        NavParentIcon: NavParentIcon,\n        Navbar: navbar,\n        NavbarParentIcon: IconComponent,\n        NavbarToggleIcon: IconComponent,\n        Offcanvas: offcanvas,\n        OverflowAuto: overflowAuto,\n        OverlayIcon: IconComponent,\n        PaginationNext: IconComponent,\n        PaginationPrevious: IconComponent,\n        Responsive: responsive,\n        Scroll: scroll,\n        Scrollspy: scrollspy,\n        ScrollspyNav: scrollspyNav,\n        SearchIcon: Search,\n        SlidenavNext: Slidenav,\n        SlidenavPrevious: Slidenav,\n        Spinner: Spinner,\n        Sticky: sticky,\n        SubnavParentIcon: IconComponent,\n        Svg: SVG,\n        Switcher: Switcher,\n        Tab: tab,\n        Toggle: toggle,\n        Totop: IconComponent,\n        Video: Video\n    });\n\n    // register components\n    each(components$1, (component, name) => UIkit.component(name, component));\n\n    boot(UIkit);\n\n    const units = ['days', 'hours', 'minutes', 'seconds'];\n\n    var countdown = {\n      mixins: [Class],\n\n      props: {\n        date: String,\n        clsWrapper: String\n      },\n\n      data: {\n        date: '',\n        clsWrapper: '.uk-countdown-%unit%'\n      },\n\n      connected() {\n        this.date = Date.parse(this.$props.date);\n        this.start();\n      },\n\n      disconnected() {\n        this.stop();\n      },\n\n      events: [\n      {\n        name: 'visibilitychange',\n\n        el() {\n          return document;\n        },\n\n        handler() {\n          if (document.hidden) {\n            this.stop();\n          } else {\n            this.start();\n          }\n        }\n      }],\n\n\n      methods: {\n        start() {\n          this.stop();\n          this.update();\n          this.timer = setInterval(this.update, 1000);\n        },\n\n        stop() {\n          clearInterval(this.timer);\n        },\n\n        update() {\n          const timespan = getTimeSpan(this.date);\n\n          if (!this.date || timespan.total <= 0) {\n            this.stop();\n\n            timespan.days = timespan.hours = timespan.minutes = timespan.seconds = 0;\n          }\n\n          for (const unit of units) {\n            const el = $(this.clsWrapper.replace('%unit%', unit), this.$el);\n\n            if (!el) {\n              continue;\n            }\n\n            let digits = String(Math.trunc(timespan[unit]));\n\n            digits = digits.length < 2 ? `0${digits}` : digits;\n\n            if (el.textContent !== digits) {\n              digits = digits.split('');\n\n              if (digits.length !== el.children.length) {\n                html(el, digits.map(() => '<span></span>').join(''));\n              }\n\n              digits.forEach((digit, i) => el.children[i].textContent = digit);\n            }\n          }\n        }\n      }\n    };\n\n    function getTimeSpan(date) {\n      const total = date - Date.now();\n\n      return {\n        total,\n        seconds: total / 1000 % 60,\n        minutes: total / 1000 / 60 % 60,\n        hours: total / 1000 / 60 / 60 % 24,\n        days: total / 1000 / 60 / 60 / 24\n      };\n    }\n\n    const clsLeave = 'uk-transition-leave';\n    const clsEnter = 'uk-transition-enter';\n\n    function fade(action, target, duration, stagger = 0) {\n      const index = transitionIndex(target, true);\n      const propsIn = { opacity: 1 };\n      const propsOut = { opacity: 0 };\n\n      const wrapIndexFn = (fn) => () => index === transitionIndex(target) ? fn() : Promise.reject();\n\n      const leaveFn = wrapIndexFn(async () => {\n        addClass(target, clsLeave);\n\n        await Promise.all(\n        getTransitionNodes(target).map(\n        (child, i) => new Promise((resolve) => setTimeout(\n        () => Transition.start(child, propsOut, duration / 2, 'ease').then(\n        resolve),\n\n        i * stagger))));\n\n\n\n\n\n        removeClass(target, clsLeave);\n      });\n\n      const enterFn = wrapIndexFn(async () => {\n        const oldHeight = height(target);\n\n        addClass(target, clsEnter);\n        action();\n\n        css(children(target), { opacity: 0 });\n\n        // Ensure UIkit updates have propagated\n        await awaitFrame$1();\n\n        const nodes = children(target);\n        const newHeight = height(target);\n\n        // Ensure Grid cells do not stretch when height is applied\n        css(target, 'alignContent', 'flex-start');\n        height(target, oldHeight);\n\n        const transitionNodes = getTransitionNodes(target);\n        css(nodes, propsOut);\n\n        const transitions = transitionNodes.map(async (child, i) => {\n          await awaitTimeout(i * stagger);\n          await Transition.start(child, propsIn, duration / 2, 'ease');\n        });\n\n        if (oldHeight !== newHeight) {\n          transitions.push(\n          Transition.start(\n          target,\n          { height: newHeight },\n          duration / 2 + transitionNodes.length * stagger,\n          'ease'));\n\n\n        }\n\n        await Promise.all(transitions).then(() => {\n          removeClass(target, clsEnter);\n          if (index === transitionIndex(target)) {\n            css(target, { height: '', alignContent: '' });\n            css(nodes, { opacity: '' });\n            delete target.dataset.transition;\n          }\n        });\n      });\n\n      return hasClass(target, clsLeave) ?\n      waitTransitionend(target).then(enterFn) :\n      hasClass(target, clsEnter) ?\n      waitTransitionend(target).then(leaveFn).then(enterFn) :\n      leaveFn().then(enterFn);\n    }\n\n    function transitionIndex(target, next) {\n      if (next) {\n        target.dataset.transition = 1 + transitionIndex(target);\n      }\n\n      return toNumber(target.dataset.transition) || 0;\n    }\n\n    function waitTransitionend(target) {\n      return Promise.all(\n      children(target).\n      filter(Transition.inProgress).\n      map(\n      (el) => new Promise((resolve) => once(el, 'transitionend transitioncanceled', resolve))));\n\n\n    }\n\n    function getTransitionNodes(target) {\n      return getRows(children(target)).reduce(\n      (nodes, row) => nodes.concat(\n      sortBy$1(\n      row.filter((el) => isInView(el)),\n      'offsetLeft')),\n\n\n      []);\n\n    }\n\n    function awaitFrame$1() {\n      return new Promise((resolve) => requestAnimationFrame(resolve));\n    }\n\n    function awaitTimeout(timeout) {\n      return new Promise((resolve) => setTimeout(resolve, timeout));\n    }\n\n    async function slide (action, target, duration) {\n      await awaitFrame();\n\n      let nodes = children(target);\n\n      // Get current state\n      const currentProps = nodes.map((el) => getProps(el, true));\n      const targetProps = { ...css(target, ['height', 'padding']), display: 'block' };\n\n      // Cancel previous animations\n      await Promise.all(nodes.concat(target).map(Transition.cancel));\n\n      // Adding, sorting, removing nodes\n      action();\n\n      // Find new nodes\n      nodes = nodes.concat(children(target).filter((el) => !includes(nodes, el)));\n\n      // Wait for update to propagate\n      await Promise.resolve();\n\n      // Force update\n      fastdom.flush();\n\n      // Get new state\n      const targetStyle = attr(target, 'style');\n      const targetPropsTo = css(target, ['height', 'padding']);\n      const [propsTo, propsFrom] = getTransitionProps(target, nodes, currentProps);\n      const attrsTo = nodes.map((el) => ({ style: attr(el, 'style') }));\n\n      // Reset to previous state\n      nodes.forEach((el, i) => propsFrom[i] && css(el, propsFrom[i]));\n      css(target, targetProps);\n\n      // Start transitions on next frame\n      await awaitFrame();\n\n      const transitions = nodes.\n      map((el, i) => parent(el) === target && Transition.start(el, propsTo[i], duration, 'ease')).\n      concat(Transition.start(target, targetPropsTo, duration, 'ease'));\n\n      try {\n        await Promise.all(transitions);\n        nodes.forEach((el, i) => {\n          attr(el, attrsTo[i]);\n          if (parent(el) === target) {\n            css(el, 'display', propsTo[i].opacity === 0 ? 'none' : '');\n          }\n        });\n        attr(target, 'style', targetStyle);\n      } catch (e) {\n        attr(nodes, 'style', '');\n        resetProps(target, targetProps);\n      }\n    }\n\n    function getProps(el, opacity) {\n      const zIndex = css(el, 'zIndex');\n\n      return isVisible(el) ?\n      {\n        display: '',\n        opacity: opacity ? css(el, 'opacity') : '0',\n        pointerEvents: 'none',\n        position: 'absolute',\n        zIndex: zIndex === 'auto' ? index(el) : zIndex,\n        ...getPositionWithMargin(el)\n      } :\n      false;\n    }\n\n    function getTransitionProps(target, nodes, currentProps) {\n      const propsTo = nodes.map((el, i) => parent(el) && i in currentProps ?\n      currentProps[i] ?\n      isVisible(el) ?\n      getPositionWithMargin(el) :\n      { opacity: 0 } :\n      { opacity: isVisible(el) ? 1 : 0 } :\n      false);\n\n\n      const propsFrom = propsTo.map((props, i) => {\n        const from = parent(nodes[i]) === target && (currentProps[i] || getProps(nodes[i]));\n\n        if (!from) {\n          return false;\n        }\n\n        if (!props) {\n          delete from.opacity;\n        } else if (!('opacity' in props)) {\n          const { opacity } = from;\n\n          if (opacity % 1) {\n            props.opacity = 1;\n          } else {\n            delete from.opacity;\n          }\n        }\n\n        return from;\n      });\n\n      return [propsTo, propsFrom];\n    }\n\n    function resetProps(el, props) {\n      for (const prop in props) {\n        css(el, prop, '');\n      }\n    }\n\n    function getPositionWithMargin(el) {\n      const { height, width } = offset(el);\n\n      return {\n        height,\n        width,\n        transform: '',\n        ...position(el),\n        ...css(el, ['marginTop', 'marginLeft'])\n      };\n    }\n\n    function awaitFrame() {\n      return new Promise((resolve) => requestAnimationFrame(resolve));\n    }\n\n    var Animate = {\n      props: {\n        duration: Number,\n        animation: Boolean\n      },\n\n      data: {\n        duration: 150,\n        animation: 'slide'\n      },\n\n      methods: {\n        animate(action, target = this.$el) {\n          const name = this.animation;\n          const animationFn =\n          name === 'fade' ?\n          fade :\n          name === 'delayed-fade' ?\n          (...args) => fade(...args, 40) :\n          name ?\n          slide :\n          () => {\n            action();\n            return Promise.resolve();\n          };\n\n          return animationFn(action, target, this.duration).catch(noop);\n        }\n      }\n    };\n\n    var filter = {\n      mixins: [Animate],\n\n      args: 'target',\n\n      props: {\n        target: Boolean,\n        selActive: Boolean\n      },\n\n      data: {\n        target: null,\n        selActive: false,\n        attrItem: 'uk-filter-control',\n        cls: 'uk-active',\n        duration: 250\n      },\n\n      computed: {\n        toggles: {\n          get({ attrItem }, $el) {\n            return $$(`[${attrItem}],[data-${attrItem}]`, $el);\n          },\n\n          watch() {\n            this.updateState();\n\n            if (this.selActive !== false) {\n              const actives = $$(this.selActive, this.$el);\n              this.toggles.forEach((el) => toggleClass(el, this.cls, includes(actives, el)));\n            }\n          },\n\n          immediate: true\n        },\n\n        children: {\n          get({ target }, $el) {\n            return $$(`${target} > *`, $el);\n          },\n\n          watch(list, old) {\n            if (old && !isEqualList(list, old)) {\n              this.updateState();\n            }\n          },\n\n          immediate: true\n        }\n      },\n\n      events: [\n      {\n        name: 'click',\n\n        delegate() {\n          return `[${this.attrItem}],[data-${this.attrItem}]`;\n        },\n\n        handler(e) {\n          e.preventDefault();\n          this.apply(e.current);\n        }\n      }],\n\n\n      methods: {\n        apply(el) {\n          const prevState = this.getState();\n          const newState = mergeState(el, this.attrItem, this.getState());\n\n          if (!isEqualState(prevState, newState)) {\n            this.setState(newState);\n          }\n        },\n\n        getState() {\n          return this.toggles.\n          filter((item) => hasClass(item, this.cls)).\n          reduce((state, el) => mergeState(el, this.attrItem, state), {\n            filter: { '': '' },\n            sort: []\n          });\n        },\n\n        async setState(state, animate = true) {\n          state = { filter: { '': '' }, sort: [], ...state };\n\n          trigger(this.$el, 'beforeFilter', [this, state]);\n\n          this.toggles.forEach((el) => toggleClass(el, this.cls, !!matchFilter(el, this.attrItem, state)));\n\n\n          await Promise.all(\n          $$(this.target, this.$el).map((target) => {\n            const filterFn = () => {\n              applyState(state, target, children(target));\n              this.$update(this.$el);\n            };\n            return animate ? this.animate(filterFn, target) : filterFn();\n          }));\n\n\n          trigger(this.$el, 'afterFilter', [this]);\n        },\n\n        updateState() {\n          fastdom.write(() => this.setState(this.getState(), false));\n        }\n      }\n    };\n\n    function getFilter(el, attr) {\n      return parseOptions(data(el, attr), ['filter']);\n    }\n\n    function isEqualState(stateA, stateB) {\n      return ['filter', 'sort'].every((prop) => isEqual(stateA[prop], stateB[prop]));\n    }\n\n    function applyState(state, target, children) {\n      const selector = getSelector(state);\n\n      children.forEach((el) => css(el, 'display', selector && !matches(el, selector) ? 'none' : ''));\n\n      const [sort, order] = state.sort;\n\n      if (sort) {\n        const sorted = sortItems(children, sort, order);\n        if (!isEqual(sorted, children)) {\n          append(target, sorted);\n        }\n      }\n    }\n\n    function mergeState(el, attr, state) {\n      const { filter, group, sort, order = 'asc' } = getFilter(el, attr);\n\n      if (filter || isUndefined(sort)) {\n        if (group) {\n          if (filter) {\n            delete state.filter[''];\n            state.filter[group] = filter;\n          } else {\n            delete state.filter[group];\n\n            if (isEmpty(state.filter) || '' in state.filter) {\n              state.filter = { '': filter || '' };\n            }\n          }\n        } else {\n          state.filter = { '': filter || '' };\n        }\n      }\n\n      if (!isUndefined(sort)) {\n        state.sort = [sort, order];\n      }\n\n      return state;\n    }\n\n    function matchFilter(\n    el,\n    attr,\n    { filter: stateFilter = { '': '' }, sort: [stateSort, stateOrder] })\n    {\n      const { filter = '', group = '', sort, order = 'asc' } = getFilter(el, attr);\n\n      return isUndefined(sort) ?\n      group in stateFilter && filter === stateFilter[group] ||\n      !filter && group && !(group in stateFilter) && !stateFilter[''] :\n      stateSort === sort && stateOrder === order;\n    }\n\n    function isEqualList(listA, listB) {\n      return listA.length === listB.length && listA.every((el) => listB.includes(el));\n    }\n\n    function getSelector({ filter }) {\n      let selector = '';\n      each(filter, (value) => selector += value || '');\n      return selector;\n    }\n\n    function sortItems(nodes, sort, order) {\n      return [...nodes].sort(\n      (a, b) => data(a, sort).localeCompare(data(b, sort), undefined, { numeric: true }) * (\n      order === 'asc' || -1));\n\n    }\n\n    var Animations$2 = {\n      slide: {\n        show(dir) {\n          return [{ transform: translate(dir * -100) }, { transform: translate() }];\n        },\n\n        percent(current) {\n          return translated(current);\n        },\n\n        translate(percent, dir) {\n          return [\n          { transform: translate(dir * -100 * percent) },\n          { transform: translate(dir * 100 * (1 - percent)) }];\n\n        }\n      }\n    };\n\n    function translated(el) {\n      return Math.abs(css(el, 'transform').split(',')[4] / el.offsetWidth) || 0;\n    }\n\n    function translate(value = 0, unit = '%') {\n      value += value ? unit : '';\n      return `translate3d(${value}, 0, 0)`;\n    }\n\n    function scale3d(value) {\n      return `scale3d(${value}, ${value}, 1)`;\n    }\n\n    var Animations$1 = {\n      ...Animations$2,\n      fade: {\n        show() {\n          return [{ opacity: 0 }, { opacity: 1 }];\n        },\n\n        percent(current) {\n          return 1 - css(current, 'opacity');\n        },\n\n        translate(percent) {\n          return [{ opacity: 1 - percent }, { opacity: percent }];\n        }\n      },\n\n      scale: {\n        show() {\n          return [\n          { opacity: 0, transform: scale3d(1 - 0.2) },\n          { opacity: 1, transform: scale3d(1) }];\n\n        },\n\n        percent(current) {\n          return 1 - css(current, 'opacity');\n        },\n\n        translate(percent) {\n          return [\n          { opacity: 1 - percent, transform: scale3d(1 - 0.2 * percent) },\n          { opacity: percent, transform: scale3d(1 - 0.2 + 0.2 * percent) }];\n\n        }\n      }\n    };\n\n    function Transitioner$1(prev, next, dir, { animation, easing }) {\n      const { percent, translate, show = noop } = animation;\n      const props = show(dir);\n      const deferred = new Deferred();\n\n      return {\n        dir,\n\n        show(duration, percent = 0, linear) {\n          const timing = linear ? 'linear' : easing;\n          duration -= Math.round(duration * clamp(percent, -1, 1));\n\n          this.translate(percent);\n\n          triggerUpdate$1(next, 'itemin', { percent, duration, timing, dir });\n          triggerUpdate$1(prev, 'itemout', { percent: 1 - percent, duration, timing, dir });\n\n          Promise.all([\n          Transition.start(next, props[1], duration, timing),\n          Transition.start(prev, props[0], duration, timing)]).\n          then(() => {\n            this.reset();\n            deferred.resolve();\n          }, noop);\n\n          return deferred.promise;\n        },\n\n        cancel() {\n          Transition.cancel([next, prev]);\n        },\n\n        reset() {\n          for (const prop in props[0]) {\n            css([next, prev], prop, '');\n          }\n        },\n\n        forward(duration, percent = this.percent()) {\n          Transition.cancel([next, prev]);\n          return this.show(duration, percent, true);\n        },\n\n        translate(percent) {\n          this.reset();\n\n          const props = translate(percent, dir);\n          css(next, props[1]);\n          css(prev, props[0]);\n          triggerUpdate$1(next, 'itemtranslatein', { percent, dir });\n          triggerUpdate$1(prev, 'itemtranslateout', { percent: 1 - percent, dir });\n        },\n\n        percent() {\n          return percent(prev || next, next, dir);\n        },\n\n        getDistance() {\n          return prev == null ? void 0 : prev.offsetWidth;\n        }\n      };\n    }\n\n    function triggerUpdate$1(el, type, data) {\n      trigger(el, createEvent(type, false, false, data));\n    }\n\n    var SliderAutoplay = {\n      props: {\n        autoplay: Boolean,\n        autoplayInterval: Number,\n        pauseOnHover: Boolean\n      },\n\n      data: {\n        autoplay: false,\n        autoplayInterval: 7000,\n        pauseOnHover: true\n      },\n\n      connected() {\n        this.autoplay && this.startAutoplay();\n      },\n\n      disconnected() {\n        this.stopAutoplay();\n      },\n\n      update() {\n        attr(this.slides, 'tabindex', '-1');\n      },\n\n      events: [\n      {\n        name: 'visibilitychange',\n\n        el() {\n          return document;\n        },\n\n        filter() {\n          return this.autoplay;\n        },\n\n        handler() {\n          if (document.hidden) {\n            this.stopAutoplay();\n          } else {\n            this.startAutoplay();\n          }\n        }\n      }],\n\n\n      methods: {\n        startAutoplay() {\n          this.stopAutoplay();\n\n          this.interval = setInterval(\n          () => (!this.draggable || !$(':focus', this.$el)) && (\n          !this.pauseOnHover || !matches(this.$el, ':hover')) &&\n          !this.stack.length &&\n          this.show('next'),\n          this.autoplayInterval);\n\n        },\n\n        stopAutoplay() {\n          this.interval && clearInterval(this.interval);\n        }\n      }\n    };\n\n    const pointerOptions = { passive: false, capture: true };\n    const pointerUpOptions = { passive: true, capture: true };\n    const pointerDown = 'touchstart mousedown';\n    const pointerMove = 'touchmove mousemove';\n    const pointerUp = 'touchend touchcancel mouseup click input scroll';\n\n    var SliderDrag = {\n      props: {\n        draggable: Boolean\n      },\n\n      data: {\n        draggable: true,\n        threshold: 10\n      },\n\n      created() {\n        for (const key of ['start', 'move', 'end']) {\n          const fn = this[key];\n          this[key] = (e) => {\n            const pos = getEventPos(e).x * (isRtl ? -1 : 1);\n\n            this.prevPos = pos === this.pos ? this.prevPos : this.pos;\n            this.pos = pos;\n\n            fn(e);\n          };\n        }\n      },\n\n      events: [\n      {\n        name: pointerDown,\n\n        passive: true,\n\n        delegate() {\n          return `${this.selList} > *`;\n        },\n\n        handler(e) {\n          if (\n          !this.draggable ||\n          !isTouch(e) && hasSelectableText(e.target) ||\n          closest(e.target, selInput) ||\n          e.button > 0 ||\n          this.length < 2)\n          {\n            return;\n          }\n\n          this.start(e);\n        }\n      },\n\n      {\n        name: 'dragstart',\n\n        handler(e) {\n          e.preventDefault();\n        }\n      },\n\n      {\n        // iOS workaround for slider stopping if swiping fast\n        name: pointerMove,\n        el() {\n          return this.list;\n        },\n        handler: noop,\n        ...pointerOptions\n      }],\n\n\n      methods: {\n        start() {\n          this.drag = this.pos;\n\n          if (this._transitioner) {\n            this.percent = this._transitioner.percent();\n            this.drag += this._transitioner.getDistance() * this.percent * this.dir;\n\n            this._transitioner.cancel();\n            this._transitioner.translate(this.percent);\n\n            this.dragging = true;\n\n            this.stack = [];\n          } else {\n            this.prevIndex = this.index;\n          }\n\n          on(document, pointerMove, this.move, pointerOptions);\n\n          // 'input' event is triggered by video controls\n          on(document, pointerUp, this.end, pointerUpOptions);\n\n          css(this.list, 'userSelect', 'none');\n        },\n\n        move(e) {\n          const distance = this.pos - this.drag;\n\n          if (\n          distance === 0 ||\n          this.prevPos === this.pos ||\n          !this.dragging && Math.abs(distance) < this.threshold)\n          {\n            return;\n          }\n\n          // prevent click event\n          css(this.list, 'pointerEvents', 'none');\n\n          e.cancelable && e.preventDefault();\n\n          this.dragging = true;\n          this.dir = distance < 0 ? 1 : -1;\n\n          const { slides } = this;\n          let { prevIndex } = this;\n          let dis = Math.abs(distance);\n          let nextIndex = this.getIndex(prevIndex + this.dir, prevIndex);\n          let width = this._getDistance(prevIndex, nextIndex) || slides[prevIndex].offsetWidth;\n\n          while (nextIndex !== prevIndex && dis > width) {\n            this.drag -= width * this.dir;\n\n            prevIndex = nextIndex;\n            dis -= width;\n            nextIndex = this.getIndex(prevIndex + this.dir, prevIndex);\n            width = this._getDistance(prevIndex, nextIndex) || slides[prevIndex].offsetWidth;\n          }\n\n          this.percent = dis / width;\n\n          const prev = slides[prevIndex];\n          const next = slides[nextIndex];\n          const changed = this.index !== nextIndex;\n          const edge = prevIndex === nextIndex;\n\n          let itemShown;\n\n          [this.index, this.prevIndex].\n          filter((i) => !includes([nextIndex, prevIndex], i)).\n          forEach((i) => {\n            trigger(slides[i], 'itemhidden', [this]);\n\n            if (edge) {\n              itemShown = true;\n              this.prevIndex = prevIndex;\n            }\n          });\n\n          if (this.index === prevIndex && this.prevIndex !== prevIndex || itemShown) {\n            trigger(slides[this.index], 'itemshown', [this]);\n          }\n\n          if (changed) {\n            this.prevIndex = prevIndex;\n            this.index = nextIndex;\n\n            !edge && trigger(prev, 'beforeitemhide', [this]);\n            trigger(next, 'beforeitemshow', [this]);\n          }\n\n          this._transitioner = this._translate(Math.abs(this.percent), prev, !edge && next);\n\n          if (changed) {\n            !edge && trigger(prev, 'itemhide', [this]);\n            trigger(next, 'itemshow', [this]);\n          }\n        },\n\n        end() {\n          off(document, pointerMove, this.move, pointerOptions);\n          off(document, pointerUp, this.end, pointerUpOptions);\n\n          if (this.dragging) {\n            this.dragging = null;\n\n            if (this.index === this.prevIndex) {\n              this.percent = 1 - this.percent;\n              this.dir *= -1;\n              this._show(false, this.index, true);\n              this._transitioner = null;\n            } else {\n              const dirChange =\n              (isRtl ? this.dir * (isRtl ? 1 : -1) : this.dir) < 0 ===\n              this.prevPos > this.pos;\n              this.index = dirChange ? this.index : this.prevIndex;\n\n              if (dirChange) {\n                this.percent = 1 - this.percent;\n              }\n\n              this.show(\n              this.dir > 0 && !dirChange || this.dir < 0 && dirChange ?\n              'next' :\n              'previous',\n              true);\n\n            }\n          }\n\n          css(this.list, { userSelect: '', pointerEvents: '' });\n\n          this.drag = this.percent = null;\n        }\n      }\n    };\n\n    function hasSelectableText(el) {\n      return (\n        css(el, 'userSelect') !== 'none' &&\n        toNodes(el.childNodes).some((el) => el.nodeType === 3 && el.textContent.trim()));\n\n    }\n\n    var SliderNav = {\n      data: {\n        selNav: false\n      },\n\n      computed: {\n        nav({ selNav }, $el) {\n          return $(selNav, $el);\n        },\n\n        selNavItem({ attrItem }) {\n          return `[${attrItem}],[data-${attrItem}]`;\n        },\n\n        navItems(_, $el) {\n          return $$(this.selNavItem, $el);\n        }\n      },\n\n      update: {\n        write() {\n          if (this.nav && this.length !== this.nav.children.length) {\n            html(\n            this.nav,\n            this.slides.\n            map((_, i) => `<li ${this.attrItem}=\"${i}\"><a href></a></li>`).\n            join(''));\n\n          }\n\n          this.navItems.concat(this.nav).forEach((el) => el && (el.hidden = !this.maxIndex));\n\n          this.updateNav();\n        },\n\n        events: ['resize']\n      },\n\n      events: [\n      {\n        name: 'click',\n\n        delegate() {\n          return this.selNavItem;\n        },\n\n        handler(e) {\n          e.preventDefault();\n          this.show(data(e.current, this.attrItem));\n        }\n      },\n\n      {\n        name: 'itemshow',\n        handler: 'updateNav'\n      }],\n\n\n      methods: {\n        updateNav() {\n          const i = this.getValidIndex();\n          for (const el of this.navItems) {\n            const cmd = data(el, this.attrItem);\n\n            toggleClass(el, this.clsActive, toNumber(cmd) === i);\n            toggleClass(\n            el,\n            'uk-invisible',\n            this.finite && (\n            cmd === 'previous' && i === 0 || cmd === 'next' && i >= this.maxIndex));\n\n          }\n        }\n      }\n    };\n\n    var Slider = {\n      mixins: [SliderAutoplay, SliderDrag, SliderNav, Resize],\n\n      props: {\n        clsActivated: Boolean,\n        easing: String,\n        index: Number,\n        finite: Boolean,\n        velocity: Number\n      },\n\n      data: () => ({\n        easing: 'ease',\n        finite: false,\n        velocity: 1,\n        index: 0,\n        prevIndex: -1,\n        stack: [],\n        percent: 0,\n        clsActive: 'uk-active',\n        clsActivated: false,\n        Transitioner: false,\n        transitionOptions: {}\n      }),\n\n      connected() {\n        this.prevIndex = -1;\n        this.index = this.getValidIndex(this.$props.index);\n        this.stack = [];\n      },\n\n      disconnected() {\n        removeClass(this.slides, this.clsActive);\n      },\n\n      computed: {\n        duration({ velocity }, $el) {\n          return speedUp($el.offsetWidth / velocity);\n        },\n\n        list({ selList }, $el) {\n          return $(selList, $el);\n        },\n\n        maxIndex() {\n          return this.length - 1;\n        },\n\n        slides: {\n          get() {\n            return children(this.list);\n          },\n\n          watch() {\n            this.$emit('resize');\n          }\n        },\n\n        length() {\n          return this.slides.length;\n        }\n      },\n\n      methods: {\n        show(index, force = false) {\n          if (this.dragging || !this.length) {\n            return;\n          }\n\n          const { stack } = this;\n          const queueIndex = force ? 0 : stack.length;\n          const reset = () => {\n            stack.splice(queueIndex, 1);\n\n            if (stack.length) {\n              this.show(stack.shift(), true);\n            }\n          };\n\n          stack[force ? 'unshift' : 'push'](index);\n\n          if (!force && stack.length > 1) {\n            if (stack.length === 2) {var _this$_transitioner;\n              (_this$_transitioner = this._transitioner) == null ? void 0 : _this$_transitioner.forward(Math.min(this.duration, 200));\n            }\n\n            return;\n          }\n\n          const prevIndex = this.getIndex(this.index);\n          const prev = hasClass(this.slides, this.clsActive) && this.slides[prevIndex];\n          const nextIndex = this.getIndex(index, this.index);\n          const next = this.slides[nextIndex];\n\n          if (prev === next) {\n            reset();\n            return;\n          }\n\n          this.dir = getDirection(index, prevIndex);\n          this.prevIndex = prevIndex;\n          this.index = nextIndex;\n\n          if (\n          prev && !trigger(prev, 'beforeitemhide', [this]) ||\n          !trigger(next, 'beforeitemshow', [this, prev]))\n          {\n            this.index = this.prevIndex;\n            reset();\n            return;\n          }\n\n          const promise = this._show(prev, next, force).then(() => {\n            prev && trigger(prev, 'itemhidden', [this]);\n            trigger(next, 'itemshown', [this]);\n\n            stack.shift();\n            this._transitioner = null;\n\n            requestAnimationFrame(() => stack.length && this.show(stack.shift(), true));\n          });\n\n          prev && trigger(prev, 'itemhide', [this]);\n          trigger(next, 'itemshow', [this]);\n\n          return promise;\n        },\n\n        getIndex(index = this.index, prev = this.index) {\n          return clamp(getIndex(index, this.slides, prev, this.finite), 0, this.maxIndex);\n        },\n\n        getValidIndex(index = this.index, prevIndex = this.prevIndex) {\n          return this.getIndex(index, prevIndex);\n        },\n\n        _show(prev, next, force) {\n          this._transitioner = this._getTransitioner(prev, next, this.dir, {\n            easing: force ?\n            next.offsetWidth < 600 ?\n            'cubic-bezier(0.25, 0.46, 0.45, 0.94)' /* easeOutQuad */ :\n            'cubic-bezier(0.165, 0.84, 0.44, 1)' /* easeOutQuart */ :\n            this.easing,\n            ...this.transitionOptions\n          });\n\n          if (!force && !prev) {\n            this._translate(1);\n            return Promise.resolve();\n          }\n\n          const { length } = this.stack;\n          return this._transitioner[length > 1 ? 'forward' : 'show'](\n          length > 1 ? Math.min(this.duration, 75 + 75 / (length - 1)) : this.duration,\n          this.percent);\n\n        },\n\n        _getDistance(prev, next) {\n          return this._getTransitioner(prev, prev !== next && next).getDistance();\n        },\n\n        _translate(percent, prev = this.prevIndex, next = this.index) {\n          const transitioner = this._getTransitioner(prev !== next ? prev : false, next);\n          transitioner.translate(percent);\n          return transitioner;\n        },\n\n        _getTransitioner(\n        prev = this.prevIndex,\n        next = this.index,\n        dir = this.dir || 1,\n        options = this.transitionOptions)\n        {\n          return new this.Transitioner(\n          isNumber(prev) ? this.slides[prev] : prev,\n          isNumber(next) ? this.slides[next] : next,\n          dir * (isRtl ? -1 : 1),\n          options);\n\n        }\n      }\n    };\n\n    function getDirection(index, prevIndex) {\n      return index === 'next' ? 1 : index === 'previous' ? -1 : index < prevIndex ? -1 : 1;\n    }\n\n    function speedUp(x) {\n      return 0.5 * x + 300; // parabola through (400,500; 600,600; 1800,1200)\n    }\n\n    var Slideshow = {\n      mixins: [Slider],\n\n      props: {\n        animation: String\n      },\n\n      data: {\n        animation: 'slide',\n        clsActivated: 'uk-transition-active',\n        Animations: Animations$2,\n        Transitioner: Transitioner$1\n      },\n\n      computed: {\n        animation({ animation, Animations }) {\n          return { ...(Animations[animation] || Animations.slide), name: animation };\n        },\n\n        transitionOptions() {\n          return { animation: this.animation };\n        }\n      },\n\n      events: {\n        beforeitemshow({ target }) {\n          addClass(target, this.clsActive);\n        },\n\n        itemshown({ target }) {\n          addClass(target, this.clsActivated);\n        },\n\n        itemhidden({ target }) {\n          removeClass(target, this.clsActive, this.clsActivated);\n        }\n      }\n    };\n\n    var LightboxPanel = {\n      mixins: [Modal, Slideshow],\n\n      functional: true,\n\n      props: {\n        delayControls: Number,\n        preload: Number,\n        videoAutoplay: Boolean,\n        template: String\n      },\n\n      data: () => ({\n        preload: 1,\n        videoAutoplay: false,\n        delayControls: 3000,\n        items: [],\n        cls: 'uk-open',\n        clsPage: 'uk-lightbox-page',\n        selList: '.uk-lightbox-items',\n        attrItem: 'uk-lightbox-item',\n        selClose: '.uk-close-large',\n        selCaption: '.uk-lightbox-caption',\n        pauseOnHover: false,\n        velocity: 2,\n        Animations: Animations$1,\n        template: `<div class=\"uk-lightbox uk-overflow-hidden\"> <ul class=\"uk-lightbox-items\"></ul> <div class=\"uk-lightbox-toolbar uk-position-top uk-text-right uk-transition-slide-top uk-transition-opaque\"> <button class=\"uk-lightbox-toolbar-icon uk-close-large\" type=\"button\" uk-close></button> </div> <a class=\"uk-lightbox-button uk-position-center-left uk-position-medium uk-transition-fade\" href uk-slidenav-previous uk-lightbox-item=\"previous\"></a> <a class=\"uk-lightbox-button uk-position-center-right uk-position-medium uk-transition-fade\" href uk-slidenav-next uk-lightbox-item=\"next\"></a> <div class=\"uk-lightbox-toolbar uk-lightbox-caption uk-position-bottom uk-text-center uk-transition-slide-bottom uk-transition-opaque\"></div> </div>`\n      }),\n\n      created() {\n        const $el = $(this.template);\n        const list = $(this.selList, $el);\n        this.items.forEach(() => append(list, '<li>'));\n\n        this.$mount(append(this.container, $el));\n      },\n\n      computed: {\n        caption({ selCaption }, $el) {\n          return $(selCaption, $el);\n        }\n      },\n\n      events: [\n      {\n        name: `${pointerMove$1} ${pointerDown$1} keydown`,\n\n        handler: 'showControls'\n      },\n\n      {\n        name: 'click',\n\n        self: true,\n\n        delegate() {\n          return `${this.selList} > *`;\n        },\n\n        handler(e) {\n          if (!e.defaultPrevented) {\n            this.hide();\n          }\n        }\n      },\n\n      {\n        name: 'shown',\n\n        self: true,\n\n        handler() {\n          this.showControls();\n        }\n      },\n\n      {\n        name: 'hide',\n\n        self: true,\n\n        handler() {\n          this.hideControls();\n\n          removeClass(this.slides, this.clsActive);\n          Transition.stop(this.slides);\n        }\n      },\n\n      {\n        name: 'hidden',\n\n        self: true,\n\n        handler() {\n          this.$destroy(true);\n        }\n      },\n\n      {\n        name: 'keyup',\n\n        el() {\n          return document;\n        },\n\n        handler(e) {\n          if (!this.isToggled(this.$el) || !this.draggable) {\n            return;\n          }\n\n          switch (e.keyCode) {\n            case 37:\n              this.show('previous');\n              break;\n            case 39:\n              this.show('next');\n              break;}\n\n        }\n      },\n\n      {\n        name: 'beforeitemshow',\n\n        handler(e) {\n          if (this.isToggled()) {\n            return;\n          }\n\n          this.draggable = false;\n\n          e.preventDefault();\n\n          this.toggleElement(this.$el, true, false);\n\n          this.animation = Animations$1['scale'];\n          removeClass(e.target, this.clsActive);\n          this.stack.splice(1, 0, this.index);\n        }\n      },\n\n      {\n        name: 'itemshow',\n\n        handler() {\n          html(this.caption, this.getItem().caption || '');\n\n          for (let j = -this.preload; j <= this.preload; j++) {\n            this.loadItem(this.index + j);\n          }\n        }\n      },\n\n      {\n        name: 'itemshown',\n\n        handler() {\n          this.draggable = this.$props.draggable;\n        }\n      },\n\n      {\n        name: 'itemload',\n\n        async handler(_, item) {\n          const { source: src, type, alt = '', poster, attrs = {} } = item;\n\n          this.setItem(item, '<span uk-spinner></span>');\n\n          if (!src) {\n            return;\n          }\n\n          let matches;\n          const iframeAttrs = {\n            allowfullscreen: '',\n            style: 'max-width: 100%; box-sizing: border-box;',\n            'uk-responsive': '',\n            'uk-video': `${this.videoAutoplay}`\n          };\n\n          // Image\n          if (\n          type === 'image' ||\n          src.match(/\\.(avif|jpe?g|jfif|a?png|gif|svg|webp)($|\\?)/i))\n          {\n            try {\n              const { width, height } = await getImage(src, attrs.srcset, attrs.size);\n              this.setItem(item, createEl('img', { src, width, height, alt, ...attrs }));\n            } catch (e) {\n              this.setError(item);\n            }\n\n            // Video\n          } else if (type === 'video' || src.match(/\\.(mp4|webm|ogv)($|\\?)/i)) {\n            const video = createEl('video', {\n              src,\n              poster,\n              controls: '',\n              playsinline: '',\n              'uk-video': `${this.videoAutoplay}`\n            });\n\n            on(video, 'loadedmetadata', () => {\n              attr(video, {\n                width: video.videoWidth,\n                height: video.videoHeight,\n                ...attrs\n              });\n              this.setItem(item, video);\n            });\n            on(video, 'error', () => this.setError(item));\n\n            // Iframe\n          } else if (type === 'iframe' || src.match(/\\.(html|php)($|\\?)/i)) {\n            this.setItem(\n            item,\n            createEl('iframe', {\n              src,\n              allowfullscreen: '',\n              class: 'uk-lightbox-iframe',\n              ...attrs\n            }));\n\n\n            // YouTube\n          } else if (\n          matches = src.match(\n          /\\/\\/(?:.*?youtube(-nocookie)?\\..*?[?&]v=|youtu\\.be\\/)([\\w-]{11})[&?]?(.*)?/))\n\n          {\n            this.setItem(\n            item,\n            createEl('iframe', {\n              src: `https://www.youtube${matches[1] || ''}.com/embed/${matches[2]}${\n          matches[3] ? `?${matches[3]}` : ''\n          }`,\n              width: 1920,\n              height: 1080,\n              ...iframeAttrs,\n              ...attrs\n            }));\n\n\n            // Vimeo\n          } else if (matches = src.match(/\\/\\/.*?vimeo\\.[a-z]+\\/(\\d+)[&?]?(.*)?/)) {\n            try {\n              const { height, width } = await (\n              await fetch(\n              `https://vimeo.com/api/oembed.json?maxwidth=1920&url=${encodeURI(\n          src)\n          }`,\n              {\n                credentials: 'omit'\n              })).\n\n              json();\n\n              this.setItem(\n              item,\n              createEl('iframe', {\n                src: `https://player.vimeo.com/video/${matches[1]}${\n            matches[2] ? `?${matches[2]}` : ''\n            }`,\n                width,\n                height,\n                ...iframeAttrs,\n                ...attrs\n              }));\n\n            } catch (e) {\n              this.setError(item);\n            }\n          }\n        }\n      }],\n\n\n      methods: {\n        loadItem(index = this.index) {\n          const item = this.getItem(index);\n\n          if (!this.getSlide(item).childElementCount) {\n            trigger(this.$el, 'itemload', [item]);\n          }\n        },\n\n        getItem(index = this.index) {\n          return this.items[getIndex(index, this.slides)];\n        },\n\n        setItem(item, content) {\n          trigger(this.$el, 'itemloaded', [this, html(this.getSlide(item), content)]);\n        },\n\n        getSlide(item) {\n          return this.slides[this.items.indexOf(item)];\n        },\n\n        setError(item) {\n          this.setItem(item, '<span uk-icon=\"icon: bolt; ratio: 2\"></span>');\n        },\n\n        showControls() {\n          clearTimeout(this.controlsTimer);\n          this.controlsTimer = setTimeout(this.hideControls, this.delayControls);\n\n          addClass(this.$el, 'uk-active', 'uk-transition-active');\n        },\n\n        hideControls() {\n          removeClass(this.$el, 'uk-active', 'uk-transition-active');\n        }\n      }\n    };\n\n    function createEl(tag, attrs) {\n      const el = fragment(`<${tag}>`);\n      attr(el, attrs);\n      return el;\n    }\n\n    var lightbox = {\n      install: install$1,\n\n      props: { toggle: String },\n\n      data: { toggle: 'a' },\n\n      computed: {\n        toggles: {\n          get({ toggle }, $el) {\n            return $$(toggle, $el);\n          },\n\n          watch() {\n            this.hide();\n          }\n        }\n      },\n\n      disconnected() {\n        this.hide();\n      },\n\n      events: [\n      {\n        name: 'click',\n\n        delegate() {\n          return `${this.toggle}:not(.uk-disabled)`;\n        },\n\n        handler(e) {\n          e.preventDefault();\n          this.show(e.current);\n        }\n      }],\n\n\n      methods: {\n        show(index) {\n          const items = uniqueBy(this.toggles.map(toItem), 'source');\n\n          if (isElement(index)) {\n            const { source } = toItem(index);\n            index = findIndex(items, ({ source: src }) => source === src);\n          }\n\n          this.panel = this.panel || this.$create('lightboxPanel', { ...this.$props, items });\n\n          on(this.panel.$el, 'hidden', () => this.panel = null);\n\n          return this.panel.show(index);\n        },\n\n        hide() {var _this$panel;\n          return (_this$panel = this.panel) == null ? void 0 : _this$panel.hide();\n        }\n      }\n    };\n\n    function install$1(UIkit, Lightbox) {\n      if (!UIkit.lightboxPanel) {\n        UIkit.component('lightboxPanel', LightboxPanel);\n      }\n\n      assign(Lightbox.props, UIkit.component('lightboxPanel').options.props);\n    }\n\n    function toItem(el) {\n      const item = {};\n\n      for (const attr of ['href', 'caption', 'type', 'poster', 'alt', 'attrs']) {\n        item[attr === 'href' ? 'source' : attr] = data(el, attr);\n      }\n\n      item.attrs = parseOptions(item.attrs);\n\n      return item;\n    }\n\n    var notification = {\n      mixins: [Container],\n\n      functional: true,\n\n      args: ['message', 'status'],\n\n      data: {\n        message: '',\n        status: '',\n        timeout: 5000,\n        group: null,\n        pos: 'top-center',\n        clsContainer: 'uk-notification',\n        clsClose: 'uk-notification-close',\n        clsMsg: 'uk-notification-message'\n      },\n\n      install,\n\n      computed: {\n        marginProp({ pos }) {\n          return `margin${startsWith(pos, 'top') ? 'Top' : 'Bottom'}`;\n        },\n\n        startProps() {\n          return { opacity: 0, [this.marginProp]: -this.$el.offsetHeight };\n        }\n      },\n\n      created() {\n        const container =\n        $(`.${this.clsContainer}-${this.pos}`, this.container) ||\n        append(\n        this.container,\n        `<div class=\"${this.clsContainer} ${this.clsContainer}-${this.pos}\" style=\"display: block\"></div>`);\n\n\n        this.$mount(\n        append(\n        container,\n        `<div class=\"${this.clsMsg}${\n    this.status ? ` ${this.clsMsg}-${this.status}` : ''\n    }\" role=\"alert\"> <a href class=\"${this.clsClose}\" data-uk-close></a> <div>${this.message}</div> </div>`));\n\n\n      },\n\n      async connected() {\n        const margin = toFloat(css(this.$el, this.marginProp));\n        await Transition.start(css(this.$el, this.startProps), {\n          opacity: 1,\n          [this.marginProp]: margin\n        });\n\n        if (this.timeout) {\n          this.timer = setTimeout(this.close, this.timeout);\n        }\n      },\n\n      events: {\n        click(e) {\n          if (closest(e.target, 'a[href=\"#\"],a[href=\"\"]')) {\n            e.preventDefault();\n          }\n          this.close();\n        },\n\n        [pointerEnter]() {\n          if (this.timer) {\n            clearTimeout(this.timer);\n          }\n        },\n\n        [pointerLeave]() {\n          if (this.timeout) {\n            this.timer = setTimeout(this.close, this.timeout);\n          }\n        }\n      },\n\n      methods: {\n        async close(immediate) {\n          const removeFn = (el) => {\n            const container = parent(el);\n\n            trigger(el, 'close', [this]);\n            remove$1(el);\n\n            if (!(container != null && container.hasChildNodes())) {\n              remove$1(container);\n            }\n          };\n\n          if (this.timer) {\n            clearTimeout(this.timer);\n          }\n\n          if (!immediate) {\n            await Transition.start(this.$el, this.startProps);\n          }\n\n          removeFn(this.$el);\n        }\n      }\n    };\n\n    function install(UIkit) {\n      UIkit.notification.closeAll = function (group, immediate) {\n        apply(document.body, (el) => {\n          const notification = UIkit.getComponent(el, 'notification');\n          if (notification && (!group || group === notification.group)) {\n            notification.close(immediate);\n          }\n        });\n      };\n    }\n\n    const props = {\n      x: transformFn,\n      y: transformFn,\n      rotate: transformFn,\n      scale: transformFn,\n      color: colorFn,\n      backgroundColor: colorFn,\n      borderColor: colorFn,\n      blur: filterFn,\n      hue: filterFn,\n      fopacity: filterFn,\n      grayscale: filterFn,\n      invert: filterFn,\n      saturate: filterFn,\n      sepia: filterFn,\n      opacity: cssPropFn,\n      stroke: strokeFn,\n      bgx: backgroundFn,\n      bgy: backgroundFn\n    };\n\n    const { keys } = Object;\n\n    var Parallax = {\n      mixins: [Media],\n\n      props: fillObject(keys(props), 'list'),\n\n      data: fillObject(keys(props), undefined),\n\n      computed: {\n        props(properties, $el) {\n          const stops = {};\n          for (const prop in properties) {\n            if (prop in props && !isUndefined(properties[prop])) {\n              stops[prop] = properties[prop].slice();\n            }\n          }\n          const result = {};\n          for (const prop in stops) {\n            result[prop] = props[prop](prop, $el, stops[prop], stops);\n          }\n          return result;\n        }\n      },\n\n      events: {\n        load() {\n          this.$emit();\n        }\n      },\n\n      methods: {\n        reset() {\n          for (const prop in this.getCss(0)) {\n            css(this.$el, prop, '');\n          }\n        },\n\n        getCss(percent) {\n          const css = { transform: '', filter: '' };\n          for (const prop in this.props) {\n            this.props[prop](css, percent);\n          }\n          css.willChange = Object.keys(css).\n          filter((key) => css[key] !== '').\n          join(',');\n          return css;\n        }\n      }\n    };\n\n    function transformFn(prop, el, stops) {\n      let unit = getUnit(stops) || { x: 'px', y: 'px', rotate: 'deg' }[prop] || '';\n      let transformFn;\n\n      if (prop === 'x' || prop === 'y') {\n        prop = `translate${ucfirst(prop)}`;\n        transformFn = (stop) => toFloat(toFloat(stop).toFixed(unit === 'px' ? 0 : 6));\n      } else if (prop === 'scale') {\n        unit = '';\n        transformFn = (stop) => getUnit([stop]) ? toPx(stop, 'width', el, true) / el.offsetWidth : stop;\n      }\n\n      if (stops.length === 1) {\n        stops.unshift(prop === 'scale' ? 1 : 0);\n      }\n\n      stops = parseStops(stops, transformFn);\n\n      return (css, percent) => {\n        css.transform += ` ${prop}(${getValue(stops, percent)}${unit})`;\n      };\n    }\n\n    function colorFn(prop, el, stops) {\n      if (stops.length === 1) {\n        stops.unshift(getCssValue(el, prop, ''));\n      }\n\n      stops = parseStops(stops, (stop) => parseColor(el, stop));\n\n      return (css, percent) => {\n        const [start, end, p] = getStop(stops, percent);\n        const value = start.\n        map((value, i) => {\n          value += p * (end[i] - value);\n          return i === 3 ? toFloat(value) : parseInt(value, 10);\n        }).\n        join(',');\n        css[prop] = `rgba(${value})`;\n      };\n    }\n\n    function parseColor(el, color) {\n      return getCssValue(el, 'color', color).\n      split(/[(),]/g).\n      slice(1, -1).\n      concat(1).\n      slice(0, 4).\n      map(toFloat);\n    }\n\n    function filterFn(prop, el, stops) {\n      if (stops.length === 1) {\n        stops.unshift(0);\n      }\n\n      const unit = getUnit(stops) || { blur: 'px', hue: 'deg' }[prop] || '%';\n      prop = { fopacity: 'opacity', hue: 'hue-rotate' }[prop] || prop;\n      stops = parseStops(stops);\n\n      return (css, percent) => {\n        const value = getValue(stops, percent);\n        css.filter += ` ${prop}(${value + unit})`;\n      };\n    }\n\n    function cssPropFn(prop, el, stops) {\n      if (stops.length === 1) {\n        stops.unshift(getCssValue(el, prop, ''));\n      }\n\n      stops = parseStops(stops);\n\n      return (css, percent) => {\n        css[prop] = getValue(stops, percent);\n      };\n    }\n\n    function strokeFn(prop, el, stops) {\n      if (stops.length === 1) {\n        stops.unshift(0);\n      }\n\n      const unit = getUnit(stops);\n      const length = getMaxPathLength(el);\n      stops = parseStops(stops.reverse(), (stop) => {\n        stop = toFloat(stop);\n        return unit === '%' ? stop * length / 100 : stop;\n      });\n\n      if (!stops.some(([value]) => value)) {\n        return noop;\n      }\n\n      css(el, 'strokeDasharray', length);\n\n      return (css, percent) => {\n        css.strokeDashoffset = getValue(stops, percent);\n      };\n    }\n\n    function backgroundFn(prop, el, stops, props) {\n      if (stops.length === 1) {\n        stops.unshift(0);\n      }\n\n      const attr = prop === 'bgy' ? 'height' : 'width';\n      props[prop] = parseStops(stops, (stop) => toPx(stop, attr, el));\n\n      const bgProps = ['bgx', 'bgy'].filter((prop) => prop in props);\n      if (bgProps.length === 2 && prop === 'bgx') {\n        return noop;\n      }\n\n      if (getCssValue(el, 'backgroundSize', '') === 'cover') {\n        return backgroundCoverFn(prop, el, stops, props);\n      }\n\n      const positions = {};\n      for (const prop of bgProps) {\n        positions[prop] = getBackgroundPos(el, prop);\n      }\n\n      return setBackgroundPosFn(bgProps, positions, props);\n    }\n\n    function backgroundCoverFn(prop, el, stops, props) {\n      const dimImage = getBackgroundImageDimensions(el);\n\n      if (!dimImage.width) {\n        return noop;\n      }\n\n      const dimEl = {\n        width: el.offsetWidth,\n        height: el.offsetHeight\n      };\n\n      const bgProps = ['bgx', 'bgy'].filter((prop) => prop in props);\n\n      const positions = {};\n      for (const prop of bgProps) {\n        const values = props[prop].map(([value]) => value);\n        const min = Math.min(...values);\n        const max = Math.max(...values);\n        const down = values.indexOf(min) < values.indexOf(max);\n        const diff = max - min;\n\n        positions[prop] = `${(down ? -diff : 0) - (down ? min : max)}px`;\n        dimEl[prop === 'bgy' ? 'height' : 'width'] += diff;\n      }\n\n      const dim = Dimensions.cover(dimImage, dimEl);\n\n      for (const prop of bgProps) {\n        const attr = prop === 'bgy' ? 'height' : 'width';\n        const overflow = dim[attr] - dimEl[attr];\n        positions[prop] = `max(${getBackgroundPos(el, prop)},-${overflow}px) + ${positions[prop]}`;\n      }\n\n      const fn = setBackgroundPosFn(bgProps, positions, props);\n      return (css, percent) => {\n        fn(css, percent);\n        css.backgroundSize = `${dim.width}px ${dim.height}px`;\n        css.backgroundRepeat = 'no-repeat';\n      };\n    }\n\n    function getBackgroundPos(el, prop) {\n      return getCssValue(el, `background-position-${prop.substr(-1)}`, '');\n    }\n\n    function setBackgroundPosFn(bgProps, positions, props) {\n      return function (css, percent) {\n        for (const prop of bgProps) {\n          const value = getValue(props[prop], percent);\n          css[`background-position-${prop.substr(-1)}`] = `calc(${positions[prop]} + ${value}px)`;\n        }\n      };\n    }\n\n    const dimensions = {};\n    function getBackgroundImageDimensions(el) {\n      const src = css(el, 'backgroundImage').replace(/^none|url\\([\"']?(.+?)[\"']?\\)$/, '$1');\n\n      if (dimensions[src]) {\n        return dimensions[src];\n      }\n\n      const image = new Image();\n      if (src) {\n        image.src = src;\n\n        if (!image.naturalWidth) {\n          image.onload = () => {\n            dimensions[src] = toDimensions(image);\n            trigger(el, createEvent('load', false));\n          };\n          return toDimensions(image);\n        }\n      }\n\n      return dimensions[src] = toDimensions(image);\n    }\n\n    function toDimensions(image) {\n      return {\n        width: image.naturalWidth,\n        height: image.naturalHeight\n      };\n    }\n\n    function parseStops(stops, fn = toFloat) {\n      const result = [];\n      const { length } = stops;\n      let nullIndex = 0;\n      for (let i = 0; i < length; i++) {\n        let [value, percent] = isString(stops[i]) ? stops[i].trim().split(' ') : [stops[i]];\n        value = fn(value);\n        percent = percent ? toFloat(percent) / 100 : null;\n\n        if (i === 0) {\n          if (percent === null) {\n            percent = 0;\n          } else if (percent) {\n            result.push([value, 0]);\n          }\n        } else if (i === length - 1) {\n          if (percent === null) {\n            percent = 1;\n          } else if (percent !== 1) {\n            result.push([value, percent]);\n            percent = 1;\n          }\n        }\n\n        result.push([value, percent]);\n\n        if (percent === null) {\n          nullIndex++;\n        } else if (nullIndex) {\n          const leftPercent = result[i - nullIndex - 1][1];\n          const p = (percent - leftPercent) / (nullIndex + 1);\n          for (let j = nullIndex; j > 0; j--) {\n            result[i - j][1] = leftPercent + p * (nullIndex - j + 1);\n          }\n\n          nullIndex = 0;\n        }\n      }\n\n      return result;\n    }\n\n    function getStop(stops, percent) {\n      const index = findIndex(stops.slice(1), ([, targetPercent]) => percent <= targetPercent) + 1;\n      return [\n      stops[index - 1][0],\n      stops[index][0],\n      (percent - stops[index - 1][1]) / (stops[index][1] - stops[index - 1][1])];\n\n    }\n\n    function getValue(stops, percent) {\n      const [start, end, p] = getStop(stops, percent);\n      return isNumber(start) ? start + Math.abs(start - end) * p * (start < end ? 1 : -1) : +end;\n    }\n\n    const unitRe = /^-?\\d+(\\S+)?/;\n    function getUnit(stops, defaultUnit) {\n      for (const stop of stops) {\n        const match = stop.match == null ? void 0 : stop.match(unitRe);\n        if (match) {\n          return match[1];\n        }\n      }\n      return defaultUnit;\n    }\n\n    function getCssValue(el, prop, value) {\n      const prev = el.style[prop];\n      const val = css(css(el, prop, value), prop);\n      el.style[prop] = prev;\n      return val;\n    }\n\n    function fillObject(keys, value) {\n      return keys.reduce((data, prop) => {\n        data[prop] = value;\n        return data;\n      }, {});\n    }\n\n    var parallax = {\n      mixins: [Parallax, Resize, Scroll],\n\n      props: {\n        target: String,\n        viewport: Number, // Deprecated\n        easing: Number,\n        start: String,\n        end: String\n      },\n\n      data: {\n        target: false,\n        viewport: 1,\n        easing: 1,\n        start: 0,\n        end: 0\n      },\n\n      computed: {\n        target({ target }, $el) {\n          return getOffsetElement(target && query(target, $el) || $el);\n        },\n\n        start({ start }) {\n          return toPx(start, 'height', this.target, true);\n        },\n\n        end({ end, viewport }) {\n          return toPx(\n          end || (viewport = (1 - viewport) * 100) && `${viewport}vh+${viewport}%`,\n          'height',\n          this.target,\n          true);\n\n        }\n      },\n\n      resizeTargets() {\n        return [this.$el, this.target];\n      },\n\n      update: {\n        read({ percent }, types) {\n          if (!types.has('scroll')) {\n            percent = false;\n          }\n\n          if (!isVisible(this.$el)) {\n            return false;\n          }\n\n          if (!this.matchMedia) {\n            return;\n          }\n\n          const prev = percent;\n          percent = ease(scrolledOver(this.target, this.start, this.end), this.easing);\n\n          return {\n            percent,\n            style: prev === percent ? false : this.getCss(percent)\n          };\n        },\n\n        write({ style }) {\n          if (!this.matchMedia) {\n            this.reset();\n            return;\n          }\n\n          style && css(this.$el, style);\n        },\n\n        events: ['scroll', 'resize']\n      }\n    };\n\n    /*\n     * Inspired by https://gist.github.com/gre/1650294?permalink_comment_id=3477425#gistcomment-3477425\n     *\n     * linear: 0\n     * easeInSine: 0.5\n     * easeOutSine: -0.5\n     * easeInQuad: 1\n     * easeOutQuad: -1\n     * easeInCubic: 2\n     * easeOutCubic: -2\n     * easeInQuart: 3\n     * easeOutQuart: -3\n     * easeInQuint: 4\n     * easeOutQuint: -4\n     */\n    function ease(percent, easing) {\n      return easing >= 0 ? Math.pow(percent, easing + 1) : 1 - Math.pow(1 - percent, 1 - easing);\n    }\n\n    // SVG elements do not inherit from HTMLElement\n    function getOffsetElement(el) {\n      return el ? 'offsetTop' in el ? el : getOffsetElement(parent(el)) : document.documentElement;\n    }\n\n    var SliderReactive = {\n      update: {\n        write() {\n          if (this.stack.length || this.dragging) {\n            return;\n          }\n\n          const index = this.getValidIndex(this.index);\n\n          if (!~this.prevIndex || this.index !== index) {\n            this.show(index);\n          } else {\n            this._translate(1, this.prevIndex, this.index);\n          }\n        },\n\n        events: ['resize']\n      }\n    };\n\n    var SliderPreload = {\n      mixins: [Lazyload],\n\n      connected() {\n        this.lazyload(this.slides, this.getAdjacentSlides);\n      }\n    };\n\n    function Transitioner (prev, next, dir, { center, easing, list }) {\n      const deferred = new Deferred();\n\n      const from = prev ?\n      getLeft(prev, list, center) :\n      getLeft(next, list, center) + dimensions$1(next).width * dir;\n      const to = next ?\n      getLeft(next, list, center) :\n      from + dimensions$1(prev).width * dir * (isRtl ? -1 : 1);\n\n      return {\n        dir,\n\n        show(duration, percent = 0, linear) {\n          const timing = linear ? 'linear' : easing;\n          duration -= Math.round(duration * clamp(percent, -1, 1));\n\n          this.translate(percent);\n\n          percent = prev ? percent : clamp(percent, 0, 1);\n          triggerUpdate(this.getItemIn(), 'itemin', { percent, duration, timing, dir });\n          prev &&\n          triggerUpdate(this.getItemIn(true), 'itemout', {\n            percent: 1 - percent,\n            duration,\n            timing,\n            dir\n          });\n\n          Transition.start(\n          list,\n          { transform: translate(-to * (isRtl ? -1 : 1), 'px') },\n          duration,\n          timing).\n          then(deferred.resolve, noop);\n\n          return deferred.promise;\n        },\n\n        cancel() {\n          Transition.cancel(list);\n        },\n\n        reset() {\n          css(list, 'transform', '');\n        },\n\n        forward(duration, percent = this.percent()) {\n          Transition.cancel(list);\n          return this.show(duration, percent, true);\n        },\n\n        translate(percent) {\n          const distance = this.getDistance() * dir * (isRtl ? -1 : 1);\n\n          css(\n          list,\n          'transform',\n          translate(\n          clamp(\n          -to + (distance - distance * percent),\n          -getWidth(list),\n          dimensions$1(list).width) * (\n          isRtl ? -1 : 1),\n          'px'));\n\n\n\n          const actives = this.getActives();\n          const itemIn = this.getItemIn();\n          const itemOut = this.getItemIn(true);\n\n          percent = prev ? clamp(percent, -1, 1) : 0;\n\n          for (const slide of children(list)) {\n            const isActive = includes(actives, slide);\n            const isIn = slide === itemIn;\n            const isOut = slide === itemOut;\n            const translateIn =\n            isIn ||\n            !isOut && (\n            isActive ||\n            dir * (isRtl ? -1 : 1) === -1 ^\n            getElLeft(slide, list) > getElLeft(prev || next));\n\n            triggerUpdate(slide, `itemtranslate${translateIn ? 'in' : 'out'}`, {\n              dir,\n              percent: isOut ? 1 - percent : isIn ? percent : isActive ? 1 : 0\n            });\n          }\n        },\n\n        percent() {\n          return Math.abs(\n          (css(list, 'transform').split(',')[4] * (isRtl ? -1 : 1) + from) / (to - from));\n\n        },\n\n        getDistance() {\n          return Math.abs(to - from);\n        },\n\n        getItemIn(out = false) {\n          let actives = this.getActives();\n          let nextActives = inView(list, getLeft(next || prev, list, center));\n\n          if (out) {\n            const temp = actives;\n            actives = nextActives;\n            nextActives = temp;\n          }\n\n          return nextActives[findIndex(nextActives, (el) => !includes(actives, el))];\n        },\n\n        getActives() {\n          return inView(list, getLeft(prev || next, list, center));\n        }\n      };\n    }\n\n    function getLeft(el, list, center) {\n      const left = getElLeft(el, list);\n\n      return center ? left - centerEl(el, list) : Math.min(left, getMax(list));\n    }\n\n    function getMax(list) {\n      return Math.max(0, getWidth(list) - dimensions$1(list).width);\n    }\n\n    function getWidth(list) {\n      return sumBy(children(list), (el) => dimensions$1(el).width);\n    }\n\n    function centerEl(el, list) {\n      return dimensions$1(list).width / 2 - dimensions$1(el).width / 2;\n    }\n\n    function getElLeft(el, list) {\n      return (\n        el &&\n        (position(el).left + (isRtl ? dimensions$1(el).width - dimensions$1(list).width : 0)) * (\n        isRtl ? -1 : 1) ||\n        0);\n\n    }\n\n    function inView(list, listLeft) {\n      listLeft -= 1;\n      const listWidth = dimensions$1(list).width;\n      const listRight = listLeft + listWidth + 2;\n\n      return children(list).filter((slide) => {\n        const slideLeft = getElLeft(slide, list);\n        const slideRight = slideLeft + Math.min(dimensions$1(slide).width, listWidth);\n\n        return slideLeft >= listLeft && slideRight <= listRight;\n      });\n    }\n\n    function triggerUpdate(el, type, data) {\n      trigger(el, createEvent(type, false, false, data));\n    }\n\n    var slider = {\n      mixins: [Class, Slider, SliderReactive, SliderPreload],\n\n      props: {\n        center: Boolean,\n        sets: Boolean\n      },\n\n      data: {\n        center: false,\n        sets: false,\n        attrItem: 'uk-slider-item',\n        selList: '.uk-slider-items',\n        selNav: '.uk-slider-nav',\n        clsContainer: 'uk-slider-container',\n        Transitioner\n      },\n\n      computed: {\n        avgWidth() {\n          return getWidth(this.list) / this.length;\n        },\n\n        finite({ finite }) {\n          return finite || isFinite(this.list, this.center);\n        },\n\n        maxIndex() {\n          if (!this.finite || this.center && !this.sets) {\n            return this.length - 1;\n          }\n\n          if (this.center) {\n            return last(this.sets);\n          }\n\n          let lft = 0;\n          const max = getMax(this.list);\n          const index = findIndex(this.slides, (el) => {\n            if (lft >= max) {\n              return true;\n            }\n\n            lft += dimensions$1(el).width;\n          });\n\n          return ~index ? index : this.length - 1;\n        },\n\n        sets({ sets: enabled }) {\n          if (!enabled) {\n            return;\n          }\n\n          let left = 0;\n          const sets = [];\n          const width = dimensions$1(this.list).width;\n          for (let i = 0; i < this.length; i++) {\n            const slideWidth = dimensions$1(this.slides[i]).width;\n\n            if (left + slideWidth > width) {\n              left = 0;\n            }\n\n            if (this.center) {\n              if (\n              left < width / 2 &&\n              left + slideWidth + dimensions$1(this.slides[+i + 1]).width / 2 > width / 2)\n              {\n                sets.push(+i);\n                left = width / 2 - slideWidth / 2;\n              }\n            } else if (left === 0) {\n              sets.push(Math.min(+i, this.maxIndex));\n            }\n\n            left += slideWidth;\n          }\n\n          if (sets.length) {\n            return sets;\n          }\n        },\n\n        transitionOptions() {\n          return {\n            center: this.center,\n            list: this.list\n          };\n        }\n      },\n\n      connected() {\n        toggleClass(this.$el, this.clsContainer, !$(`.${this.clsContainer}`, this.$el));\n      },\n\n      update: {\n        write() {\n          for (const el of this.navItems) {\n            const index = toNumber(data(el, this.attrItem));\n            if (index !== false) {\n              el.hidden =\n              !this.maxIndex ||\n              index > this.maxIndex ||\n              this.sets && !includes(this.sets, index);\n            }\n          }\n\n          if (this.length && !this.dragging && !this.stack.length) {\n            this.reorder();\n            this._translate(1);\n          }\n\n          this.updateActiveClasses();\n        },\n\n        events: ['resize']\n      },\n\n      events: {\n        beforeitemshow(e) {\n          if (\n          !this.dragging &&\n          this.sets &&\n          this.stack.length < 2 &&\n          !includes(this.sets, this.index))\n          {\n            this.index = this.getValidIndex();\n          }\n\n          const diff = Math.abs(\n          this.index -\n          this.prevIndex + (\n          this.dir > 0 && this.index < this.prevIndex ||\n          this.dir < 0 && this.index > this.prevIndex ?\n          (this.maxIndex + 1) * this.dir :\n          0));\n\n\n          if (!this.dragging && diff > 1) {\n            for (let i = 0; i < diff; i++) {\n              this.stack.splice(1, 0, this.dir > 0 ? 'next' : 'previous');\n            }\n\n            e.preventDefault();\n            return;\n          }\n\n          const index =\n          this.dir < 0 || !this.slides[this.prevIndex] ? this.index : this.prevIndex;\n          this.duration =\n          speedUp(this.avgWidth / this.velocity) * (\n          dimensions$1(this.slides[index]).width / this.avgWidth);\n\n          this.reorder();\n        },\n\n        itemshow() {\n          if (~this.prevIndex) {\n            addClass(this._getTransitioner().getItemIn(), this.clsActive);\n          }\n        },\n\n        itemshown() {\n          this.updateActiveClasses();\n        }\n      },\n\n      methods: {\n        reorder() {\n          if (this.finite) {\n            css(this.slides, 'order', '');\n            return;\n          }\n\n          const index = this.dir > 0 && this.slides[this.prevIndex] ? this.prevIndex : this.index;\n\n          this.slides.forEach((slide, i) => css(\n          slide,\n          'order',\n          this.dir > 0 && i < index ? 1 : this.dir < 0 && i >= this.index ? -1 : ''));\n\n\n\n          if (!this.center) {\n            return;\n          }\n\n          const next = this.slides[index];\n          let width = dimensions$1(this.list).width / 2 - dimensions$1(next).width / 2;\n          let j = 0;\n\n          while (width > 0) {\n            const slideIndex = this.getIndex(--j + index, index);\n            const slide = this.slides[slideIndex];\n\n            css(slide, 'order', slideIndex > index ? -2 : -1);\n            width -= dimensions$1(slide).width;\n          }\n        },\n\n        updateActiveClasses() {\n          const actives = this._getTransitioner(this.index).getActives();\n          const activeClasses = [\n          this.clsActive,\n          (!this.sets || includes(this.sets, toFloat(this.index))) && this.clsActivated ||\n          ''];\n\n          for (const slide of this.slides) {\n            toggleClass(slide, activeClasses, includes(actives, slide));\n          }\n        },\n\n        getValidIndex(index = this.index, prevIndex = this.prevIndex) {\n          index = this.getIndex(index, prevIndex);\n\n          if (!this.sets) {\n            return index;\n          }\n\n          let prev;\n\n          do {\n            if (includes(this.sets, index)) {\n              return index;\n            }\n\n            prev = index;\n            index = this.getIndex(index + this.dir, prevIndex);\n          } while (index !== prev);\n\n          return index;\n        },\n\n        getAdjacentSlides() {\n          const { width } = dimensions$1(this.list);\n          const left = -width;\n          const right = width * 2;\n          const slideWidth = dimensions$1(this.slides[this.index]).width;\n          const slideLeft = this.center ? width / 2 - slideWidth / 2 : 0;\n          const slides = new Set();\n          for (const i of [-1, 1]) {\n            let currentLeft = slideLeft + (i > 0 ? slideWidth : 0);\n            let j = 0;\n            do {\n              const slide = this.slides[this.getIndex(this.index + i + j++ * i)];\n              currentLeft += dimensions$1(slide).width * i;\n              slides.add(slide);\n            } while (this.length > j && currentLeft > left && currentLeft < right);\n          }\n          return Array.from(slides);\n        }\n      }\n    };\n\n    function isFinite(list, center) {\n      if (!list || list.length < 2) {\n        return true;\n      }\n\n      const { width: listWidth } = dimensions$1(list);\n      if (!center) {\n        return Math.ceil(getWidth(list)) < Math.trunc(listWidth + getMaxElWidth(list));\n      }\n\n      const slides = children(list);\n      const listHalf = Math.trunc(listWidth / 2);\n      for (const index in slides) {\n        const slide = slides[index];\n        const slideWidth = dimensions$1(slide).width;\n        const slidesInView = new Set([slide]);\n\n        let diff = 0;\n        for (const i of [-1, 1]) {\n          let left = slideWidth / 2;\n\n          let j = 0;\n\n          while (left < listHalf) {\n            const nextSlide = slides[getIndex(+index + i + j++ * i, slides)];\n\n            if (slidesInView.has(nextSlide)) {\n              return true;\n            }\n\n            left += dimensions$1(nextSlide).width;\n            slidesInView.add(nextSlide);\n          }\n          diff = Math.max(\n          diff,\n          slideWidth / 2 +\n          dimensions$1(slides[getIndex(+index + i, slides)]).width / 2 - (\n          left - listHalf));\n\n        }\n\n        if (\n        diff > sumBy(\n        slides.filter((slide) => !slidesInView.has(slide)),\n        (slide) => dimensions$1(slide).width))\n\n        {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    function getMaxElWidth(list) {\n      return Math.max(0, ...children(list).map((el) => dimensions$1(el).width));\n    }\n\n    var sliderParallax = {\n      mixins: [Parallax],\n\n      data: {\n        selItem: '!li'\n      },\n\n      beforeConnect() {\n        this.item = query(this.selItem, this.$el);\n      },\n\n      disconnected() {\n        this.item = null;\n      },\n\n      events: [\n      {\n        name: 'itemin itemout',\n\n        self: true,\n\n        el() {\n          return this.item;\n        },\n\n        handler({ type, detail: { percent, duration, timing, dir } }) {\n          fastdom.read(() => {\n            if (!this.matchMedia) {\n              return;\n            }\n\n            const propsFrom = this.getCss(getCurrentPercent(type, dir, percent));\n            const propsTo = this.getCss(isIn(type) ? 0.5 : dir > 0 ? 1 : 0);\n            fastdom.write(() => {\n              css(this.$el, propsFrom);\n              Transition.start(this.$el, propsTo, duration, timing).catch(noop);\n            });\n          });\n        }\n      },\n\n      {\n        name: 'transitioncanceled transitionend',\n\n        self: true,\n\n        el() {\n          return this.item;\n        },\n\n        handler() {\n          Transition.cancel(this.$el);\n        }\n      },\n\n      {\n        name: 'itemtranslatein itemtranslateout',\n\n        self: true,\n\n        el() {\n          return this.item;\n        },\n\n        handler({ type, detail: { percent, dir } }) {\n          fastdom.read(() => {\n            if (!this.matchMedia) {\n              this.reset();\n              return;\n            }\n\n            const props = this.getCss(getCurrentPercent(type, dir, percent));\n            fastdom.write(() => css(this.$el, props));\n          });\n        }\n      }]\n\n    };\n\n    function isIn(type) {\n      return endsWith(type, 'in');\n    }\n\n    function getCurrentPercent(type, dir, percent) {\n      percent /= 2;\n\n      return isIn(type) ^ dir < 0 ? percent : 1 - percent;\n    }\n\n    var Animations = {\n      ...Animations$2,\n      fade: {\n        show() {\n          return [{ opacity: 0, zIndex: 0 }, { zIndex: -1 }];\n        },\n\n        percent(current) {\n          return 1 - css(current, 'opacity');\n        },\n\n        translate(percent) {\n          return [{ opacity: 1 - percent, zIndex: 0 }, { zIndex: -1 }];\n        }\n      },\n\n      scale: {\n        show() {\n          return [{ opacity: 0, transform: scale3d(1 + 0.5), zIndex: 0 }, { zIndex: -1 }];\n        },\n\n        percent(current) {\n          return 1 - css(current, 'opacity');\n        },\n\n        translate(percent) {\n          return [\n          { opacity: 1 - percent, transform: scale3d(1 + 0.5 * percent), zIndex: 0 },\n          { zIndex: -1 }];\n\n        }\n      },\n\n      pull: {\n        show(dir) {\n          return dir < 0 ?\n          [\n          { transform: translate(30), zIndex: -1 },\n          { transform: translate(), zIndex: 0 }] :\n\n          [\n          { transform: translate(-100), zIndex: 0 },\n          { transform: translate(), zIndex: -1 }];\n\n        },\n\n        percent(current, next, dir) {\n          return dir < 0 ? 1 - translated(next) : translated(current);\n        },\n\n        translate(percent, dir) {\n          return dir < 0 ?\n          [\n          { transform: translate(30 * percent), zIndex: -1 },\n          { transform: translate(-100 * (1 - percent)), zIndex: 0 }] :\n\n          [\n          { transform: translate(-percent * 100), zIndex: 0 },\n          { transform: translate(30 * (1 - percent)), zIndex: -1 }];\n\n        }\n      },\n\n      push: {\n        show(dir) {\n          return dir < 0 ?\n          [\n          { transform: translate(100), zIndex: 0 },\n          { transform: translate(), zIndex: -1 }] :\n\n          [\n          { transform: translate(-30), zIndex: -1 },\n          { transform: translate(), zIndex: 0 }];\n\n        },\n\n        percent(current, next, dir) {\n          return dir > 0 ? 1 - translated(next) : translated(current);\n        },\n\n        translate(percent, dir) {\n          return dir < 0 ?\n          [\n          { transform: translate(percent * 100), zIndex: 0 },\n          { transform: translate(-30 * (1 - percent)), zIndex: -1 }] :\n\n          [\n          { transform: translate(-30 * percent), zIndex: -1 },\n          { transform: translate(100 * (1 - percent)), zIndex: 0 }];\n\n        }\n      }\n    };\n\n    var slideshow = {\n      mixins: [Class, Slideshow, SliderReactive, SliderPreload],\n\n      props: {\n        ratio: String,\n        minHeight: Number,\n        maxHeight: Number\n      },\n\n      data: {\n        ratio: '16:9',\n        minHeight: false,\n        maxHeight: false,\n        selList: '.uk-slideshow-items',\n        attrItem: 'uk-slideshow-item',\n        selNav: '.uk-slideshow-nav',\n        Animations\n      },\n\n      update: {\n        read() {\n          if (!this.list) {\n            return false;\n          }\n\n          let [width, height] = this.ratio.split(':').map(Number);\n\n          height = height * this.list.offsetWidth / width || 0;\n\n          if (this.minHeight) {\n            height = Math.max(this.minHeight, height);\n          }\n\n          if (this.maxHeight) {\n            height = Math.min(this.maxHeight, height);\n          }\n\n          return { height: height - boxModelAdjust(this.list, 'height', 'content-box') };\n        },\n\n        write({ height }) {\n          height > 0 && css(this.list, 'minHeight', height);\n        },\n\n        events: ['resize']\n      },\n\n      methods: {\n        getAdjacentSlides() {\n          return [1, -1].map((i) => this.slides[this.getIndex(this.index + i)]);\n        }\n      }\n    };\n\n    var sortable = {\n      mixins: [Class, Animate],\n\n      props: {\n        group: String,\n        threshold: Number,\n        clsItem: String,\n        clsPlaceholder: String,\n        clsDrag: String,\n        clsDragState: String,\n        clsBase: String,\n        clsNoDrag: String,\n        clsEmpty: String,\n        clsCustom: String,\n        handle: String\n      },\n\n      data: {\n        group: false,\n        threshold: 5,\n        clsItem: 'uk-sortable-item',\n        clsPlaceholder: 'uk-sortable-placeholder',\n        clsDrag: 'uk-sortable-drag',\n        clsDragState: 'uk-drag',\n        clsBase: 'uk-sortable',\n        clsNoDrag: 'uk-sortable-nodrag',\n        clsEmpty: 'uk-sortable-empty',\n        clsCustom: '',\n        handle: false,\n        pos: {}\n      },\n\n      created() {\n        for (const key of ['init', 'start', 'move', 'end']) {\n          const fn = this[key];\n          this[key] = (e) => {\n            assign(this.pos, getEventPos(e));\n            fn(e);\n          };\n        }\n      },\n\n      events: {\n        name: pointerDown$1,\n        passive: false,\n        handler: 'init'\n      },\n\n      computed: {\n        target() {\n          return (this.$el.tBodies || [this.$el])[0];\n        },\n\n        items() {\n          return children(this.target);\n        },\n\n        isEmpty: {\n          get() {\n            return isEmpty(this.items);\n          },\n\n          watch(empty) {\n            toggleClass(this.target, this.clsEmpty, empty);\n          },\n\n          immediate: true\n        },\n\n        handles: {\n          get({ handle }, el) {\n            return handle ? $$(handle, el) : this.items;\n          },\n\n          watch(handles, prev) {\n            css(prev, { touchAction: '', userSelect: '' });\n            css(handles, { touchAction: hasTouch ? 'none' : '', userSelect: 'none' }); // touchAction set to 'none' causes a performance drop in Chrome 80\n          },\n\n          immediate: true\n        }\n      },\n\n      update: {\n        write(data) {\n          if (!this.drag || !parent(this.placeholder)) {\n            return;\n          }\n\n          const {\n            pos: { x, y },\n            origin: { offsetTop, offsetLeft },\n            placeholder\n          } = this;\n\n          css(this.drag, {\n            top: y - offsetTop,\n            left: x - offsetLeft\n          });\n\n          const sortable = this.getSortable(document.elementFromPoint(x, y));\n\n          if (!sortable) {\n            return;\n          }\n\n          const { items } = sortable;\n\n          if (items.some(Transition.inProgress)) {\n            return;\n          }\n\n          const target = findTarget(items, { x, y });\n\n          if (items.length && (!target || target === placeholder)) {\n            return;\n          }\n\n          const previous = this.getSortable(placeholder);\n          const insertTarget = findInsertTarget(\n          sortable.target,\n          target,\n          placeholder,\n          x,\n          y,\n          sortable === previous && data.moved !== target);\n\n\n          if (insertTarget === false) {\n            return;\n          }\n\n          if (insertTarget && placeholder === insertTarget) {\n            return;\n          }\n\n          if (sortable !== previous) {\n            previous.remove(placeholder);\n            data.moved = target;\n          } else {\n            delete data.moved;\n          }\n\n          sortable.insert(placeholder, insertTarget);\n\n          this.touched.add(sortable);\n        },\n\n        events: ['move']\n      },\n\n      methods: {\n        init(e) {\n          const { target, button, defaultPrevented } = e;\n          const [placeholder] = this.items.filter((el) => within(target, el));\n\n          if (\n          !placeholder ||\n          defaultPrevented ||\n          button > 0 ||\n          isInput(target) ||\n          within(target, `.${this.clsNoDrag}`) ||\n          this.handle && !within(target, this.handle))\n          {\n            return;\n          }\n\n          e.preventDefault();\n\n          this.touched = new Set([this]);\n          this.placeholder = placeholder;\n          this.origin = { target, index: index(placeholder), ...this.pos };\n\n          on(document, pointerMove$1, this.move);\n          on(document, pointerUp$1, this.end);\n\n          if (!this.threshold) {\n            this.start(e);\n          }\n        },\n\n        start(e) {\n          this.drag = appendDrag(this.$container, this.placeholder);\n          const { left, top } = this.placeholder.getBoundingClientRect();\n          assign(this.origin, { offsetLeft: this.pos.x - left, offsetTop: this.pos.y - top });\n\n          addClass(this.drag, this.clsDrag, this.clsCustom);\n          addClass(this.placeholder, this.clsPlaceholder);\n          addClass(this.items, this.clsItem);\n          addClass(document.documentElement, this.clsDragState);\n\n          trigger(this.$el, 'start', [this, this.placeholder]);\n\n          trackScroll(this.pos);\n\n          this.move(e);\n        },\n\n        move(e) {\n          if (this.drag) {\n            this.$emit('move');\n          } else if (\n          Math.abs(this.pos.x - this.origin.x) > this.threshold ||\n          Math.abs(this.pos.y - this.origin.y) > this.threshold)\n          {\n            this.start(e);\n          }\n        },\n\n        end() {\n          off(document, pointerMove$1, this.move);\n          off(document, pointerUp$1, this.end);\n\n          if (!this.drag) {\n            return;\n          }\n\n          untrackScroll();\n\n          const sortable = this.getSortable(this.placeholder);\n\n          if (this === sortable) {\n            if (this.origin.index !== index(this.placeholder)) {\n              trigger(this.$el, 'moved', [this, this.placeholder]);\n            }\n          } else {\n            trigger(sortable.$el, 'added', [sortable, this.placeholder]);\n            trigger(this.$el, 'removed', [this, this.placeholder]);\n          }\n\n          trigger(this.$el, 'stop', [this, this.placeholder]);\n\n          remove$1(this.drag);\n          this.drag = null;\n\n          for (const { clsPlaceholder, clsItem } of this.touched) {\n            for (const sortable of this.touched) {\n              removeClass(sortable.items, clsPlaceholder, clsItem);\n            }\n          }\n          this.touched = null;\n          removeClass(document.documentElement, this.clsDragState);\n        },\n\n        insert(element, target) {\n          addClass(this.items, this.clsItem);\n\n          const insert = () => target ? before(target, element) : append(this.target, element);\n\n          this.animate(insert);\n        },\n\n        remove(element) {\n          if (!within(element, this.target)) {\n            return;\n          }\n\n          this.animate(() => remove$1(element));\n        },\n\n        getSortable(element) {\n          do {\n            const sortable = this.$getComponent(element, 'sortable');\n\n            if (\n            sortable && (\n            sortable === this || this.group !== false && sortable.group === this.group))\n            {\n              return sortable;\n            }\n          } while (element = parent(element));\n        }\n      }\n    };\n\n    let trackTimer;\n    function trackScroll(pos) {\n      let last = Date.now();\n      trackTimer = setInterval(() => {\n        let { x, y } = pos;\n        y += document.scrollingElement.scrollTop;\n\n        const dist = (Date.now() - last) * 0.3;\n        last = Date.now();\n\n        scrollParents(document.elementFromPoint(x, pos.y)).\n        reverse().\n        some((scrollEl) => {\n          let { scrollTop: scroll, scrollHeight } = scrollEl;\n\n          const { top, bottom, height } = offsetViewport(scrollEl);\n\n          if (top < y && top + 35 > y) {\n            scroll -= dist;\n          } else if (bottom > y && bottom - 35 < y) {\n            scroll += dist;\n          } else {\n            return;\n          }\n\n          if (scroll > 0 && scroll < scrollHeight - height) {\n            scrollEl.scrollTop = scroll;\n            return true;\n          }\n        });\n      }, 15);\n    }\n\n    function untrackScroll() {\n      clearInterval(trackTimer);\n    }\n\n    function appendDrag(container, element) {\n      let clone;\n      if (isTag(element, 'li', 'tr')) {\n        clone = $('<div>');\n        append(clone, element.cloneNode(true).children);\n        for (const attribute of element.getAttributeNames()) {\n          attr(clone, attribute, element.getAttribute(attribute));\n        }\n      } else {\n        clone = element.cloneNode(true);\n      }\n\n      append(container, clone);\n\n      css(clone, 'margin', '0', 'important');\n      css(clone, {\n        boxSizing: 'border-box',\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        padding: css(element, 'padding')\n      });\n\n      height(clone.firstElementChild, height(element.firstElementChild));\n\n      return clone;\n    }\n\n    function findTarget(items, point) {\n      return items[findIndex(items, (item) => pointInRect(point, item.getBoundingClientRect()))];\n    }\n\n    function findInsertTarget(list, target, placeholder, x, y, sameList) {\n      if (!children(list).length) {\n        return;\n      }\n\n      const rect = target.getBoundingClientRect();\n      if (!sameList) {\n        if (!isHorizontal(list, placeholder)) {\n          return y < rect.top + rect.height / 2 ? target : target.nextElementSibling;\n        }\n\n        return target;\n      }\n\n      const placeholderRect = placeholder.getBoundingClientRect();\n      const sameRow = linesIntersect(\n      [rect.top, rect.bottom],\n      [placeholderRect.top, placeholderRect.bottom]);\n\n\n      const pointerPos = sameRow ? x : y;\n      const lengthProp = sameRow ? 'width' : 'height';\n      const startProp = sameRow ? 'left' : 'top';\n      const endProp = sameRow ? 'right' : 'bottom';\n\n      const diff =\n      placeholderRect[lengthProp] < rect[lengthProp] ?\n      rect[lengthProp] - placeholderRect[lengthProp] :\n      0;\n\n      if (placeholderRect[startProp] < rect[startProp]) {\n        if (diff && pointerPos < rect[startProp] + diff) {\n          return false;\n        }\n\n        return target.nextElementSibling;\n      }\n\n      if (diff && pointerPos > rect[endProp] - diff) {\n        return false;\n      }\n\n      return target;\n    }\n\n    function isHorizontal(list, placeholder) {\n      const single = children(list).length === 1;\n\n      if (single) {\n        append(list, placeholder);\n      }\n\n      const items = children(list);\n      const isHorizontal = items.some((el, i) => {\n        const rectA = el.getBoundingClientRect();\n        return items.slice(i + 1).some((el) => {\n          const rectB = el.getBoundingClientRect();\n          return !linesIntersect([rectA.left, rectA.right], [rectB.left, rectB.right]);\n        });\n      });\n\n      if (single) {\n        remove$1(placeholder);\n      }\n\n      return isHorizontal;\n    }\n\n    function linesIntersect(lineA, lineB) {\n      return lineA[1] > lineB[0] && lineB[1] > lineA[0];\n    }\n\n    var tooltip = {\n      mixins: [Container, Togglable, Position],\n\n      args: 'title',\n\n      props: {\n        delay: Number,\n        title: String\n      },\n\n      data: {\n        pos: 'top',\n        title: '',\n        delay: 0,\n        animation: ['uk-animation-scale-up'],\n        duration: 100,\n        cls: 'uk-active'\n      },\n\n      beforeConnect() {\n        this.id = `uk-tooltip-${this._uid}`;\n        this._hasTitle = hasAttr(this.$el, 'title');\n        attr(this.$el, {\n          title: '',\n          'aria-describedby': this.id\n        });\n        makeFocusable(this.$el);\n      },\n\n      disconnected() {\n        this.hide();\n\n        if (!attr(this.$el, 'title')) {\n          attr(this.$el, 'title', this._hasTitle ? this.title : null);\n        }\n      },\n\n      methods: {\n        show() {\n          if (this.isToggled(this.tooltip || null) || !this.title) {\n            return;\n          }\n\n          this._unbind = once(\n          document,\n          `keydown ${pointerDown$1}`,\n          this.hide,\n          false,\n          (e) => e.type === pointerDown$1 && !within(e.target, this.$el) ||\n          e.type === 'keydown' && e.keyCode === 27);\n\n\n          clearTimeout(this.showTimer);\n          this.showTimer = setTimeout(this._show, this.delay);\n        },\n\n        async hide() {\n          if (matches(this.$el, 'input:focus')) {\n            return;\n          }\n\n          clearTimeout(this.showTimer);\n\n          if (!this.isToggled(this.tooltip || null)) {\n            return;\n          }\n\n          await this.toggleElement(this.tooltip, false, false);\n          remove$1(this.tooltip);\n          this.tooltip = null;\n          this._unbind();\n        },\n\n        _show() {\n          const [scrollParent] = scrollParents(this.$el);\n          this.tooltip = append(\n          within(scrollParent, this.container) ? scrollParent : this.container,\n          `<div id=\"${this.id}\" class=\"uk-${this.$options.name}\" role=\"tooltip\"> <div class=\"uk-${this.$options.name}-inner\">${this.title}</div> </div>`);\n\n\n          on(this.tooltip, 'toggled', (e, toggled) => {\n            if (!toggled) {\n              return;\n            }\n\n            this.positionAt(this.tooltip, this.$el);\n\n            const [dir, align] = getAlignment(this.tooltip, this.$el, this.pos);\n\n            this.origin =\n            this.axis === 'y' ?\n            `${flipPosition(dir)}-${align}` :\n            `${align}-${flipPosition(dir)}`;\n          });\n\n          this.toggleElement(this.tooltip, true);\n        }\n      },\n\n      events: {\n        focus: 'show',\n        blur: 'hide',\n\n        [`${pointerEnter} ${pointerLeave}`](e) {\n          if (!isTouch(e)) {\n            this[e.type === pointerEnter ? 'show' : 'hide']();\n          }\n        },\n\n        // Clicking a button does not give it focus on all browsers and platforms\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#clicking_and_focus\n        [pointerDown$1](e) {\n          if (isTouch(e)) {\n            this.show();\n          }\n        }\n      }\n    };\n\n    function makeFocusable(el) {\n      if (!isFocusable(el)) {\n        attr(el, 'tabindex', '0');\n      }\n    }\n\n    function getAlignment(el, target, [dir, align]) {\n      const elOffset = offset(el);\n      const targetOffset = offset(target);\n      const properties = [\n      ['left', 'right'],\n      ['top', 'bottom']];\n\n\n      for (const props of properties) {\n        if (elOffset[props[0]] >= targetOffset[props[1]]) {\n          dir = props[1];\n          break;\n        }\n        if (elOffset[props[1]] <= targetOffset[props[0]]) {\n          dir = props[0];\n          break;\n        }\n      }\n\n      const props = includes(properties[0], dir) ? properties[1] : properties[0];\n      if (elOffset[props[0]] === targetOffset[props[0]]) {\n        align = props[0];\n      } else if (elOffset[props[1]] === targetOffset[props[1]]) {\n        align = props[1];\n      } else {\n        align = 'center';\n      }\n\n      return [dir, align];\n    }\n\n    var upload = {\n      props: {\n        allow: String,\n        clsDragover: String,\n        concurrent: Number,\n        maxSize: Number,\n        method: String,\n        mime: String,\n        msgInvalidMime: String,\n        msgInvalidName: String,\n        msgInvalidSize: String,\n        multiple: Boolean,\n        name: String,\n        params: Object,\n        type: String,\n        url: String\n      },\n\n      data: {\n        allow: false,\n        clsDragover: 'uk-dragover',\n        concurrent: 1,\n        maxSize: 0,\n        method: 'POST',\n        mime: false,\n        msgInvalidMime: 'Invalid File Type: %s',\n        msgInvalidName: 'Invalid File Name: %s',\n        msgInvalidSize: 'Invalid File Size: %s Kilobytes Max',\n        multiple: false,\n        name: 'files[]',\n        params: {},\n        type: '',\n        url: '',\n        abort: noop,\n        beforeAll: noop,\n        beforeSend: noop,\n        complete: noop,\n        completeAll: noop,\n        error: noop,\n        fail: noop,\n        load: noop,\n        loadEnd: noop,\n        loadStart: noop,\n        progress: noop\n      },\n\n      events: {\n        change(e) {\n          if (!matches(e.target, 'input[type=\"file\"]')) {\n            return;\n          }\n\n          e.preventDefault();\n\n          if (e.target.files) {\n            this.upload(e.target.files);\n          }\n\n          e.target.value = '';\n        },\n\n        drop(e) {\n          stop(e);\n\n          const transfer = e.dataTransfer;\n\n          if (!(transfer != null && transfer.files)) {\n            return;\n          }\n\n          removeClass(this.$el, this.clsDragover);\n\n          this.upload(transfer.files);\n        },\n\n        dragenter(e) {\n          stop(e);\n        },\n\n        dragover(e) {\n          stop(e);\n          addClass(this.$el, this.clsDragover);\n        },\n\n        dragleave(e) {\n          stop(e);\n          removeClass(this.$el, this.clsDragover);\n        }\n      },\n\n      methods: {\n        async upload(files) {\n          files = toArray(files);\n\n          if (!files.length) {\n            return;\n          }\n\n          trigger(this.$el, 'upload', [files]);\n\n          for (const file of files) {\n            if (this.maxSize && this.maxSize * 1000 < file.size) {\n              this.fail(this.msgInvalidSize.replace('%s', this.maxSize));\n              return;\n            }\n\n            if (this.allow && !match(this.allow, file.name)) {\n              this.fail(this.msgInvalidName.replace('%s', this.allow));\n              return;\n            }\n\n            if (this.mime && !match(this.mime, file.type)) {\n              this.fail(this.msgInvalidMime.replace('%s', this.mime));\n              return;\n            }\n          }\n\n          if (!this.multiple) {\n            files = files.slice(0, 1);\n          }\n\n          this.beforeAll(this, files);\n\n          const chunks = chunk(files, this.concurrent);\n          const upload = async (files) => {\n            const data = new FormData();\n\n            files.forEach((file) => data.append(this.name, file));\n\n            for (const key in this.params) {\n              data.append(key, this.params[key]);\n            }\n\n            try {\n              const xhr = await ajax(this.url, {\n                data,\n                method: this.method,\n                responseType: this.type,\n                beforeSend: (env) => {\n                  const { xhr } = env;\n                  xhr.upload && on(xhr.upload, 'progress', this.progress);\n                  for (const type of ['loadStart', 'load', 'loadEnd', 'abort']) {\n                    on(xhr, type.toLowerCase(), this[type]);\n                  }\n\n                  return this.beforeSend(env);\n                }\n              });\n\n              this.complete(xhr);\n\n              if (chunks.length) {\n                await upload(chunks.shift());\n              } else {\n                this.completeAll(xhr);\n              }\n            } catch (e) {\n              this.error(e);\n            }\n          };\n\n          await upload(chunks.shift());\n        }\n      }\n    };\n\n    function match(pattern, path) {\n      return path.match(\n      new RegExp(\n      `^${pattern.\n  replace(/\\//g, '\\\\/').\n  replace(/\\*\\*/g, '(\\\\/[^\\\\/]+)*').\n  replace(/\\*/g, '[^\\\\/]+').\n  replace(/((?!\\\\))\\?/g, '$1.')}$`,\n      'i'));\n\n\n    }\n\n    function chunk(files, size) {\n      const chunks = [];\n      for (let i = 0; i < files.length; i += size) {\n        chunks.push(files.slice(i, i + size));\n      }\n      return chunks;\n    }\n\n    function stop(e) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n\n    var components = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        Countdown: countdown,\n        Filter: filter,\n        Lightbox: lightbox,\n        LightboxPanel: LightboxPanel,\n        Notification: notification,\n        Parallax: parallax,\n        Slider: slider,\n        SliderParallax: sliderParallax,\n        Slideshow: slideshow,\n        SlideshowParallax: sliderParallax,\n        Sortable: sortable,\n        Tooltip: tooltip,\n        Upload: upload\n    });\n\n    each(components, (component, name) => UIkit.component(name, component));\n\n    return UIkit;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/uikit/dist/js/uikit.js\n");

/***/ })

}]);